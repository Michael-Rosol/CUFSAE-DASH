
446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004860  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004a30  08004a30  00005a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a84  08004a84  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a84  08004a84  00005a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a8c  08004a8c  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a8c  08004a8c  00005a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a90  08004a90  00005a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004a94  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  2000006c  08004b00  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08004b00  00006370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102e8  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024e1  00000000  00000000  00016384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00018868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b26  00000000  00000000  000196b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229e7  00000000  00000000  0001a1de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116da  00000000  00000000  0003cbc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3aa1  00000000  00000000  0004e29f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121d40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040fc  00000000  00000000  00121d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00125e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004a18 	.word	0x08004a18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08004a18 	.word	0x08004a18

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t raw_voltage = 0;
uint8_t raw_gear = 0;
volatile uint16_t oil_temp = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
    // Retrieve the message contents
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_msg.Header, rx_msg.Data) != HAL_OK)
 80005b8:	4b07      	ldr	r3, [pc, #28]	@ (80005d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80005ba:	4a08      	ldr	r2, [pc, #32]	@ (80005dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80005bc:	2100      	movs	r1, #0
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f001 f96a 	bl	8001898 <HAL_CAN_GetRxMessage>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
    {
        Error_Handler();
 80005ca:	f000 fbfd 	bl	8000dc8 <Error_Handler>
    }
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200000a4 	.word	0x200000a4
 80005dc:	20000088 	.word	0x20000088

080005e0 <SevenSegment_Update>:
        0x07,  // 7
        0x7f,  // 8
        0x67   // 9
};

void SevenSegment_Update(uint8_t number){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, ((number>>0)&0x01)); // a
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f8:	4825      	ldr	r0, [pc, #148]	@ (8000690 <SevenSegment_Update+0xb0>)
 80005fa:	f001 ff6b 	bl	80024d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, ((number>>1)&0x01)); // b
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	085b      	lsrs	r3, r3, #1
 8000602:	b2db      	uxtb	r3, r3
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	b2db      	uxtb	r3, r3
 800060a:	461a      	mov	r2, r3
 800060c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000610:	481f      	ldr	r0, [pc, #124]	@ (8000690 <SevenSegment_Update+0xb0>)
 8000612:	f001 ff5f 	bl	80024d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, ((number>>2)&0x01)); // c
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	089b      	lsrs	r3, r3, #2
 800061a:	b2db      	uxtb	r3, r3
 800061c:	f003 0301 	and.w	r3, r3, #1
 8000620:	b2db      	uxtb	r3, r3
 8000622:	461a      	mov	r2, r3
 8000624:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000628:	481a      	ldr	r0, [pc, #104]	@ (8000694 <SevenSegment_Update+0xb4>)
 800062a:	f001 ff53 	bl	80024d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, ((number>>3)&0x01)); // d
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	08db      	lsrs	r3, r3, #3
 8000632:	b2db      	uxtb	r3, r3
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	461a      	mov	r2, r3
 800063c:	2101      	movs	r1, #1
 800063e:	4814      	ldr	r0, [pc, #80]	@ (8000690 <SevenSegment_Update+0xb0>)
 8000640:	f001 ff48 	bl	80024d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, ((number>>4)&0x01)); // e
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	091b      	lsrs	r3, r3, #4
 8000648:	b2db      	uxtb	r3, r3
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	b2db      	uxtb	r3, r3
 8000650:	461a      	mov	r2, r3
 8000652:	2102      	movs	r1, #2
 8000654:	480e      	ldr	r0, [pc, #56]	@ (8000690 <SevenSegment_Update+0xb0>)
 8000656:	f001 ff3d 	bl	80024d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, ((number>>5)&0x01)); // f
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	095b      	lsrs	r3, r3, #5
 800065e:	b2db      	uxtb	r3, r3
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	b2db      	uxtb	r3, r3
 8000666:	461a      	mov	r2, r3
 8000668:	2140      	movs	r1, #64	@ 0x40
 800066a:	4809      	ldr	r0, [pc, #36]	@ (8000690 <SevenSegment_Update+0xb0>)
 800066c:	f001 ff32 	bl	80024d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, ((number>>6)&0x01)); // g
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	099b      	lsrs	r3, r3, #6
 8000674:	b2db      	uxtb	r3, r3
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	b2db      	uxtb	r3, r3
 800067c:	461a      	mov	r2, r3
 800067e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000682:	4803      	ldr	r0, [pc, #12]	@ (8000690 <SevenSegment_Update+0xb0>)
 8000684:	f001 ff26 	bl	80024d4 <HAL_GPIO_WritePin>

}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40020800 	.word	0x40020800
 8000694:	40020000 	.word	0x40020000

08000698 <DelayTime>:

void DelayTime(uint16_t time){
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
		//uint16_t time_passed = 0;


		uint32_t start_time = __HAL_TIM_GET_COUNTER(&htim11);
 80006a2:	4b0a      	ldr	r3, [pc, #40]	@ (80006cc <DelayTime+0x34>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006a8:	60fb      	str	r3, [r7, #12]

		while ((__HAL_TIM_GET_COUNTER(&htim11) - start_time) < time);
 80006aa:	bf00      	nop
 80006ac:	4b07      	ldr	r3, [pc, #28]	@ (80006cc <DelayTime+0x34>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	1ad2      	subs	r2, r2, r3
 80006b6:	88fb      	ldrh	r3, [r7, #6]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d3f7      	bcc.n	80006ac <DelayTime+0x14>

}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	2000011c 	.word	0x2000011c

080006d0 <DisplayRxData>:

void DisplayRxData(uint32_t value) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
    // Extract individual digits
    uint8_t temp1 = (value / 1000) % 10; // Thousands place
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a48      	ldr	r2, [pc, #288]	@ (80007fc <DisplayRxData+0x12c>)
 80006dc:	fba2 2303 	umull	r2, r3, r2, r3
 80006e0:	0999      	lsrs	r1, r3, #6
 80006e2:	4b47      	ldr	r3, [pc, #284]	@ (8000800 <DisplayRxData+0x130>)
 80006e4:	fba3 2301 	umull	r2, r3, r3, r1
 80006e8:	08da      	lsrs	r2, r3, #3
 80006ea:	4613      	mov	r3, r2
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	4413      	add	r3, r2
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	1aca      	subs	r2, r1, r3
 80006f4:	4613      	mov	r3, r2
 80006f6:	73fb      	strb	r3, [r7, #15]
    uint8_t temp2 = (value / 100) % 10;  // Hundreds place
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a42      	ldr	r2, [pc, #264]	@ (8000804 <DisplayRxData+0x134>)
 80006fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000700:	0959      	lsrs	r1, r3, #5
 8000702:	4b3f      	ldr	r3, [pc, #252]	@ (8000800 <DisplayRxData+0x130>)
 8000704:	fba3 2301 	umull	r2, r3, r3, r1
 8000708:	08da      	lsrs	r2, r3, #3
 800070a:	4613      	mov	r3, r2
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	4413      	add	r3, r2
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	1aca      	subs	r2, r1, r3
 8000714:	4613      	mov	r3, r2
 8000716:	73bb      	strb	r3, [r7, #14]
    uint8_t temp3 = (value / 10) % 10;   // Tens place
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a39      	ldr	r2, [pc, #228]	@ (8000800 <DisplayRxData+0x130>)
 800071c:	fba2 2303 	umull	r2, r3, r2, r3
 8000720:	08d9      	lsrs	r1, r3, #3
 8000722:	4b37      	ldr	r3, [pc, #220]	@ (8000800 <DisplayRxData+0x130>)
 8000724:	fba3 2301 	umull	r2, r3, r3, r1
 8000728:	08da      	lsrs	r2, r3, #3
 800072a:	4613      	mov	r3, r2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	4413      	add	r3, r2
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	1aca      	subs	r2, r1, r3
 8000734:	4613      	mov	r3, r2
 8000736:	737b      	strb	r3, [r7, #13]
    uint8_t temp4 = value % 10;          // Units place
 8000738:	6879      	ldr	r1, [r7, #4]
 800073a:	4b31      	ldr	r3, [pc, #196]	@ (8000800 <DisplayRxData+0x130>)
 800073c:	fba3 2301 	umull	r2, r3, r3, r1
 8000740:	08da      	lsrs	r2, r3, #3
 8000742:	4613      	mov	r3, r2
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	1aca      	subs	r2, r1, r3
 800074c:	4613      	mov	r3, r2
 800074e:	733b      	strb	r3, [r7, #12]

        // Display thousands digit
        SevenSegment_Update(segmentNumber[temp1]);
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	4a2d      	ldr	r2, [pc, #180]	@ (8000808 <DisplayRxData+0x138>)
 8000754:	5cd3      	ldrb	r3, [r2, r3]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff42 	bl	80005e0 <SevenSegment_Update>
        D1_LOW();  // Activate D1
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000762:	482a      	ldr	r0, [pc, #168]	@ (800080c <DisplayRxData+0x13c>)
 8000764:	f001 feb6 	bl	80024d4 <HAL_GPIO_WritePin>
        //HAL_Delay(7); // Short delay for this digit
        DelayTime(70);
 8000768:	2046      	movs	r0, #70	@ 0x46
 800076a:	f7ff ff95 	bl	8000698 <DelayTime>
        D1_HIGH(); // Deactivate D1
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000774:	4825      	ldr	r0, [pc, #148]	@ (800080c <DisplayRxData+0x13c>)
 8000776:	f001 fead 	bl	80024d4 <HAL_GPIO_WritePin>


        // Display hundreds digit
        SevenSegment_Update(segmentNumber[temp2]);
 800077a:	7bbb      	ldrb	r3, [r7, #14]
 800077c:	4a22      	ldr	r2, [pc, #136]	@ (8000808 <DisplayRxData+0x138>)
 800077e:	5cd3      	ldrb	r3, [r2, r3]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff2d 	bl	80005e0 <SevenSegment_Update>
        D2_LOW();  // Activate D2
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800078c:	481f      	ldr	r0, [pc, #124]	@ (800080c <DisplayRxData+0x13c>)
 800078e:	f001 fea1 	bl	80024d4 <HAL_GPIO_WritePin>
        //HAL_Delay(7); // Short delay for this digit
        DelayTime(70);
 8000792:	2046      	movs	r0, #70	@ 0x46
 8000794:	f7ff ff80 	bl	8000698 <DelayTime>
        D2_HIGH(); // Deactivate D2
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800079e:	481b      	ldr	r0, [pc, #108]	@ (800080c <DisplayRxData+0x13c>)
 80007a0:	f001 fe98 	bl	80024d4 <HAL_GPIO_WritePin>

        // Display tens digit
        SevenSegment_Update(segmentNumber[temp3]);
 80007a4:	7b7b      	ldrb	r3, [r7, #13]
 80007a6:	4a18      	ldr	r2, [pc, #96]	@ (8000808 <DisplayRxData+0x138>)
 80007a8:	5cd3      	ldrb	r3, [r2, r3]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ff18 	bl	80005e0 <SevenSegment_Update>
        D3_LOW();  // Activate D3
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007b6:	4815      	ldr	r0, [pc, #84]	@ (800080c <DisplayRxData+0x13c>)
 80007b8:	f001 fe8c 	bl	80024d4 <HAL_GPIO_WritePin>
        //HAL_Delay(7); // Short delay for this digit
        DelayTime(70);
 80007bc:	2046      	movs	r0, #70	@ 0x46
 80007be:	f7ff ff6b 	bl	8000698 <DelayTime>
        D3_HIGH(); // Deactivate D3
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007c8:	4810      	ldr	r0, [pc, #64]	@ (800080c <DisplayRxData+0x13c>)
 80007ca:	f001 fe83 	bl	80024d4 <HAL_GPIO_WritePin>

        // Display units digit
        SevenSegment_Update(segmentNumber[temp4]);
 80007ce:	7b3b      	ldrb	r3, [r7, #12]
 80007d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000808 <DisplayRxData+0x138>)
 80007d2:	5cd3      	ldrb	r3, [r2, r3]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff03 	bl	80005e0 <SevenSegment_Update>
        D4_LOW();  // Activate D4
 80007da:	2200      	movs	r2, #0
 80007dc:	2120      	movs	r1, #32
 80007de:	480c      	ldr	r0, [pc, #48]	@ (8000810 <DisplayRxData+0x140>)
 80007e0:	f001 fe78 	bl	80024d4 <HAL_GPIO_WritePin>
        //HAL_Delay(7); // Short delay for this digit
        DelayTime(70);
 80007e4:	2046      	movs	r0, #70	@ 0x46
 80007e6:	f7ff ff57 	bl	8000698 <DelayTime>
        D4_HIGH(); // Deactivate D4
 80007ea:	2201      	movs	r2, #1
 80007ec:	2120      	movs	r1, #32
 80007ee:	4808      	ldr	r0, [pc, #32]	@ (8000810 <DisplayRxData+0x140>)
 80007f0:	f001 fe70 	bl	80024d4 <HAL_GPIO_WritePin>



}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	10624dd3 	.word	0x10624dd3
 8000800:	cccccccd 	.word	0xcccccccd
 8000804:	51eb851f 	.word	0x51eb851f
 8000808:	20000004 	.word	0x20000004
 800080c:	40020400 	.word	0x40020400
 8000810:	40020800 	.word	0x40020800

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

//	uint8_t buf[12];
	char buf[10];
	sprintf(buf, "%u", voltage);
 800081a:	4b29      	ldr	r3, [pc, #164]	@ (80008c0 <main+0xac>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	463b      	mov	r3, r7
 8000820:	4928      	ldr	r1, [pc, #160]	@ (80008c4 <main+0xb0>)
 8000822:	4618      	mov	r0, r3
 8000824:	f003 fc58 	bl	80040d8 <siprintf>
	 *
	 *
	 *
	 */

	int numba = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082c:	f000 fcae 	bl	800118c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000830:	f000 f85a 	bl	80008e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000834:	f000 f9de 	bl	8000bf4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000838:	f000 f8c8 	bl	80009cc <MX_CAN1_Init>
  MX_TIM14_Init();
 800083c:	f000 f98c 	bl	8000b58 <MX_TIM14_Init>
  MX_TIM11_Init();
 8000840:	f000 f966 	bl	8000b10 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8000844:	f000 f9ac 	bl	8000ba0 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8000848:	f000 f92c 	bl	8000aa4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // timer is started
  HAL_TIM_Base_Start_IT(&htim14);
 800084c:	481e      	ldr	r0, [pc, #120]	@ (80008c8 <main+0xb4>)
 800084e:	f002 fd73 	bl	8003338 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000852:	481e      	ldr	r0, [pc, #120]	@ (80008cc <main+0xb8>)
 8000854:	f002 fd70 	bl	8003338 <HAL_TIM_Base_Start_IT>
	  //static uint8_t warning_active = 0;

//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // Turn on decimal point


	  TxData[0] = 0x23;
 8000858:	4b1d      	ldr	r3, [pc, #116]	@ (80008d0 <main+0xbc>)
 800085a:	2223      	movs	r2, #35	@ 0x23
 800085c:	701a      	strb	r2, [r3, #0]
      TxData[1] = 0x49;
 800085e:	4b1c      	ldr	r3, [pc, #112]	@ (80008d0 <main+0xbc>)
 8000860:	2249      	movs	r2, #73	@ 0x49
 8000862:	705a      	strb	r2, [r3, #1]
      TxData[2] = 0x69;
 8000864:	4b1a      	ldr	r3, [pc, #104]	@ (80008d0 <main+0xbc>)
 8000866:	2269      	movs	r2, #105	@ 0x69
 8000868:	709a      	strb	r2, [r3, #2]
//
      numba++;
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	3301      	adds	r3, #1
 800086e:	60fb      	str	r3, [r7, #12]

	  if (numba > 50){
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b32      	cmp	r3, #50	@ 0x32
 8000874:	dd01      	ble.n	800087a <main+0x66>
		  numba = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
	  }
	 if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 800087a:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <main+0xc0>)
 800087c:	4a14      	ldr	r2, [pc, #80]	@ (80008d0 <main+0xbc>)
 800087e:	4916      	ldr	r1, [pc, #88]	@ (80008d8 <main+0xc4>)
 8000880:	4816      	ldr	r0, [pc, #88]	@ (80008dc <main+0xc8>)
 8000882:	f000 ff39 	bl	80016f8 <HAL_CAN_AddTxMessage>
	//        	DisplayRxData(204);
//	 char message[] = "Hello, World!\r\n";
//	     HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
//	 strcpy((char *)buf, "Hello\r\n");
//	 HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
	 HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000886:	463b      	mov	r3, r7
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fcc1 	bl	8000210 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	b29a      	uxth	r2, r3
 8000892:	4639      	mov	r1, r7
 8000894:	f04f 33ff 	mov.w	r3, #4294967295
 8000898:	4811      	ldr	r0, [pc, #68]	@ (80008e0 <main+0xcc>)
 800089a:	f003 f861 	bl	8003960 <HAL_UART_Transmit>

	 // Optionally, you can add a newline or carriage return at the end
	 HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
 80008a2:	2202      	movs	r2, #2
 80008a4:	490f      	ldr	r1, [pc, #60]	@ (80008e4 <main+0xd0>)
 80008a6:	480e      	ldr	r0, [pc, #56]	@ (80008e0 <main+0xcc>)
 80008a8:	f003 f85a 	bl	8003960 <HAL_UART_Transmit>
	 // this currently presents a problem as a infinite loop causing uart to not be updated
//	 while (TxData[1] >= 0){
//
//		 	 DisplayRxData(TxData[1]);
//	 }
	 DisplayRxData(voltage);
 80008ac:	4b04      	ldr	r3, [pc, #16]	@ (80008c0 <main+0xac>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff0d 	bl	80006d0 <DisplayRxData>

//
	   HAL_Delay(1);
 80008b6:	2001      	movs	r0, #1
 80008b8:	f000 fcda 	bl	8001270 <HAL_Delay>
	  TxData[0] = 0x23;
 80008bc:	e7cc      	b.n	8000858 <main+0x44>
 80008be:	bf00      	nop
 80008c0:	20000000 	.word	0x20000000
 80008c4:	08004a30 	.word	0x08004a30
 80008c8:	20000164 	.word	0x20000164
 80008cc:	200000d4 	.word	0x200000d4
 80008d0:	20000210 	.word	0x20000210
 80008d4:	2000020c 	.word	0x2000020c
 80008d8:	200001f4 	.word	0x200001f4
 80008dc:	200000ac 	.word	0x200000ac
 80008e0:	200001ac 	.word	0x200001ac
 80008e4:	08004a34 	.word	0x08004a34

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b094      	sub	sp, #80	@ 0x50
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	2234      	movs	r2, #52	@ 0x34
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f003 fc0e 	bl	8004118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	4b2c      	ldr	r3, [pc, #176]	@ (80009c4 <SystemClock_Config+0xdc>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000914:	4a2b      	ldr	r2, [pc, #172]	@ (80009c4 <SystemClock_Config+0xdc>)
 8000916:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091a:	6413      	str	r3, [r2, #64]	@ 0x40
 800091c:	4b29      	ldr	r3, [pc, #164]	@ (80009c4 <SystemClock_Config+0xdc>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000928:	2300      	movs	r3, #0
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	4b26      	ldr	r3, [pc, #152]	@ (80009c8 <SystemClock_Config+0xe0>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a25      	ldr	r2, [pc, #148]	@ (80009c8 <SystemClock_Config+0xe0>)
 8000932:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000936:	6013      	str	r3, [r2, #0]
 8000938:	4b23      	ldr	r3, [pc, #140]	@ (80009c8 <SystemClock_Config+0xe0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000944:	2302      	movs	r3, #2
 8000946:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000948:	2301      	movs	r3, #1
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800094c:	2310      	movs	r3, #16
 800094e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000950:	2302      	movs	r3, #2
 8000952:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000954:	2300      	movs	r3, #0
 8000956:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000958:	2308      	movs	r3, #8
 800095a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800095c:	23b4      	movs	r3, #180	@ 0xb4
 800095e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000960:	2302      	movs	r3, #2
 8000962:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000964:	2302      	movs	r3, #2
 8000966:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000968:	2302      	movs	r3, #2
 800096a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4618      	mov	r0, r3
 8000972:	f002 f963 	bl	8002c3c <HAL_RCC_OscConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800097c:	f000 fa24 	bl	8000dc8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000980:	f001 fdc2 	bl	8002508 <HAL_PWREx_EnableOverDrive>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800098a:	f000 fa1d 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098e:	230f      	movs	r3, #15
 8000990:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000992:	2302      	movs	r3, #2
 8000994:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800099a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800099e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80009a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	2105      	movs	r1, #5
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 fdfb 	bl	80025a8 <HAL_RCC_ClockConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80009b8:	f000 fa06 	bl	8000dc8 <Error_Handler>
  }
}
 80009bc:	bf00      	nop
 80009be:	3750      	adds	r7, #80	@ 0x50
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40007000 	.word	0x40007000

080009cc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	@ 0x28
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 1 */
	  CAN_FilterTypeDef  sFilterConfig;


	  sFilterConfig.FilterBank = 10; //change to 1 if CAN stops working
 80009d2:	230a      	movs	r3, #10
 80009d4:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80009da:	2301      	movs	r3, #1
 80009dc:	61fb      	str	r3, [r7, #28]
	  sFilterConfig.FilterIdHigh = 0x0000;
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
	  sFilterConfig.FilterIdLow = 0x0000;
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
	  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterMaskIdLow = 0x0000;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80009f2:	2301      	movs	r3, #1
 80009f4:	623b      	str	r3, [r7, #32]
	  sFilterConfig.SlaveStartFilterBank = 14; // meaningless in our context
 80009f6:	230e      	movs	r3, #14
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24

	  HAL_CAN_Start(&hcan1);
 80009fa:	4827      	ldr	r0, [pc, #156]	@ (8000a98 <MX_CAN1_Init+0xcc>)
 80009fc:	f000 fe38 	bl	8001670 <HAL_CAN_Start>

	  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000a00:	463b      	mov	r3, r7
 8000a02:	4619      	mov	r1, r3
 8000a04:	4824      	ldr	r0, [pc, #144]	@ (8000a98 <MX_CAN1_Init+0xcc>)
 8000a06:	f000 fd53 	bl	80014b0 <HAL_CAN_ConfigFilter>


	  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	4822      	ldr	r0, [pc, #136]	@ (8000a98 <MX_CAN1_Init+0xcc>)
 8000a0e:	f001 f865 	bl	8001adc <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a12:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <MX_CAN1_Init+0xcc>)
 8000a14:	4a21      	ldr	r2, [pc, #132]	@ (8000a9c <MX_CAN1_Init+0xd0>)
 8000a16:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000a18:	4b1f      	ldr	r3, [pc, #124]	@ (8000a98 <MX_CAN1_Init+0xcc>)
 8000a1a:	2209      	movs	r2, #9
 8000a1c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a98 <MX_CAN1_Init+0xcc>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a24:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <MX_CAN1_Init+0xcc>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a98 <MX_CAN1_Init+0xcc>)
 8000a2c:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8000a30:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a32:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <MX_CAN1_Init+0xcc>)
 8000a34:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000a38:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <MX_CAN1_Init+0xcc>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a40:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <MX_CAN1_Init+0xcc>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a46:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <MX_CAN1_Init+0xcc>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <MX_CAN1_Init+0xcc>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <MX_CAN1_Init+0xcc>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <MX_CAN1_Init+0xcc>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a5e:	480e      	ldr	r0, [pc, #56]	@ (8000a98 <MX_CAN1_Init+0xcc>)
 8000a60:	f000 fc2a 	bl	80012b8 <HAL_CAN_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_CAN1_Init+0xa2>
  {
    Error_Handler();
 8000a6a:	f000 f9ad 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

	        TxHeader.StdId = 0x0446;  // ID 2 (to match H7's filter)
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <MX_CAN1_Init+0xd4>)
 8000a70:	f240 4246 	movw	r2, #1094	@ 0x446
 8000a74:	601a      	str	r2, [r3, #0]
	        TxHeader.IDE = CAN_ID_STD;  // Standard ID
 8000a76:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <MX_CAN1_Init+0xd4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
	        TxHeader.RTR = CAN_RTR_DATA;  // Data frame
 8000a7c:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <MX_CAN1_Init+0xd4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
	        TxHeader.DLC = 8;  // Length of data (3 bytes)
 8000a82:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <MX_CAN1_Init+0xd4>)
 8000a84:	2208      	movs	r2, #8
 8000a86:	611a      	str	r2, [r3, #16]
	        TxHeader.TransmitGlobalTime = DISABLE;
 8000a88:	4b05      	ldr	r3, [pc, #20]	@ (8000aa0 <MX_CAN1_Init+0xd4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	751a      	strb	r2, [r3, #20]

  /* USER CODE END CAN1_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	3728      	adds	r7, #40	@ 0x28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000ac 	.word	0x200000ac
 8000a9c:	40006400 	.word	0x40006400
 8000aa0:	200001f4 	.word	0x200001f4

08000aa4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aaa:	463b      	mov	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <MX_TIM7_Init+0x64>)
 8000ab4:	4a15      	ldr	r2, [pc, #84]	@ (8000b0c <MX_TIM7_Init+0x68>)
 8000ab6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000 - 1;
 8000ab8:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <MX_TIM7_Init+0x64>)
 8000aba:	f242 3227 	movw	r2, #8999	@ 0x2327
 8000abe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <MX_TIM7_Init+0x64>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000 - 1;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <MX_TIM7_Init+0x64>)
 8000ac8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000acc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <MX_TIM7_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ad4:	480c      	ldr	r0, [pc, #48]	@ (8000b08 <MX_TIM7_Init+0x64>)
 8000ad6:	f002 fb4f 	bl	8003178 <HAL_TIM_Base_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000ae0:	f000 f972 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000aec:	463b      	mov	r3, r7
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	@ (8000b08 <MX_TIM7_Init+0x64>)
 8000af2:	f002 fe55 	bl	80037a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000afc:	f000 f964 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200000d4 	.word	0x200000d4
 8000b0c:	40001400 	.word	0x40001400

08000b10 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000b14:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <MX_TIM11_Init+0x40>)
 8000b16:	4a0f      	ldr	r2, [pc, #60]	@ (8000b54 <MX_TIM11_Init+0x44>)
 8000b18:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 9000 - 1;
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b50 <MX_TIM11_Init+0x40>)
 8000b1c:	f242 3227 	movw	r2, #8999	@ 0x2327
 8000b20:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <MX_TIM11_Init+0x40>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535 - 1;
 8000b28:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <MX_TIM11_Init+0x40>)
 8000b2a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000b2e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b30:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <MX_TIM11_Init+0x40>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b36:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <MX_TIM11_Init+0x40>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000b3c:	4804      	ldr	r0, [pc, #16]	@ (8000b50 <MX_TIM11_Init+0x40>)
 8000b3e:	f002 fb1b 	bl	8003178 <HAL_TIM_Base_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8000b48:	f000 f93e 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	2000011c 	.word	0x2000011c
 8000b54:	40014800 	.word	0x40014800

08000b58 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <MX_TIM14_Init+0x40>)
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b9c <MX_TIM14_Init+0x44>)
 8000b60:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 9000 - 1;
 8000b62:	4b0d      	ldr	r3, [pc, #52]	@ (8000b98 <MX_TIM14_Init+0x40>)
 8000b64:	f242 3227 	movw	r2, #8999	@ 0x2327
 8000b68:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <MX_TIM14_Init+0x40>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20 - 1;
 8000b70:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <MX_TIM14_Init+0x40>)
 8000b72:	2213      	movs	r2, #19
 8000b74:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b76:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <MX_TIM14_Init+0x40>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <MX_TIM14_Init+0x40>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	@ (8000b98 <MX_TIM14_Init+0x40>)
 8000b84:	f002 faf8 	bl	8003178 <HAL_TIM_Base_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000b8e:	f000 f91b 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000164 	.word	0x20000164
 8000b9c:	40002000 	.word	0x40002000

08000ba0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	@ (8000bf0 <MX_USART2_UART_Init+0x50>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000baa:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bd8:	f002 fe72 	bl	80038c0 <HAL_UART_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000be2:	f000 f8f1 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200001ac 	.word	0x200001ac
 8000bf0:	40004400 	.word	0x40004400

08000bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	@ 0x28
 8000bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b44      	ldr	r3, [pc, #272]	@ (8000d20 <MX_GPIO_Init+0x12c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a43      	ldr	r2, [pc, #268]	@ (8000d20 <MX_GPIO_Init+0x12c>)
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b41      	ldr	r3, [pc, #260]	@ (8000d20 <MX_GPIO_Init+0x12c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d20 <MX_GPIO_Init+0x12c>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a3c      	ldr	r2, [pc, #240]	@ (8000d20 <MX_GPIO_Init+0x12c>)
 8000c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b3a      	ldr	r3, [pc, #232]	@ (8000d20 <MX_GPIO_Init+0x12c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	4b36      	ldr	r3, [pc, #216]	@ (8000d20 <MX_GPIO_Init+0x12c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a35      	ldr	r2, [pc, #212]	@ (8000d20 <MX_GPIO_Init+0x12c>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b33      	ldr	r3, [pc, #204]	@ (8000d20 <MX_GPIO_Init+0x12c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b2f      	ldr	r3, [pc, #188]	@ (8000d20 <MX_GPIO_Init+0x12c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	4a2e      	ldr	r2, [pc, #184]	@ (8000d20 <MX_GPIO_Init+0x12c>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8000d20 <MX_GPIO_Init+0x12c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f646 1163 	movw	r1, #26979	@ 0x6963
 8000c80:	4828      	ldr	r0, [pc, #160]	@ (8000d24 <MX_GPIO_Init+0x130>)
 8000c82:	f001 fc27 	bl	80024d4 <HAL_GPIO_WritePin>
                          |D4_Pin|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f240 5122 	movw	r1, #1314	@ 0x522
 8000c8c:	4826      	ldr	r0, [pc, #152]	@ (8000d28 <MX_GPIO_Init+0x134>)
 8000c8e:	f001 fc21 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D1_Pin|D2_Pin|D3_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000c98:	4824      	ldr	r0, [pc, #144]	@ (8000d2c <MX_GPIO_Init+0x138>)
 8000c9a:	f001 fc1b 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC0 PC1
                           D4_Pin PC6 PC8 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1
 8000c9e:	f646 1363 	movw	r3, #26979	@ 0x6963
 8000ca2:	617b      	str	r3, [r7, #20]
                          |D4_Pin|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	481b      	ldr	r0, [pc, #108]	@ (8000d24 <MX_GPIO_Init+0x130>)
 8000cb8:	f001 fa78 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_10;
 8000cbc:	f240 5322 	movw	r3, #1314	@ 0x522
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4814      	ldr	r0, [pc, #80]	@ (8000d28 <MX_GPIO_Init+0x134>)
 8000cd6:	f001 fa69 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cda:	2310      	movs	r3, #16
 8000cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cea:	2305      	movs	r3, #5
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480c      	ldr	r0, [pc, #48]	@ (8000d28 <MX_GPIO_Init+0x134>)
 8000cf6:	f001 fa59 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D1_Pin|D2_Pin|D3_Pin;
 8000cfa:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	4806      	ldr	r0, [pc, #24]	@ (8000d2c <MX_GPIO_Init+0x138>)
 8000d14:	f001 fa4a 	bl	80021ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d18:	bf00      	nop
 8000d1a:	3728      	adds	r7, #40	@ 0x28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020800 	.word	0x40020800
 8000d28:	40020000 	.word	0x40020000
 8000d2c:	40020400 	.word	0x40020400

08000d30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
    static uint32_t timer_val = 0;  // Persistent timer value
    static uint8_t led_state = 0;  // 0: LED off, 1: LED on

    if (htim == &htim14) { // Check if this is TIM14 interrupt
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a1d      	ldr	r2, [pc, #116]	@ (8000db0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d132      	bne.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x76>
        if (TxData[1] > 5 && led_state == 0) {
 8000d40:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d42:	785b      	ldrb	r3, [r3, #1]
 8000d44:	2b05      	cmp	r3, #5
 8000d46:	d914      	bls.n	8000d72 <HAL_TIM_PeriodElapsedCallback+0x42>
 8000d48:	4b1b      	ldr	r3, [pc, #108]	@ (8000db8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d110      	bne.n	8000d72 <HAL_TIM_PeriodElapsedCallback+0x42>
            // Turn the LED on and start the timer
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  // Turn LED on
 8000d50:	2201      	movs	r2, #1
 8000d52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d56:	4819      	ldr	r0, [pc, #100]	@ (8000dbc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000d58:	f001 fbbc 	bl	80024d4 <HAL_GPIO_WritePin>
            timer_val = __HAL_TIM_GET_COUNTER(&htim11);          // Record start time
 8000d5c:	4b18      	ldr	r3, [pc, #96]	@ (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d62:	4a18      	ldr	r2, [pc, #96]	@ (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d64:	6013      	str	r3, [r2, #0]
            HAL_TIM_Base_Start(&htim11);                        // Start timer if not already running
 8000d66:	4816      	ldr	r0, [pc, #88]	@ (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000d68:	f002 fa56 	bl	8003218 <HAL_TIM_Base_Start>
            led_state = 1;                                      // Update state
 8000d6c:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
        }

        if (led_state == 1) {
 8000d72:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d115      	bne.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x76>
            // Check if 6 seconds have elapsed
            if (__HAL_TIM_GET_COUNTER(&htim11) - timer_val >= 60000) {
 8000d7a:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d80:	4b10      	ldr	r3, [pc, #64]	@ (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d90b      	bls.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x76>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // Turn LED off
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d94:	4809      	ldr	r0, [pc, #36]	@ (8000dbc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000d96:	f001 fb9d 	bl	80024d4 <HAL_GPIO_WritePin>
                HAL_TIM_Base_Stop(&htim11);                          // Stop timer
 8000d9a:	4809      	ldr	r0, [pc, #36]	@ (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000d9c:	f002 faa4 	bl	80032e8 <HAL_TIM_Base_Stop>
                led_state = 0;                                       // Reset state
 8000da0:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
    if (htim == &htim7) {
//    	DisplayRxData(oil_temp);


    }
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000164 	.word	0x20000164
 8000db4:	20000210 	.word	0x20000210
 8000db8:	20000218 	.word	0x20000218
 8000dbc:	40020000 	.word	0x40020000
 8000dc0:	2000011c 	.word	0x2000011c
 8000dc4:	2000021c 	.word	0x2000021c

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <Error_Handler+0x8>

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dea:	4b0d      	ldr	r3, [pc, #52]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	4a08      	ldr	r2, [pc, #32]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e06:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <HAL_MspInit+0x4c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800

08000e24 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	@ 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb8 <HAL_CAN_MspInit+0x94>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d134      	bne.n	8000eb0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ebc <HAL_CAN_MspInit+0x98>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8000ebc <HAL_CAN_MspInit+0x98>)
 8000e50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e56:	4b19      	ldr	r3, [pc, #100]	@ (8000ebc <HAL_CAN_MspInit+0x98>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <HAL_CAN_MspInit+0x98>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a14      	ldr	r2, [pc, #80]	@ (8000ebc <HAL_CAN_MspInit+0x98>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <HAL_CAN_MspInit+0x98>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e7e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e90:	2309      	movs	r3, #9
 8000e92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4809      	ldr	r0, [pc, #36]	@ (8000ec0 <HAL_CAN_MspInit+0x9c>)
 8000e9c:	f001 f986 	bl	80021ac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	2014      	movs	r0, #20
 8000ea6:	f001 f94a 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000eaa:	2014      	movs	r0, #20
 8000eac:	f001 f963 	bl	8002176 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000eb0:	bf00      	nop
 8000eb2:	3728      	adds	r7, #40	@ 0x28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40006400 	.word	0x40006400
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020000 	.word	0x40020000

08000ec4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a26      	ldr	r2, [pc, #152]	@ (8000f6c <HAL_TIM_Base_MspInit+0xa8>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d116      	bne.n	8000f04 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	4b25      	ldr	r3, [pc, #148]	@ (8000f70 <HAL_TIM_Base_MspInit+0xac>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	4a24      	ldr	r2, [pc, #144]	@ (8000f70 <HAL_TIM_Base_MspInit+0xac>)
 8000ee0:	f043 0320 	orr.w	r3, r3, #32
 8000ee4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee6:	4b22      	ldr	r3, [pc, #136]	@ (8000f70 <HAL_TIM_Base_MspInit+0xac>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	f003 0320 	and.w	r3, r3, #32
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2037      	movs	r0, #55	@ 0x37
 8000ef8:	f001 f921 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000efc:	2037      	movs	r0, #55	@ 0x37
 8000efe:	f001 f93a 	bl	8002176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000f02:	e02e      	b.n	8000f62 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a1a      	ldr	r2, [pc, #104]	@ (8000f74 <HAL_TIM_Base_MspInit+0xb0>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d10e      	bne.n	8000f2c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b17      	ldr	r3, [pc, #92]	@ (8000f70 <HAL_TIM_Base_MspInit+0xac>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	4a16      	ldr	r2, [pc, #88]	@ (8000f70 <HAL_TIM_Base_MspInit+0xac>)
 8000f18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1e:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <HAL_TIM_Base_MspInit+0xac>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
}
 8000f2a:	e01a      	b.n	8000f62 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM14)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a11      	ldr	r2, [pc, #68]	@ (8000f78 <HAL_TIM_Base_MspInit+0xb4>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d115      	bne.n	8000f62 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <HAL_TIM_Base_MspInit+0xac>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f70 <HAL_TIM_Base_MspInit+0xac>)
 8000f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f46:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <HAL_TIM_Base_MspInit+0xac>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 2, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2102      	movs	r1, #2
 8000f56:	202d      	movs	r0, #45	@ 0x2d
 8000f58:	f001 f8f1 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000f5c:	202d      	movs	r0, #45	@ 0x2d
 8000f5e:	f001 f90a 	bl	8002176 <HAL_NVIC_EnableIRQ>
}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40001400 	.word	0x40001400
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40014800 	.word	0x40014800
 8000f78:	40002000 	.word	0x40002000

08000f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a19      	ldr	r2, [pc, #100]	@ (8001000 <HAL_UART_MspInit+0x84>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d12b      	bne.n	8000ff6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <HAL_UART_MspInit+0x88>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	4a17      	ldr	r2, [pc, #92]	@ (8001004 <HAL_UART_MspInit+0x88>)
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fae:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <HAL_UART_MspInit+0x88>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <HAL_UART_MspInit+0x88>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a10      	ldr	r2, [pc, #64]	@ (8001004 <HAL_UART_MspInit+0x88>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <HAL_UART_MspInit+0x88>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	@ (8001008 <HAL_UART_MspInit+0x8c>)
 8000ff2:	f001 f8db 	bl	80021ac <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	@ 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40004400 	.word	0x40004400
 8001004:	40023800 	.word	0x40023800
 8001008:	40020000 	.word	0x40020000

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <NMI_Handler+0x4>

08001014 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <HardFault_Handler+0x4>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <MemManage_Handler+0x4>

08001024 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <BusFault_Handler+0x4>

0800102c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <UsageFault_Handler+0x4>

08001034 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001062:	f000 f8e5 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001070:	4802      	ldr	r0, [pc, #8]	@ (800107c <CAN1_RX0_IRQHandler+0x10>)
 8001072:	f000 fd59 	bl	8001b28 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200000ac 	.word	0x200000ac

08001080 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001084:	4802      	ldr	r0, [pc, #8]	@ (8001090 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001086:	f002 f9c7 	bl	8003418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000164 	.word	0x20000164

08001094 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001098:	4802      	ldr	r0, [pc, #8]	@ (80010a4 <TIM7_IRQHandler+0x10>)
 800109a:	f002 f9bd 	bl	8003418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000d4 	.word	0x200000d4

080010a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b0:	4a14      	ldr	r2, [pc, #80]	@ (8001104 <_sbrk+0x5c>)
 80010b2:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <_sbrk+0x60>)
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010bc:	4b13      	ldr	r3, [pc, #76]	@ (800110c <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c4:	4b11      	ldr	r3, [pc, #68]	@ (800110c <_sbrk+0x64>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	@ (8001110 <_sbrk+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ca:	4b10      	ldr	r3, [pc, #64]	@ (800110c <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d207      	bcs.n	80010e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d8:	f003 f826 	bl	8004128 <__errno>
 80010dc:	4603      	mov	r3, r0
 80010de:	220c      	movs	r2, #12
 80010e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	e009      	b.n	80010fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e8:	4b08      	ldr	r3, [pc, #32]	@ (800110c <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ee:	4b07      	ldr	r3, [pc, #28]	@ (800110c <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	4a05      	ldr	r2, [pc, #20]	@ (800110c <_sbrk+0x64>)
 80010f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010fa:	68fb      	ldr	r3, [r7, #12]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20020000 	.word	0x20020000
 8001108:	00000400 	.word	0x00000400
 800110c:	20000220 	.word	0x20000220
 8001110:	20000370 	.word	0x20000370

08001114 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <SystemInit+0x20>)
 800111a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800111e:	4a05      	ldr	r2, [pc, #20]	@ (8001134 <SystemInit+0x20>)
 8001120:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001124:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001138:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001170 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800113c:	f7ff ffea 	bl	8001114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001140:	480c      	ldr	r0, [pc, #48]	@ (8001174 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001142:	490d      	ldr	r1, [pc, #52]	@ (8001178 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001144:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001158:	4c0a      	ldr	r4, [pc, #40]	@ (8001184 <LoopFillZerobss+0x22>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001166:	f002 ffe5 	bl	8004134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800116a:	f7ff fb53 	bl	8000814 <main>
  bx  lr    
 800116e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001170:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001178:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800117c:	08004a94 	.word	0x08004a94
  ldr r2, =_sbss
 8001180:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001184:	20000370 	.word	0x20000370

08001188 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC_IRQHandler>
	...

0800118c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001190:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a0d      	ldr	r2, [pc, #52]	@ (80011cc <HAL_Init+0x40>)
 8001196:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800119a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800119c:	4b0b      	ldr	r3, [pc, #44]	@ (80011cc <HAL_Init+0x40>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0a      	ldr	r2, [pc, #40]	@ (80011cc <HAL_Init+0x40>)
 80011a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a8:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <HAL_Init+0x40>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a07      	ldr	r2, [pc, #28]	@ (80011cc <HAL_Init+0x40>)
 80011ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b4:	2003      	movs	r0, #3
 80011b6:	f000 ffb7 	bl	8002128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ba:	200f      	movs	r0, #15
 80011bc:	f000 f808 	bl	80011d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c0:	f7ff fe08 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40023c00 	.word	0x40023c00

080011d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d8:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <HAL_InitTick+0x54>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <HAL_InitTick+0x58>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 ffcf 	bl	8002192 <HAL_SYSTICK_Config>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00e      	b.n	800121c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d80a      	bhi.n	800121a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001204:	2200      	movs	r2, #0
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	f04f 30ff 	mov.w	r0, #4294967295
 800120c:	f000 ff97 	bl	800213e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001210:	4a06      	ldr	r2, [pc, #24]	@ (800122c <HAL_InitTick+0x5c>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	e000      	b.n	800121c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000010 	.word	0x20000010
 8001228:	20000018 	.word	0x20000018
 800122c:	20000014 	.word	0x20000014

08001230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_IncTick+0x20>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_IncTick+0x24>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4413      	add	r3, r2
 8001240:	4a04      	ldr	r2, [pc, #16]	@ (8001254 <HAL_IncTick+0x24>)
 8001242:	6013      	str	r3, [r2, #0]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000018 	.word	0x20000018
 8001254:	20000224 	.word	0x20000224

08001258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return uwTick;
 800125c:	4b03      	ldr	r3, [pc, #12]	@ (800126c <HAL_GetTick+0x14>)
 800125e:	681b      	ldr	r3, [r3, #0]
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000224 	.word	0x20000224

08001270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001278:	f7ff ffee 	bl	8001258 <HAL_GetTick>
 800127c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001288:	d005      	beq.n	8001296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128a:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <HAL_Delay+0x44>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001296:	bf00      	nop
 8001298:	f7ff ffde 	bl	8001258 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d8f7      	bhi.n	8001298 <HAL_Delay+0x28>
  {
  }
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000018 	.word	0x20000018

080012b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e0ed      	b.n	80014a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fda4 	bl	8000e24 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f042 0201 	orr.w	r2, r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012ec:	f7ff ffb4 	bl	8001258 <HAL_GetTick>
 80012f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012f2:	e012      	b.n	800131a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012f4:	f7ff ffb0 	bl	8001258 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b0a      	cmp	r3, #10
 8001300:	d90b      	bls.n	800131a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001306:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2205      	movs	r2, #5
 8001312:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e0c5      	b.n	80014a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0e5      	beq.n	80012f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0202 	bic.w	r2, r2, #2
 8001336:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001338:	f7ff ff8e 	bl	8001258 <HAL_GetTick>
 800133c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800133e:	e012      	b.n	8001366 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001340:	f7ff ff8a 	bl	8001258 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b0a      	cmp	r3, #10
 800134c:	d90b      	bls.n	8001366 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001352:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2205      	movs	r2, #5
 800135e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e09f      	b.n	80014a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1e5      	bne.n	8001340 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	7e1b      	ldrb	r3, [r3, #24]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d108      	bne.n	800138e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	e007      	b.n	800139e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800139c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7e5b      	ldrb	r3, [r3, #25]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d108      	bne.n	80013b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	e007      	b.n	80013c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80013c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7e9b      	ldrb	r3, [r3, #26]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d108      	bne.n	80013e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 0220 	orr.w	r2, r2, #32
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	e007      	b.n	80013f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0220 	bic.w	r2, r2, #32
 80013f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	7edb      	ldrb	r3, [r3, #27]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d108      	bne.n	800140c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0210 	bic.w	r2, r2, #16
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e007      	b.n	800141c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 0210 	orr.w	r2, r2, #16
 800141a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	7f1b      	ldrb	r3, [r3, #28]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d108      	bne.n	8001436 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 0208 	orr.w	r2, r2, #8
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	e007      	b.n	8001446 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0208 	bic.w	r2, r2, #8
 8001444:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	7f5b      	ldrb	r3, [r3, #29]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d108      	bne.n	8001460 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 0204 	orr.w	r2, r2, #4
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	e007      	b.n	8001470 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0204 	bic.w	r2, r2, #4
 800146e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	431a      	orrs	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	ea42 0103 	orr.w	r1, r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	1e5a      	subs	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014c8:	7cfb      	ldrb	r3, [r7, #19]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d003      	beq.n	80014d6 <HAL_CAN_ConfigFilter+0x26>
 80014ce:	7cfb      	ldrb	r3, [r7, #19]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	f040 80be 	bne.w	8001652 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80014d6:	4b65      	ldr	r3, [pc, #404]	@ (800166c <HAL_CAN_ConfigFilter+0x1bc>)
 80014d8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014e0:	f043 0201 	orr.w	r2, r3, #1
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014f0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	431a      	orrs	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	f003 031f 	and.w	r3, r3, #31
 8001516:	2201      	movs	r2, #1
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	43db      	mvns	r3, r3
 8001528:	401a      	ands	r2, r3
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d123      	bne.n	8001580 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	43db      	mvns	r3, r3
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800155a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	3248      	adds	r2, #72	@ 0x48
 8001560:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001574:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001576:	6979      	ldr	r1, [r7, #20]
 8001578:	3348      	adds	r3, #72	@ 0x48
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	440b      	add	r3, r1
 800157e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d122      	bne.n	80015ce <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	431a      	orrs	r2, r3
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3248      	adds	r2, #72	@ 0x48
 80015ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015c4:	6979      	ldr	r1, [r7, #20]
 80015c6:	3348      	adds	r3, #72	@ 0x48
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	440b      	add	r3, r1
 80015cc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d109      	bne.n	80015ea <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43db      	mvns	r3, r3
 80015e0:	401a      	ands	r2, r3
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80015e8:	e007      	b.n	80015fa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	431a      	orrs	r2, r3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d109      	bne.n	8001616 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	43db      	mvns	r3, r3
 800160c:	401a      	ands	r2, r3
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001614:	e007      	b.n	8001626 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	431a      	orrs	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d107      	bne.n	800163e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	431a      	orrs	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001644:	f023 0201 	bic.w	r2, r3, #1
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e006      	b.n	8001660 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001656:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
  }
}
 8001660:	4618      	mov	r0, r3
 8001662:	371c      	adds	r7, #28
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	40006400 	.word	0x40006400

08001670 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b01      	cmp	r3, #1
 8001682:	d12e      	bne.n	80016e2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2202      	movs	r2, #2
 8001688:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0201 	bic.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800169c:	f7ff fddc 	bl	8001258 <HAL_GetTick>
 80016a0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016a2:	e012      	b.n	80016ca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016a4:	f7ff fdd8 	bl	8001258 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b0a      	cmp	r3, #10
 80016b0:	d90b      	bls.n	80016ca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2205      	movs	r2, #5
 80016c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e012      	b.n	80016f0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1e5      	bne.n	80016a4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e006      	b.n	80016f0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
  }
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	@ 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800170c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001716:	7ffb      	ldrb	r3, [r7, #31]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d003      	beq.n	8001724 <HAL_CAN_AddTxMessage+0x2c>
 800171c:	7ffb      	ldrb	r3, [r7, #31]
 800171e:	2b02      	cmp	r3, #2
 8001720:	f040 80ad 	bne.w	800187e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10a      	bne.n	8001744 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001734:	2b00      	cmp	r3, #0
 8001736:	d105      	bne.n	8001744 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 8095 	beq.w	800186e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	0e1b      	lsrs	r3, r3, #24
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800174e:	2201      	movs	r2, #1
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	409a      	lsls	r2, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d10d      	bne.n	800177c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800176a:	68f9      	ldr	r1, [r7, #12]
 800176c:	6809      	ldr	r1, [r1, #0]
 800176e:	431a      	orrs	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	3318      	adds	r3, #24
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	440b      	add	r3, r1
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	e00f      	b.n	800179c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001786:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800178c:	68f9      	ldr	r1, [r7, #12]
 800178e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001790:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3318      	adds	r3, #24
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	440b      	add	r3, r1
 800179a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6819      	ldr	r1, [r3, #0]
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	691a      	ldr	r2, [r3, #16]
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	3318      	adds	r3, #24
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	440b      	add	r3, r1
 80017ac:	3304      	adds	r3, #4
 80017ae:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	7d1b      	ldrb	r3, [r3, #20]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d111      	bne.n	80017dc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3318      	adds	r3, #24
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	4413      	add	r3, r2
 80017c4:	3304      	adds	r3, #4
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	6811      	ldr	r1, [r2, #0]
 80017cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3318      	adds	r3, #24
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	440b      	add	r3, r1
 80017d8:	3304      	adds	r3, #4
 80017da:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3307      	adds	r3, #7
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	061a      	lsls	r2, r3, #24
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3306      	adds	r3, #6
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	041b      	lsls	r3, r3, #16
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3305      	adds	r3, #5
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	4313      	orrs	r3, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	3204      	adds	r2, #4
 80017fc:	7812      	ldrb	r2, [r2, #0]
 80017fe:	4610      	mov	r0, r2
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	6811      	ldr	r1, [r2, #0]
 8001804:	ea43 0200 	orr.w	r2, r3, r0
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	440b      	add	r3, r1
 800180e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001812:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3303      	adds	r3, #3
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	061a      	lsls	r2, r3, #24
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3302      	adds	r3, #2
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	041b      	lsls	r3, r3, #16
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3301      	adds	r3, #1
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	4313      	orrs	r3, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	7812      	ldrb	r2, [r2, #0]
 8001834:	4610      	mov	r0, r2
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	6811      	ldr	r1, [r2, #0]
 800183a:	ea43 0200 	orr.w	r2, r3, r0
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	011b      	lsls	r3, r3, #4
 8001842:	440b      	add	r3, r1
 8001844:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001848:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3318      	adds	r3, #24
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	4413      	add	r3, r2
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	6811      	ldr	r1, [r2, #0]
 800185c:	f043 0201 	orr.w	r2, r3, #1
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3318      	adds	r3, #24
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	440b      	add	r3, r1
 8001868:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	e00e      	b.n	800188c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001872:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e006      	b.n	800188c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001882:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
  }
}
 800188c:	4618      	mov	r0, r3
 800188e:	3724      	adds	r7, #36	@ 0x24
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001898:	b480      	push	{r7}
 800189a:	b087      	sub	sp, #28
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
 80018a4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ac:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80018ae:	7dfb      	ldrb	r3, [r7, #23]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d003      	beq.n	80018bc <HAL_CAN_GetRxMessage+0x24>
 80018b4:	7dfb      	ldrb	r3, [r7, #23]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	f040 8103 	bne.w	8001ac2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10e      	bne.n	80018e0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d116      	bne.n	80018fe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0f7      	b.n	8001ad0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d107      	bne.n	80018fe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e0e8      	b.n	8001ad0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	331b      	adds	r3, #27
 8001906:	011b      	lsls	r3, r3, #4
 8001908:	4413      	add	r3, r2
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0204 	and.w	r2, r3, #4
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10c      	bne.n	8001936 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	331b      	adds	r3, #27
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	4413      	add	r3, r2
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	0d5b      	lsrs	r3, r3, #21
 800192c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	e00b      	b.n	800194e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	331b      	adds	r3, #27
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	4413      	add	r3, r2
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	08db      	lsrs	r3, r3, #3
 8001946:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	331b      	adds	r3, #27
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	4413      	add	r3, r2
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0202 	and.w	r2, r3, #2
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	331b      	adds	r3, #27
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	4413      	add	r3, r2
 8001970:	3304      	adds	r3, #4
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2208      	movs	r2, #8
 8001980:	611a      	str	r2, [r3, #16]
 8001982:	e00b      	b.n	800199c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	331b      	adds	r3, #27
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	4413      	add	r3, r2
 8001990:	3304      	adds	r3, #4
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 020f 	and.w	r2, r3, #15
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	331b      	adds	r3, #27
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	4413      	add	r3, r2
 80019a8:	3304      	adds	r3, #4
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	331b      	adds	r3, #27
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	4413      	add	r3, r2
 80019c0:	3304      	adds	r3, #4
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	0c1b      	lsrs	r3, r3, #16
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	011b      	lsls	r3, r3, #4
 80019d4:	4413      	add	r3, r2
 80019d6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	4413      	add	r3, r2
 80019ec:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	0a1a      	lsrs	r2, r3, #8
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	3301      	adds	r3, #1
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	4413      	add	r3, r2
 8001a06:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0c1a      	lsrs	r2, r3, #16
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	3302      	adds	r3, #2
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	4413      	add	r3, r2
 8001a20:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	0e1a      	lsrs	r2, r3, #24
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	3303      	adds	r3, #3
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	4413      	add	r3, r2
 8001a3a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	3304      	adds	r3, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	4413      	add	r3, r2
 8001a52:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	0a1a      	lsrs	r2, r3, #8
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	3305      	adds	r3, #5
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	0c1a      	lsrs	r2, r3, #16
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	3306      	adds	r3, #6
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	011b      	lsls	r3, r3, #4
 8001a84:	4413      	add	r3, r2
 8001a86:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	0e1a      	lsrs	r2, r3, #24
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	3307      	adds	r3, #7
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d108      	bne.n	8001aae <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0220 	orr.w	r2, r2, #32
 8001aaa:	60da      	str	r2, [r3, #12]
 8001aac:	e007      	b.n	8001abe <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	691a      	ldr	r2, [r3, #16]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f042 0220 	orr.w	r2, r2, #32
 8001abc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e006      	b.n	8001ad0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
  }
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aec:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d002      	beq.n	8001afa <HAL_CAN_ActivateNotification+0x1e>
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d109      	bne.n	8001b0e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6959      	ldr	r1, [r3, #20]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e006      	b.n	8001b1c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b12:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
  }
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	@ 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d07c      	beq.n	8001c68 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d023      	beq.n	8001bc0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f983 	bl	8001e96 <HAL_CAN_TxMailbox0CompleteCallback>
 8001b90:	e016      	b.n	8001bc0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d004      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ba4:	e00c      	b.n	8001bc0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d004      	beq.n	8001bba <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bb8:	e002      	b.n	8001bc0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f989 	bl	8001ed2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d024      	beq.n	8001c14 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bd2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f963 	bl	8001eaa <HAL_CAN_TxMailbox1CompleteCallback>
 8001be4:	e016      	b.n	8001c14 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d004      	beq.n	8001bfa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bf8:	e00c      	b.n	8001c14 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d004      	beq.n	8001c0e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c0c:	e002      	b.n	8001c14 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f969 	bl	8001ee6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d024      	beq.n	8001c68 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c26:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f943 	bl	8001ebe <HAL_CAN_TxMailbox2CompleteCallback>
 8001c38:	e016      	b.n	8001c68 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d004      	beq.n	8001c4e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c4c:	e00c      	b.n	8001c68 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d004      	beq.n	8001c62 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c60:	e002      	b.n	8001c68 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f949 	bl	8001efa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00c      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f003 0310 	and.w	r3, r3, #16
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d007      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2210      	movs	r2, #16
 8001c8a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00b      	beq.n	8001cae <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d006      	beq.n	8001cae <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2208      	movs	r2, #8
 8001ca6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f930 	bl	8001f0e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d009      	beq.n	8001ccc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7fe fc72 	bl	80005b0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00c      	beq.n	8001cf0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	f003 0310 	and.w	r3, r3, #16
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d007      	beq.n	8001cf0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2210      	movs	r2, #16
 8001cee:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00b      	beq.n	8001d12 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d006      	beq.n	8001d12 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2208      	movs	r2, #8
 8001d0a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f912 	bl	8001f36 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d009      	beq.n	8001d30 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f8f9 	bl	8001f22 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d30:	6a3b      	ldr	r3, [r7, #32]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00b      	beq.n	8001d52 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d006      	beq.n	8001d52 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2210      	movs	r2, #16
 8001d4a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f8fc 	bl	8001f4a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00b      	beq.n	8001d74 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d006      	beq.n	8001d74 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2208      	movs	r2, #8
 8001d6c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f8f5 	bl	8001f5e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d07b      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d072      	beq.n	8001e6e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d008      	beq.n	8001da4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d008      	beq.n	8001dc0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dba:	f043 0302 	orr.w	r3, r3, #2
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d008      	beq.n	8001ddc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d043      	beq.n	8001e6e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d03e      	beq.n	8001e6e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001df6:	2b60      	cmp	r3, #96	@ 0x60
 8001df8:	d02b      	beq.n	8001e52 <HAL_CAN_IRQHandler+0x32a>
 8001dfa:	2b60      	cmp	r3, #96	@ 0x60
 8001dfc:	d82e      	bhi.n	8001e5c <HAL_CAN_IRQHandler+0x334>
 8001dfe:	2b50      	cmp	r3, #80	@ 0x50
 8001e00:	d022      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x320>
 8001e02:	2b50      	cmp	r3, #80	@ 0x50
 8001e04:	d82a      	bhi.n	8001e5c <HAL_CAN_IRQHandler+0x334>
 8001e06:	2b40      	cmp	r3, #64	@ 0x40
 8001e08:	d019      	beq.n	8001e3e <HAL_CAN_IRQHandler+0x316>
 8001e0a:	2b40      	cmp	r3, #64	@ 0x40
 8001e0c:	d826      	bhi.n	8001e5c <HAL_CAN_IRQHandler+0x334>
 8001e0e:	2b30      	cmp	r3, #48	@ 0x30
 8001e10:	d010      	beq.n	8001e34 <HAL_CAN_IRQHandler+0x30c>
 8001e12:	2b30      	cmp	r3, #48	@ 0x30
 8001e14:	d822      	bhi.n	8001e5c <HAL_CAN_IRQHandler+0x334>
 8001e16:	2b10      	cmp	r3, #16
 8001e18:	d002      	beq.n	8001e20 <HAL_CAN_IRQHandler+0x2f8>
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	d005      	beq.n	8001e2a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e1e:	e01d      	b.n	8001e5c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e28:	e019      	b.n	8001e5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	f043 0310 	orr.w	r3, r3, #16
 8001e30:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e32:	e014      	b.n	8001e5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e36:	f043 0320 	orr.w	r3, r3, #32
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e3c:	e00f      	b.n	8001e5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e44:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e46:	e00a      	b.n	8001e5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e4e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e50:	e005      	b.n	8001e5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e58:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e5a:	e000      	b.n	8001e5e <HAL_CAN_IRQHandler+0x336>
            break;
 8001e5c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	699a      	ldr	r2, [r3, #24]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001e6c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2204      	movs	r2, #4
 8001e74:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f872 	bl	8001f72 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e8e:	bf00      	nop
 8001e90:	3728      	adds	r7, #40	@ 0x28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f98:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fba:	4a04      	ldr	r2, [pc, #16]	@ (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	60d3      	str	r3, [r2, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd4:	4b04      	ldr	r3, [pc, #16]	@ (8001fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	f003 0307 	and.w	r3, r3, #7
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	db0b      	blt.n	8002016 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	4907      	ldr	r1, [pc, #28]	@ (8002024 <__NVIC_EnableIRQ+0x38>)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	2001      	movs	r0, #1
 800200e:	fa00 f202 	lsl.w	r2, r0, r2
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000e100 	.word	0xe000e100

08002028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	2b00      	cmp	r3, #0
 800203a:	db0a      	blt.n	8002052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	490c      	ldr	r1, [pc, #48]	@ (8002074 <__NVIC_SetPriority+0x4c>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	440b      	add	r3, r1
 800204c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002050:	e00a      	b.n	8002068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4908      	ldr	r1, [pc, #32]	@ (8002078 <__NVIC_SetPriority+0x50>)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	3b04      	subs	r3, #4
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	440b      	add	r3, r1
 8002066:	761a      	strb	r2, [r3, #24]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000e100 	.word	0xe000e100
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	@ 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f1c3 0307 	rsb	r3, r3, #7
 8002096:	2b04      	cmp	r3, #4
 8002098:	bf28      	it	cs
 800209a:	2304      	movcs	r3, #4
 800209c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d902      	bls.n	80020ac <NVIC_EncodePriority+0x30>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3b03      	subs	r3, #3
 80020aa:	e000      	b.n	80020ae <NVIC_EncodePriority+0x32>
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43d9      	mvns	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	4313      	orrs	r3, r2
         );
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	@ 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020f4:	d301      	bcc.n	80020fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00f      	b.n	800211a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002124 <SysTick_Config+0x40>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002102:	210f      	movs	r1, #15
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f7ff ff8e 	bl	8002028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800210c:	4b05      	ldr	r3, [pc, #20]	@ (8002124 <SysTick_Config+0x40>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002112:	4b04      	ldr	r3, [pc, #16]	@ (8002124 <SysTick_Config+0x40>)
 8002114:	2207      	movs	r2, #7
 8002116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	e000e010 	.word	0xe000e010

08002128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ff29 	bl	8001f88 <__NVIC_SetPriorityGrouping>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002150:	f7ff ff3e 	bl	8001fd0 <__NVIC_GetPriorityGrouping>
 8002154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	6978      	ldr	r0, [r7, #20]
 800215c:	f7ff ff8e 	bl	800207c <NVIC_EncodePriority>
 8002160:	4602      	mov	r2, r0
 8002162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff5d 	bl	8002028 <__NVIC_SetPriority>
}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff31 	bl	8001fec <__NVIC_EnableIRQ>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ffa2 	bl	80020e4 <SysTick_Config>
 80021a0:	4603      	mov	r3, r0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	@ 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	e165      	b.n	8002494 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021c8:	2201      	movs	r2, #1
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	f040 8154 	bne.w	800248e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d005      	beq.n	80021fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d130      	bne.n	8002260 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	2203      	movs	r2, #3
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002234:	2201      	movs	r2, #1
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	f003 0201 	and.w	r2, r3, #1
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b03      	cmp	r3, #3
 800226a:	d017      	beq.n	800229c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	2203      	movs	r2, #3
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d123      	bne.n	80022f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	08da      	lsrs	r2, r3, #3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3208      	adds	r2, #8
 80022b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	220f      	movs	r2, #15
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	08da      	lsrs	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3208      	adds	r2, #8
 80022ea:	69b9      	ldr	r1, [r7, #24]
 80022ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2203      	movs	r2, #3
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0203 	and.w	r2, r3, #3
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80ae 	beq.w	800248e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	4b5d      	ldr	r3, [pc, #372]	@ (80024ac <HAL_GPIO_Init+0x300>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233a:	4a5c      	ldr	r2, [pc, #368]	@ (80024ac <HAL_GPIO_Init+0x300>)
 800233c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002340:	6453      	str	r3, [r2, #68]	@ 0x44
 8002342:	4b5a      	ldr	r3, [pc, #360]	@ (80024ac <HAL_GPIO_Init+0x300>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002346:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800234e:	4a58      	ldr	r2, [pc, #352]	@ (80024b0 <HAL_GPIO_Init+0x304>)
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	089b      	lsrs	r3, r3, #2
 8002354:	3302      	adds	r3, #2
 8002356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	220f      	movs	r2, #15
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4f      	ldr	r2, [pc, #316]	@ (80024b4 <HAL_GPIO_Init+0x308>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d025      	beq.n	80023c6 <HAL_GPIO_Init+0x21a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4e      	ldr	r2, [pc, #312]	@ (80024b8 <HAL_GPIO_Init+0x30c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d01f      	beq.n	80023c2 <HAL_GPIO_Init+0x216>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a4d      	ldr	r2, [pc, #308]	@ (80024bc <HAL_GPIO_Init+0x310>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d019      	beq.n	80023be <HAL_GPIO_Init+0x212>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a4c      	ldr	r2, [pc, #304]	@ (80024c0 <HAL_GPIO_Init+0x314>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d013      	beq.n	80023ba <HAL_GPIO_Init+0x20e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a4b      	ldr	r2, [pc, #300]	@ (80024c4 <HAL_GPIO_Init+0x318>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00d      	beq.n	80023b6 <HAL_GPIO_Init+0x20a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a4a      	ldr	r2, [pc, #296]	@ (80024c8 <HAL_GPIO_Init+0x31c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d007      	beq.n	80023b2 <HAL_GPIO_Init+0x206>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a49      	ldr	r2, [pc, #292]	@ (80024cc <HAL_GPIO_Init+0x320>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d101      	bne.n	80023ae <HAL_GPIO_Init+0x202>
 80023aa:	2306      	movs	r3, #6
 80023ac:	e00c      	b.n	80023c8 <HAL_GPIO_Init+0x21c>
 80023ae:	2307      	movs	r3, #7
 80023b0:	e00a      	b.n	80023c8 <HAL_GPIO_Init+0x21c>
 80023b2:	2305      	movs	r3, #5
 80023b4:	e008      	b.n	80023c8 <HAL_GPIO_Init+0x21c>
 80023b6:	2304      	movs	r3, #4
 80023b8:	e006      	b.n	80023c8 <HAL_GPIO_Init+0x21c>
 80023ba:	2303      	movs	r3, #3
 80023bc:	e004      	b.n	80023c8 <HAL_GPIO_Init+0x21c>
 80023be:	2302      	movs	r3, #2
 80023c0:	e002      	b.n	80023c8 <HAL_GPIO_Init+0x21c>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_GPIO_Init+0x21c>
 80023c6:	2300      	movs	r3, #0
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	f002 0203 	and.w	r2, r2, #3
 80023ce:	0092      	lsls	r2, r2, #2
 80023d0:	4093      	lsls	r3, r2
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d8:	4935      	ldr	r1, [pc, #212]	@ (80024b0 <HAL_GPIO_Init+0x304>)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023e6:	4b3a      	ldr	r3, [pc, #232]	@ (80024d0 <HAL_GPIO_Init+0x324>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800240a:	4a31      	ldr	r2, [pc, #196]	@ (80024d0 <HAL_GPIO_Init+0x324>)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002410:	4b2f      	ldr	r3, [pc, #188]	@ (80024d0 <HAL_GPIO_Init+0x324>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002434:	4a26      	ldr	r2, [pc, #152]	@ (80024d0 <HAL_GPIO_Init+0x324>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800243a:	4b25      	ldr	r3, [pc, #148]	@ (80024d0 <HAL_GPIO_Init+0x324>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800245e:	4a1c      	ldr	r2, [pc, #112]	@ (80024d0 <HAL_GPIO_Init+0x324>)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002464:	4b1a      	ldr	r3, [pc, #104]	@ (80024d0 <HAL_GPIO_Init+0x324>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002488:	4a11      	ldr	r2, [pc, #68]	@ (80024d0 <HAL_GPIO_Init+0x324>)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3301      	adds	r3, #1
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	2b0f      	cmp	r3, #15
 8002498:	f67f ae96 	bls.w	80021c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	3724      	adds	r7, #36	@ 0x24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40013800 	.word	0x40013800
 80024b4:	40020000 	.word	0x40020000
 80024b8:	40020400 	.word	0x40020400
 80024bc:	40020800 	.word	0x40020800
 80024c0:	40020c00 	.word	0x40020c00
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40021400 	.word	0x40021400
 80024cc:	40021800 	.word	0x40021800
 80024d0:	40013c00 	.word	0x40013c00

080024d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	807b      	strh	r3, [r7, #2]
 80024e0:	4613      	mov	r3, r2
 80024e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024e4:	787b      	ldrb	r3, [r7, #1]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ea:	887a      	ldrh	r2, [r7, #2]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024f0:	e003      	b.n	80024fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024f2:	887b      	ldrh	r3, [r7, #2]
 80024f4:	041a      	lsls	r2, r3, #16
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	619a      	str	r2, [r3, #24]
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	603b      	str	r3, [r7, #0]
 8002516:	4b20      	ldr	r3, [pc, #128]	@ (8002598 <HAL_PWREx_EnableOverDrive+0x90>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	4a1f      	ldr	r2, [pc, #124]	@ (8002598 <HAL_PWREx_EnableOverDrive+0x90>)
 800251c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002520:	6413      	str	r3, [r2, #64]	@ 0x40
 8002522:	4b1d      	ldr	r3, [pc, #116]	@ (8002598 <HAL_PWREx_EnableOverDrive+0x90>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800252e:	4b1b      	ldr	r3, [pc, #108]	@ (800259c <HAL_PWREx_EnableOverDrive+0x94>)
 8002530:	2201      	movs	r2, #1
 8002532:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002534:	f7fe fe90 	bl	8001258 <HAL_GetTick>
 8002538:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800253a:	e009      	b.n	8002550 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800253c:	f7fe fe8c 	bl	8001258 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800254a:	d901      	bls.n	8002550 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e01f      	b.n	8002590 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002550:	4b13      	ldr	r3, [pc, #76]	@ (80025a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800255c:	d1ee      	bne.n	800253c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800255e:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002560:	2201      	movs	r2, #1
 8002562:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002564:	f7fe fe78 	bl	8001258 <HAL_GetTick>
 8002568:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800256a:	e009      	b.n	8002580 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800256c:	f7fe fe74 	bl	8001258 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800257a:	d901      	bls.n	8002580 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e007      	b.n	8002590 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002580:	4b07      	ldr	r3, [pc, #28]	@ (80025a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002588:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800258c:	d1ee      	bne.n	800256c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40023800 	.word	0x40023800
 800259c:	420e0040 	.word	0x420e0040
 80025a0:	40007000 	.word	0x40007000
 80025a4:	420e0044 	.word	0x420e0044

080025a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0cc      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025bc:	4b68      	ldr	r3, [pc, #416]	@ (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d90c      	bls.n	80025e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b65      	ldr	r3, [pc, #404]	@ (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b63      	ldr	r3, [pc, #396]	@ (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0b8      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d020      	beq.n	8002632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025fc:	4b59      	ldr	r3, [pc, #356]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4a58      	ldr	r2, [pc, #352]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002606:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002614:	4b53      	ldr	r3, [pc, #332]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4a52      	ldr	r2, [pc, #328]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800261e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002620:	4b50      	ldr	r3, [pc, #320]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	494d      	ldr	r1, [pc, #308]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d044      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d107      	bne.n	8002656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	4b47      	ldr	r3, [pc, #284]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d119      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e07f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d003      	beq.n	8002666 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002662:	2b03      	cmp	r3, #3
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002666:	4b3f      	ldr	r3, [pc, #252]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e06f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002676:	4b3b      	ldr	r3, [pc, #236]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e067      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002686:	4b37      	ldr	r3, [pc, #220]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f023 0203 	bic.w	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4934      	ldr	r1, [pc, #208]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	4313      	orrs	r3, r2
 8002696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002698:	f7fe fdde 	bl	8001258 <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a0:	f7fe fdda 	bl	8001258 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e04f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 020c 	and.w	r2, r3, #12
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d1eb      	bne.n	80026a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026c8:	4b25      	ldr	r3, [pc, #148]	@ (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d20c      	bcs.n	80026f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b22      	ldr	r3, [pc, #136]	@ (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026de:	4b20      	ldr	r3, [pc, #128]	@ (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e032      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026fc:	4b19      	ldr	r3, [pc, #100]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4916      	ldr	r1, [pc, #88]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800271a:	4b12      	ldr	r3, [pc, #72]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	490e      	ldr	r1, [pc, #56]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	4313      	orrs	r3, r2
 800272c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800272e:	f000 f855 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 8002732:	4602      	mov	r2, r0
 8002734:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	490a      	ldr	r1, [pc, #40]	@ (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	5ccb      	ldrb	r3, [r1, r3]
 8002742:	fa22 f303 	lsr.w	r3, r2, r3
 8002746:	4a09      	ldr	r2, [pc, #36]	@ (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800274a:	4b09      	ldr	r3, [pc, #36]	@ (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fd3e 	bl	80011d0 <HAL_InitTick>

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023c00 	.word	0x40023c00
 8002764:	40023800 	.word	0x40023800
 8002768:	08004a38 	.word	0x08004a38
 800276c:	20000010 	.word	0x20000010
 8002770:	20000014 	.word	0x20000014

08002774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002778:	4b03      	ldr	r3, [pc, #12]	@ (8002788 <HAL_RCC_GetHCLKFreq+0x14>)
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000010 	.word	0x20000010

0800278c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002790:	f7ff fff0 	bl	8002774 <HAL_RCC_GetHCLKFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	0a9b      	lsrs	r3, r3, #10
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	4903      	ldr	r1, [pc, #12]	@ (80027b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a2:	5ccb      	ldrb	r3, [r1, r3]
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40023800 	.word	0x40023800
 80027b0:	08004a48 	.word	0x08004a48

080027b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027b8:	f7ff ffdc 	bl	8002774 <HAL_RCC_GetHCLKFreq>
 80027bc:	4602      	mov	r2, r0
 80027be:	4b05      	ldr	r3, [pc, #20]	@ (80027d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	0b5b      	lsrs	r3, r3, #13
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	4903      	ldr	r1, [pc, #12]	@ (80027d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ca:	5ccb      	ldrb	r3, [r1, r3]
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40023800 	.word	0x40023800
 80027d8:	08004a48 	.word	0x08004a48

080027dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027e0:	b0ae      	sub	sp, #184	@ 0xb8
 80027e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002802:	4bcb      	ldr	r3, [pc, #812]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b0c      	cmp	r3, #12
 800280c:	f200 8206 	bhi.w	8002c1c <HAL_RCC_GetSysClockFreq+0x440>
 8002810:	a201      	add	r2, pc, #4	@ (adr r2, 8002818 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002816:	bf00      	nop
 8002818:	0800284d 	.word	0x0800284d
 800281c:	08002c1d 	.word	0x08002c1d
 8002820:	08002c1d 	.word	0x08002c1d
 8002824:	08002c1d 	.word	0x08002c1d
 8002828:	08002855 	.word	0x08002855
 800282c:	08002c1d 	.word	0x08002c1d
 8002830:	08002c1d 	.word	0x08002c1d
 8002834:	08002c1d 	.word	0x08002c1d
 8002838:	0800285d 	.word	0x0800285d
 800283c:	08002c1d 	.word	0x08002c1d
 8002840:	08002c1d 	.word	0x08002c1d
 8002844:	08002c1d 	.word	0x08002c1d
 8002848:	08002a4d 	.word	0x08002a4d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800284c:	4bb9      	ldr	r3, [pc, #740]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x358>)
 800284e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002852:	e1e7      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002854:	4bb8      	ldr	r3, [pc, #736]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002856:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800285a:	e1e3      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800285c:	4bb4      	ldr	r3, [pc, #720]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002864:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002868:	4bb1      	ldr	r3, [pc, #708]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d071      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002874:	4bae      	ldr	r3, [pc, #696]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	099b      	lsrs	r3, r3, #6
 800287a:	2200      	movs	r2, #0
 800287c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002880:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002884:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800288c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002890:	2300      	movs	r3, #0
 8002892:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002896:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800289a:	4622      	mov	r2, r4
 800289c:	462b      	mov	r3, r5
 800289e:	f04f 0000 	mov.w	r0, #0
 80028a2:	f04f 0100 	mov.w	r1, #0
 80028a6:	0159      	lsls	r1, r3, #5
 80028a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ac:	0150      	lsls	r0, r2, #5
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4621      	mov	r1, r4
 80028b4:	1a51      	subs	r1, r2, r1
 80028b6:	6439      	str	r1, [r7, #64]	@ 0x40
 80028b8:	4629      	mov	r1, r5
 80028ba:	eb63 0301 	sbc.w	r3, r3, r1
 80028be:	647b      	str	r3, [r7, #68]	@ 0x44
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80028cc:	4649      	mov	r1, r9
 80028ce:	018b      	lsls	r3, r1, #6
 80028d0:	4641      	mov	r1, r8
 80028d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028d6:	4641      	mov	r1, r8
 80028d8:	018a      	lsls	r2, r1, #6
 80028da:	4641      	mov	r1, r8
 80028dc:	1a51      	subs	r1, r2, r1
 80028de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028e0:	4649      	mov	r1, r9
 80028e2:	eb63 0301 	sbc.w	r3, r3, r1
 80028e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80028f4:	4649      	mov	r1, r9
 80028f6:	00cb      	lsls	r3, r1, #3
 80028f8:	4641      	mov	r1, r8
 80028fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028fe:	4641      	mov	r1, r8
 8002900:	00ca      	lsls	r2, r1, #3
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	4603      	mov	r3, r0
 8002908:	4622      	mov	r2, r4
 800290a:	189b      	adds	r3, r3, r2
 800290c:	633b      	str	r3, [r7, #48]	@ 0x30
 800290e:	462b      	mov	r3, r5
 8002910:	460a      	mov	r2, r1
 8002912:	eb42 0303 	adc.w	r3, r2, r3
 8002916:	637b      	str	r3, [r7, #52]	@ 0x34
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002924:	4629      	mov	r1, r5
 8002926:	024b      	lsls	r3, r1, #9
 8002928:	4621      	mov	r1, r4
 800292a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800292e:	4621      	mov	r1, r4
 8002930:	024a      	lsls	r2, r1, #9
 8002932:	4610      	mov	r0, r2
 8002934:	4619      	mov	r1, r3
 8002936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800293a:	2200      	movs	r2, #0
 800293c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002940:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002944:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002948:	f7fd fcba 	bl	80002c0 <__aeabi_uldivmod>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4613      	mov	r3, r2
 8002952:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002956:	e067      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002958:	4b75      	ldr	r3, [pc, #468]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	099b      	lsrs	r3, r3, #6
 800295e:	2200      	movs	r2, #0
 8002960:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002964:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002968:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800296c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002970:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002972:	2300      	movs	r3, #0
 8002974:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002976:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800297a:	4622      	mov	r2, r4
 800297c:	462b      	mov	r3, r5
 800297e:	f04f 0000 	mov.w	r0, #0
 8002982:	f04f 0100 	mov.w	r1, #0
 8002986:	0159      	lsls	r1, r3, #5
 8002988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800298c:	0150      	lsls	r0, r2, #5
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4621      	mov	r1, r4
 8002994:	1a51      	subs	r1, r2, r1
 8002996:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002998:	4629      	mov	r1, r5
 800299a:	eb63 0301 	sbc.w	r3, r3, r1
 800299e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80029ac:	4649      	mov	r1, r9
 80029ae:	018b      	lsls	r3, r1, #6
 80029b0:	4641      	mov	r1, r8
 80029b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029b6:	4641      	mov	r1, r8
 80029b8:	018a      	lsls	r2, r1, #6
 80029ba:	4641      	mov	r1, r8
 80029bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80029c0:	4649      	mov	r1, r9
 80029c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029da:	4692      	mov	sl, r2
 80029dc:	469b      	mov	fp, r3
 80029de:	4623      	mov	r3, r4
 80029e0:	eb1a 0303 	adds.w	r3, sl, r3
 80029e4:	623b      	str	r3, [r7, #32]
 80029e6:	462b      	mov	r3, r5
 80029e8:	eb4b 0303 	adc.w	r3, fp, r3
 80029ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80029fa:	4629      	mov	r1, r5
 80029fc:	028b      	lsls	r3, r1, #10
 80029fe:	4621      	mov	r1, r4
 8002a00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a04:	4621      	mov	r1, r4
 8002a06:	028a      	lsls	r2, r1, #10
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a10:	2200      	movs	r2, #0
 8002a12:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a14:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a16:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002a1a:	f7fd fc51 	bl	80002c0 <__aeabi_uldivmod>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4613      	mov	r3, r2
 8002a24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a28:	4b41      	ldr	r3, [pc, #260]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	0c1b      	lsrs	r3, r3, #16
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	3301      	adds	r3, #1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002a3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a4a:	e0eb      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a4c:	4b38      	ldr	r3, [pc, #224]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a58:	4b35      	ldr	r3, [pc, #212]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d06b      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a64:	4b32      	ldr	r3, [pc, #200]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	099b      	lsrs	r3, r3, #6
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a76:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a78:	2300      	movs	r3, #0
 8002a7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a7c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002a80:	4622      	mov	r2, r4
 8002a82:	462b      	mov	r3, r5
 8002a84:	f04f 0000 	mov.w	r0, #0
 8002a88:	f04f 0100 	mov.w	r1, #0
 8002a8c:	0159      	lsls	r1, r3, #5
 8002a8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a92:	0150      	lsls	r0, r2, #5
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4621      	mov	r1, r4
 8002a9a:	1a51      	subs	r1, r2, r1
 8002a9c:	61b9      	str	r1, [r7, #24]
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	eb63 0301 	sbc.w	r3, r3, r1
 8002aa4:	61fb      	str	r3, [r7, #28]
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ab2:	4659      	mov	r1, fp
 8002ab4:	018b      	lsls	r3, r1, #6
 8002ab6:	4651      	mov	r1, sl
 8002ab8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002abc:	4651      	mov	r1, sl
 8002abe:	018a      	lsls	r2, r1, #6
 8002ac0:	4651      	mov	r1, sl
 8002ac2:	ebb2 0801 	subs.w	r8, r2, r1
 8002ac6:	4659      	mov	r1, fp
 8002ac8:	eb63 0901 	sbc.w	r9, r3, r1
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ad8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002adc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ae0:	4690      	mov	r8, r2
 8002ae2:	4699      	mov	r9, r3
 8002ae4:	4623      	mov	r3, r4
 8002ae6:	eb18 0303 	adds.w	r3, r8, r3
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	462b      	mov	r3, r5
 8002aee:	eb49 0303 	adc.w	r3, r9, r3
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002b00:	4629      	mov	r1, r5
 8002b02:	024b      	lsls	r3, r1, #9
 8002b04:	4621      	mov	r1, r4
 8002b06:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	024a      	lsls	r2, r1, #9
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b16:	2200      	movs	r2, #0
 8002b18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b1a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b20:	f7fd fbce 	bl	80002c0 <__aeabi_uldivmod>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4613      	mov	r3, r2
 8002b2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b2e:	e065      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0x420>
 8002b30:	40023800 	.word	0x40023800
 8002b34:	00f42400 	.word	0x00f42400
 8002b38:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c34 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	2200      	movs	r2, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	4611      	mov	r1, r2
 8002b48:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b4e:	2300      	movs	r3, #0
 8002b50:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b52:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002b56:	4642      	mov	r2, r8
 8002b58:	464b      	mov	r3, r9
 8002b5a:	f04f 0000 	mov.w	r0, #0
 8002b5e:	f04f 0100 	mov.w	r1, #0
 8002b62:	0159      	lsls	r1, r3, #5
 8002b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b68:	0150      	lsls	r0, r2, #5
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4641      	mov	r1, r8
 8002b70:	1a51      	subs	r1, r2, r1
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	4649      	mov	r1, r9
 8002b76:	eb63 0301 	sbc.w	r3, r3, r1
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b88:	4659      	mov	r1, fp
 8002b8a:	018b      	lsls	r3, r1, #6
 8002b8c:	4651      	mov	r1, sl
 8002b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b92:	4651      	mov	r1, sl
 8002b94:	018a      	lsls	r2, r1, #6
 8002b96:	4651      	mov	r1, sl
 8002b98:	1a54      	subs	r4, r2, r1
 8002b9a:	4659      	mov	r1, fp
 8002b9c:	eb63 0501 	sbc.w	r5, r3, r1
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	00eb      	lsls	r3, r5, #3
 8002baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bae:	00e2      	lsls	r2, r4, #3
 8002bb0:	4614      	mov	r4, r2
 8002bb2:	461d      	mov	r5, r3
 8002bb4:	4643      	mov	r3, r8
 8002bb6:	18e3      	adds	r3, r4, r3
 8002bb8:	603b      	str	r3, [r7, #0]
 8002bba:	464b      	mov	r3, r9
 8002bbc:	eb45 0303 	adc.w	r3, r5, r3
 8002bc0:	607b      	str	r3, [r7, #4]
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bce:	4629      	mov	r1, r5
 8002bd0:	028b      	lsls	r3, r1, #10
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bd8:	4621      	mov	r1, r4
 8002bda:	028a      	lsls	r2, r1, #10
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4619      	mov	r1, r3
 8002be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002be4:	2200      	movs	r2, #0
 8002be6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002be8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002bea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002bee:	f7fd fb67 	bl	80002c0 <__aeabi_uldivmod>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8002c34 <HAL_RCC_GetSysClockFreq+0x458>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	0f1b      	lsrs	r3, r3, #28
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002c0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c1a:	e003      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c1c:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	37b8      	adds	r7, #184	@ 0xb8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800
 8002c38:	00f42400 	.word	0x00f42400

08002c3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e28d      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 8083 	beq.w	8002d62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c5c:	4b94      	ldr	r3, [pc, #592]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 030c 	and.w	r3, r3, #12
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d019      	beq.n	8002c9c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c68:	4b91      	ldr	r3, [pc, #580]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d106      	bne.n	8002c82 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c74:	4b8e      	ldr	r3, [pc, #568]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c80:	d00c      	beq.n	8002c9c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c82:	4b8b      	ldr	r3, [pc, #556]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	d112      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c8e:	4b88      	ldr	r3, [pc, #544]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c9a:	d10b      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9c:	4b84      	ldr	r3, [pc, #528]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d05b      	beq.n	8002d60 <HAL_RCC_OscConfig+0x124>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d157      	bne.n	8002d60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e25a      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cbc:	d106      	bne.n	8002ccc <HAL_RCC_OscConfig+0x90>
 8002cbe:	4b7c      	ldr	r3, [pc, #496]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a7b      	ldr	r2, [pc, #492]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	e01d      	b.n	8002d08 <HAL_RCC_OscConfig+0xcc>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0xb4>
 8002cd6:	4b76      	ldr	r3, [pc, #472]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a75      	ldr	r2, [pc, #468]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002cdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	4b73      	ldr	r3, [pc, #460]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a72      	ldr	r2, [pc, #456]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	e00b      	b.n	8002d08 <HAL_RCC_OscConfig+0xcc>
 8002cf0:	4b6f      	ldr	r3, [pc, #444]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a6e      	ldr	r2, [pc, #440]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002cf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b6c      	ldr	r3, [pc, #432]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a6b      	ldr	r2, [pc, #428]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002d02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d013      	beq.n	8002d38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7fe faa2 	bl	8001258 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d18:	f7fe fa9e 	bl	8001258 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	@ 0x64
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e21f      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	4b61      	ldr	r3, [pc, #388]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0xdc>
 8002d36:	e014      	b.n	8002d62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fe fa8e 	bl	8001258 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d40:	f7fe fa8a 	bl	8001258 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	@ 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e20b      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d52:	4b57      	ldr	r3, [pc, #348]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x104>
 8002d5e:	e000      	b.n	8002d62 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d06f      	beq.n	8002e4e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d6e:	4b50      	ldr	r3, [pc, #320]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d017      	beq.n	8002daa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d7a:	4b4d      	ldr	r3, [pc, #308]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d105      	bne.n	8002d92 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d86:	4b4a      	ldr	r3, [pc, #296]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00b      	beq.n	8002daa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d92:	4b47      	ldr	r3, [pc, #284]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d9a:	2b0c      	cmp	r3, #12
 8002d9c:	d11c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d9e:	4b44      	ldr	r3, [pc, #272]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d116      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002daa:	4b41      	ldr	r3, [pc, #260]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x186>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d001      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e1d3      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc2:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4937      	ldr	r1, [pc, #220]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd6:	e03a      	b.n	8002e4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d020      	beq.n	8002e22 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de0:	4b34      	ldr	r3, [pc, #208]	@ (8002eb4 <HAL_RCC_OscConfig+0x278>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de6:	f7fe fa37 	bl	8001258 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dee:	f7fe fa33 	bl	8001258 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e1b4      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e00:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0c:	4b28      	ldr	r3, [pc, #160]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4925      	ldr	r1, [pc, #148]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]
 8002e20:	e015      	b.n	8002e4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e22:	4b24      	ldr	r3, [pc, #144]	@ (8002eb4 <HAL_RCC_OscConfig+0x278>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe fa16 	bl	8001258 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e30:	f7fe fa12 	bl	8001258 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e193      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e42:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d036      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d016      	beq.n	8002e90 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e62:	4b15      	ldr	r3, [pc, #84]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e68:	f7fe f9f6 	bl	8001258 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e70:	f7fe f9f2 	bl	8001258 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e173      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e82:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x234>
 8002e8e:	e01b      	b.n	8002ec8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e90:	4b09      	ldr	r3, [pc, #36]	@ (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e96:	f7fe f9df 	bl	8001258 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e9c:	e00e      	b.n	8002ebc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e9e:	f7fe f9db 	bl	8001258 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d907      	bls.n	8002ebc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e15c      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	42470000 	.word	0x42470000
 8002eb8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ebc:	4b8a      	ldr	r3, [pc, #552]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002ebe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1ea      	bne.n	8002e9e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8097 	beq.w	8003004 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eda:	4b83      	ldr	r3, [pc, #524]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10f      	bne.n	8002f06 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	4b7f      	ldr	r3, [pc, #508]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	4a7e      	ldr	r2, [pc, #504]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002ef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ef4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ef6:	4b7c      	ldr	r3, [pc, #496]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f02:	2301      	movs	r3, #1
 8002f04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f06:	4b79      	ldr	r3, [pc, #484]	@ (80030ec <HAL_RCC_OscConfig+0x4b0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d118      	bne.n	8002f44 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f12:	4b76      	ldr	r3, [pc, #472]	@ (80030ec <HAL_RCC_OscConfig+0x4b0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a75      	ldr	r2, [pc, #468]	@ (80030ec <HAL_RCC_OscConfig+0x4b0>)
 8002f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f1e:	f7fe f99b 	bl	8001258 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f26:	f7fe f997 	bl	8001258 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e118      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f38:	4b6c      	ldr	r3, [pc, #432]	@ (80030ec <HAL_RCC_OscConfig+0x4b0>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d106      	bne.n	8002f5a <HAL_RCC_OscConfig+0x31e>
 8002f4c:	4b66      	ldr	r3, [pc, #408]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f50:	4a65      	ldr	r2, [pc, #404]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f58:	e01c      	b.n	8002f94 <HAL_RCC_OscConfig+0x358>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b05      	cmp	r3, #5
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x340>
 8002f62:	4b61      	ldr	r3, [pc, #388]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f66:	4a60      	ldr	r2, [pc, #384]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f68:	f043 0304 	orr.w	r3, r3, #4
 8002f6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f6e:	4b5e      	ldr	r3, [pc, #376]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f72:	4a5d      	ldr	r2, [pc, #372]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f7a:	e00b      	b.n	8002f94 <HAL_RCC_OscConfig+0x358>
 8002f7c:	4b5a      	ldr	r3, [pc, #360]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f80:	4a59      	ldr	r2, [pc, #356]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f82:	f023 0301 	bic.w	r3, r3, #1
 8002f86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f88:	4b57      	ldr	r3, [pc, #348]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8c:	4a56      	ldr	r2, [pc, #344]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f8e:	f023 0304 	bic.w	r3, r3, #4
 8002f92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d015      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9c:	f7fe f95c 	bl	8001258 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa2:	e00a      	b.n	8002fba <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa4:	f7fe f958 	bl	8001258 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e0d7      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fba:	4b4b      	ldr	r3, [pc, #300]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0ee      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x368>
 8002fc6:	e014      	b.n	8002ff2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7fe f946 	bl	8001258 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd0:	f7fe f942 	bl	8001258 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e0c1      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe6:	4b40      	ldr	r3, [pc, #256]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1ee      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d105      	bne.n	8003004 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff8:	4b3b      	ldr	r3, [pc, #236]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	4a3a      	ldr	r2, [pc, #232]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002ffe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003002:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 80ad 	beq.w	8003168 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800300e:	4b36      	ldr	r3, [pc, #216]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b08      	cmp	r3, #8
 8003018:	d060      	beq.n	80030dc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d145      	bne.n	80030ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003022:	4b33      	ldr	r3, [pc, #204]	@ (80030f0 <HAL_RCC_OscConfig+0x4b4>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fe f916 	bl	8001258 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003030:	f7fe f912 	bl	8001258 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e093      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003042:	4b29      	ldr	r3, [pc, #164]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69da      	ldr	r2, [r3, #28]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305c:	019b      	lsls	r3, r3, #6
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003064:	085b      	lsrs	r3, r3, #1
 8003066:	3b01      	subs	r3, #1
 8003068:	041b      	lsls	r3, r3, #16
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003070:	061b      	lsls	r3, r3, #24
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003078:	071b      	lsls	r3, r3, #28
 800307a:	491b      	ldr	r1, [pc, #108]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 800307c:	4313      	orrs	r3, r2
 800307e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003080:	4b1b      	ldr	r3, [pc, #108]	@ (80030f0 <HAL_RCC_OscConfig+0x4b4>)
 8003082:	2201      	movs	r2, #1
 8003084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003086:	f7fe f8e7 	bl	8001258 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308e:	f7fe f8e3 	bl	8001258 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e064      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a0:	4b11      	ldr	r3, [pc, #68]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0f0      	beq.n	800308e <HAL_RCC_OscConfig+0x452>
 80030ac:	e05c      	b.n	8003168 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ae:	4b10      	ldr	r3, [pc, #64]	@ (80030f0 <HAL_RCC_OscConfig+0x4b4>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fe f8d0 	bl	8001258 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030bc:	f7fe f8cc 	bl	8001258 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e04d      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	4b06      	ldr	r3, [pc, #24]	@ (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x480>
 80030da:	e045      	b.n	8003168 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d107      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e040      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40007000 	.word	0x40007000
 80030f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003174 <HAL_RCC_OscConfig+0x538>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d030      	beq.n	8003164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800310c:	429a      	cmp	r2, r3
 800310e:	d129      	bne.n	8003164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311a:	429a      	cmp	r2, r3
 800311c:	d122      	bne.n	8003164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003124:	4013      	ands	r3, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800312a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800312c:	4293      	cmp	r3, r2
 800312e:	d119      	bne.n	8003164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800313a:	085b      	lsrs	r3, r3, #1
 800313c:	3b01      	subs	r3, #1
 800313e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003140:	429a      	cmp	r2, r3
 8003142:	d10f      	bne.n	8003164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003150:	429a      	cmp	r2, r3
 8003152:	d107      	bne.n	8003164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800

08003178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e041      	b.n	800320e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd fe90 	bl	8000ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3304      	adds	r3, #4
 80031b4:	4619      	mov	r1, r3
 80031b6:	4610      	mov	r0, r2
 80031b8:	f000 fa46 	bl	8003648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	d001      	beq.n	8003230 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e046      	b.n	80032be <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a23      	ldr	r2, [pc, #140]	@ (80032cc <HAL_TIM_Base_Start+0xb4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d022      	beq.n	8003288 <HAL_TIM_Base_Start+0x70>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800324a:	d01d      	beq.n	8003288 <HAL_TIM_Base_Start+0x70>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a1f      	ldr	r2, [pc, #124]	@ (80032d0 <HAL_TIM_Base_Start+0xb8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d018      	beq.n	8003288 <HAL_TIM_Base_Start+0x70>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a1e      	ldr	r2, [pc, #120]	@ (80032d4 <HAL_TIM_Base_Start+0xbc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d013      	beq.n	8003288 <HAL_TIM_Base_Start+0x70>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a1c      	ldr	r2, [pc, #112]	@ (80032d8 <HAL_TIM_Base_Start+0xc0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00e      	beq.n	8003288 <HAL_TIM_Base_Start+0x70>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a1b      	ldr	r2, [pc, #108]	@ (80032dc <HAL_TIM_Base_Start+0xc4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d009      	beq.n	8003288 <HAL_TIM_Base_Start+0x70>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a19      	ldr	r2, [pc, #100]	@ (80032e0 <HAL_TIM_Base_Start+0xc8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d004      	beq.n	8003288 <HAL_TIM_Base_Start+0x70>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a18      	ldr	r2, [pc, #96]	@ (80032e4 <HAL_TIM_Base_Start+0xcc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d111      	bne.n	80032ac <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b06      	cmp	r3, #6
 8003298:	d010      	beq.n	80032bc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0201 	orr.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032aa:	e007      	b.n	80032bc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40010000 	.word	0x40010000
 80032d0:	40000400 	.word	0x40000400
 80032d4:	40000800 	.word	0x40000800
 80032d8:	40000c00 	.word	0x40000c00
 80032dc:	40010400 	.word	0x40010400
 80032e0:	40014000 	.word	0x40014000
 80032e4:	40001800 	.word	0x40001800

080032e8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6a1a      	ldr	r2, [r3, #32]
 80032f6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10f      	bne.n	8003320 <HAL_TIM_Base_Stop+0x38>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6a1a      	ldr	r2, [r3, #32]
 8003306:	f240 4344 	movw	r3, #1092	@ 0x444
 800330a:	4013      	ands	r3, r2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d107      	bne.n	8003320 <HAL_TIM_Base_Stop+0x38>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0201 	bic.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b01      	cmp	r3, #1
 800334a:	d001      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e04e      	b.n	80033ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0201 	orr.w	r2, r2, #1
 8003366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a23      	ldr	r2, [pc, #140]	@ (80033fc <HAL_TIM_Base_Start_IT+0xc4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d022      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x80>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800337a:	d01d      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x80>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a1f      	ldr	r2, [pc, #124]	@ (8003400 <HAL_TIM_Base_Start_IT+0xc8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d018      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x80>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1e      	ldr	r2, [pc, #120]	@ (8003404 <HAL_TIM_Base_Start_IT+0xcc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d013      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x80>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a1c      	ldr	r2, [pc, #112]	@ (8003408 <HAL_TIM_Base_Start_IT+0xd0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00e      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x80>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a1b      	ldr	r2, [pc, #108]	@ (800340c <HAL_TIM_Base_Start_IT+0xd4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d009      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x80>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a19      	ldr	r2, [pc, #100]	@ (8003410 <HAL_TIM_Base_Start_IT+0xd8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d004      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x80>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a18      	ldr	r2, [pc, #96]	@ (8003414 <HAL_TIM_Base_Start_IT+0xdc>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d111      	bne.n	80033dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	d010      	beq.n	80033ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0201 	orr.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033da:	e007      	b.n	80033ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40010000 	.word	0x40010000
 8003400:	40000400 	.word	0x40000400
 8003404:	40000800 	.word	0x40000800
 8003408:	40000c00 	.word	0x40000c00
 800340c:	40010400 	.word	0x40010400
 8003410:	40014000 	.word	0x40014000
 8003414:	40001800 	.word	0x40001800

08003418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d020      	beq.n	800347c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01b      	beq.n	800347c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0202 	mvn.w	r2, #2
 800344c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f8d2 	bl	800360c <HAL_TIM_IC_CaptureCallback>
 8003468:	e005      	b.n	8003476 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f8c4 	bl	80035f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f8d5 	bl	8003620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d020      	beq.n	80034c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d01b      	beq.n	80034c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0204 	mvn.w	r2, #4
 8003498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2202      	movs	r2, #2
 800349e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f8ac 	bl	800360c <HAL_TIM_IC_CaptureCallback>
 80034b4:	e005      	b.n	80034c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f89e 	bl	80035f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f8af 	bl	8003620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d020      	beq.n	8003514 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01b      	beq.n	8003514 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0208 	mvn.w	r2, #8
 80034e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2204      	movs	r2, #4
 80034ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f886 	bl	800360c <HAL_TIM_IC_CaptureCallback>
 8003500:	e005      	b.n	800350e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f878 	bl	80035f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f889 	bl	8003620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b00      	cmp	r3, #0
 800351c:	d020      	beq.n	8003560 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01b      	beq.n	8003560 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0210 	mvn.w	r2, #16
 8003530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2208      	movs	r2, #8
 8003536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f860 	bl	800360c <HAL_TIM_IC_CaptureCallback>
 800354c:	e005      	b.n	800355a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f852 	bl	80035f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f863 	bl	8003620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00c      	beq.n	8003584 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d007      	beq.n	8003584 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0201 	mvn.w	r2, #1
 800357c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fd fbd6 	bl	8000d30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00c      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80035a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f982 	bl	80038ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00c      	beq.n	80035cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f834 	bl	8003634 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00c      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f003 0320 	and.w	r3, r3, #32
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0220 	mvn.w	r2, #32
 80035e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f954 	bl	8003898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035f0:	bf00      	nop
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a46      	ldr	r2, [pc, #280]	@ (8003774 <TIM_Base_SetConfig+0x12c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d013      	beq.n	8003688 <TIM_Base_SetConfig+0x40>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003666:	d00f      	beq.n	8003688 <TIM_Base_SetConfig+0x40>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a43      	ldr	r2, [pc, #268]	@ (8003778 <TIM_Base_SetConfig+0x130>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d00b      	beq.n	8003688 <TIM_Base_SetConfig+0x40>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a42      	ldr	r2, [pc, #264]	@ (800377c <TIM_Base_SetConfig+0x134>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d007      	beq.n	8003688 <TIM_Base_SetConfig+0x40>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a41      	ldr	r2, [pc, #260]	@ (8003780 <TIM_Base_SetConfig+0x138>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d003      	beq.n	8003688 <TIM_Base_SetConfig+0x40>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a40      	ldr	r2, [pc, #256]	@ (8003784 <TIM_Base_SetConfig+0x13c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d108      	bne.n	800369a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800368e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a35      	ldr	r2, [pc, #212]	@ (8003774 <TIM_Base_SetConfig+0x12c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d02b      	beq.n	80036fa <TIM_Base_SetConfig+0xb2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036a8:	d027      	beq.n	80036fa <TIM_Base_SetConfig+0xb2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a32      	ldr	r2, [pc, #200]	@ (8003778 <TIM_Base_SetConfig+0x130>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d023      	beq.n	80036fa <TIM_Base_SetConfig+0xb2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a31      	ldr	r2, [pc, #196]	@ (800377c <TIM_Base_SetConfig+0x134>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d01f      	beq.n	80036fa <TIM_Base_SetConfig+0xb2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a30      	ldr	r2, [pc, #192]	@ (8003780 <TIM_Base_SetConfig+0x138>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d01b      	beq.n	80036fa <TIM_Base_SetConfig+0xb2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a2f      	ldr	r2, [pc, #188]	@ (8003784 <TIM_Base_SetConfig+0x13c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d017      	beq.n	80036fa <TIM_Base_SetConfig+0xb2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a2e      	ldr	r2, [pc, #184]	@ (8003788 <TIM_Base_SetConfig+0x140>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d013      	beq.n	80036fa <TIM_Base_SetConfig+0xb2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a2d      	ldr	r2, [pc, #180]	@ (800378c <TIM_Base_SetConfig+0x144>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00f      	beq.n	80036fa <TIM_Base_SetConfig+0xb2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003790 <TIM_Base_SetConfig+0x148>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00b      	beq.n	80036fa <TIM_Base_SetConfig+0xb2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003794 <TIM_Base_SetConfig+0x14c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d007      	beq.n	80036fa <TIM_Base_SetConfig+0xb2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a2a      	ldr	r2, [pc, #168]	@ (8003798 <TIM_Base_SetConfig+0x150>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d003      	beq.n	80036fa <TIM_Base_SetConfig+0xb2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a29      	ldr	r2, [pc, #164]	@ (800379c <TIM_Base_SetConfig+0x154>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d108      	bne.n	800370c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4313      	orrs	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a10      	ldr	r2, [pc, #64]	@ (8003774 <TIM_Base_SetConfig+0x12c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d003      	beq.n	8003740 <TIM_Base_SetConfig+0xf8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a12      	ldr	r2, [pc, #72]	@ (8003784 <TIM_Base_SetConfig+0x13c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d103      	bne.n	8003748 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b01      	cmp	r3, #1
 8003758:	d105      	bne.n	8003766 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f023 0201 	bic.w	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	611a      	str	r2, [r3, #16]
  }
}
 8003766:	bf00      	nop
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40010000 	.word	0x40010000
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800
 8003780:	40000c00 	.word	0x40000c00
 8003784:	40010400 	.word	0x40010400
 8003788:	40014000 	.word	0x40014000
 800378c:	40014400 	.word	0x40014400
 8003790:	40014800 	.word	0x40014800
 8003794:	40001800 	.word	0x40001800
 8003798:	40001c00 	.word	0x40001c00
 800379c:	40002000 	.word	0x40002000

080037a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e05a      	b.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a21      	ldr	r2, [pc, #132]	@ (800387c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d022      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003804:	d01d      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1d      	ldr	r2, [pc, #116]	@ (8003880 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d018      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1b      	ldr	r2, [pc, #108]	@ (8003884 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d013      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1a      	ldr	r2, [pc, #104]	@ (8003888 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00e      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a18      	ldr	r2, [pc, #96]	@ (800388c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d009      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a17      	ldr	r2, [pc, #92]	@ (8003890 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d004      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a15      	ldr	r2, [pc, #84]	@ (8003894 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d10c      	bne.n	800385c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	4313      	orrs	r3, r2
 8003852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40010000 	.word	0x40010000
 8003880:	40000400 	.word	0x40000400
 8003884:	40000800 	.word	0x40000800
 8003888:	40000c00 	.word	0x40000c00
 800388c:	40010400 	.word	0x40010400
 8003890:	40014000 	.word	0x40014000
 8003894:	40001800 	.word	0x40001800

08003898 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e042      	b.n	8003958 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fd fb48 	bl	8000f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2224      	movs	r2, #36	@ 0x24
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f973 	bl	8003bf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	691a      	ldr	r2, [r3, #16]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695a      	ldr	r2, [r3, #20]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08a      	sub	sp, #40	@ 0x28
 8003964:	af02      	add	r7, sp, #8
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	4613      	mov	r3, r2
 800396e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b20      	cmp	r3, #32
 800397e:	d175      	bne.n	8003a6c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_UART_Transmit+0x2c>
 8003986:	88fb      	ldrh	r3, [r7, #6]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e06e      	b.n	8003a6e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2221      	movs	r2, #33	@ 0x21
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800399e:	f7fd fc5b 	bl	8001258 <HAL_GetTick>
 80039a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	88fa      	ldrh	r2, [r7, #6]
 80039a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	88fa      	ldrh	r2, [r7, #6]
 80039ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039b8:	d108      	bne.n	80039cc <HAL_UART_Transmit+0x6c>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d104      	bne.n	80039cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	61bb      	str	r3, [r7, #24]
 80039ca:	e003      	b.n	80039d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039d4:	e02e      	b.n	8003a34 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2200      	movs	r2, #0
 80039de:	2180      	movs	r1, #128	@ 0x80
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f848 	bl	8003a76 <UART_WaitOnFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e03a      	b.n	8003a6e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10b      	bne.n	8003a16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	3302      	adds	r3, #2
 8003a12:	61bb      	str	r3, [r7, #24]
 8003a14:	e007      	b.n	8003a26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	781a      	ldrb	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	3301      	adds	r3, #1
 8003a24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1cb      	bne.n	80039d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2200      	movs	r2, #0
 8003a46:	2140      	movs	r1, #64	@ 0x40
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f814 	bl	8003a76 <UART_WaitOnFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e006      	b.n	8003a6e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	e000      	b.n	8003a6e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a6c:	2302      	movs	r3, #2
  }
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3720      	adds	r7, #32
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b086      	sub	sp, #24
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	603b      	str	r3, [r7, #0]
 8003a82:	4613      	mov	r3, r2
 8003a84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a86:	e03b      	b.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8e:	d037      	beq.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a90:	f7fd fbe2 	bl	8001258 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	6a3a      	ldr	r2, [r7, #32]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d302      	bcc.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e03a      	b.n	8003b20 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d023      	beq.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b80      	cmp	r3, #128	@ 0x80
 8003abc:	d020      	beq.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b40      	cmp	r3, #64	@ 0x40
 8003ac2:	d01d      	beq.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d116      	bne.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f81d 	bl	8003b28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2208      	movs	r2, #8
 8003af2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e00f      	b.n	8003b20 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	79fb      	ldrb	r3, [r7, #7]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d0b4      	beq.n	8003a88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b095      	sub	sp, #84	@ 0x54
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	330c      	adds	r3, #12
 8003b36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b3a:	e853 3f00 	ldrex	r3, [r3]
 8003b3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	330c      	adds	r3, #12
 8003b4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b50:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b58:	e841 2300 	strex	r3, r2, [r1]
 8003b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e5      	bne.n	8003b30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3314      	adds	r3, #20
 8003b6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3314      	adds	r3, #20
 8003b82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e5      	bne.n	8003b64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d119      	bne.n	8003bd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	330c      	adds	r3, #12
 8003ba6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	e853 3f00 	ldrex	r3, [r3]
 8003bae:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f023 0310 	bic.w	r3, r3, #16
 8003bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	330c      	adds	r3, #12
 8003bbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bc0:	61ba      	str	r2, [r7, #24]
 8003bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	6979      	ldr	r1, [r7, #20]
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	613b      	str	r3, [r7, #16]
   return(result);
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e5      	bne.n	8003ba0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003be2:	bf00      	nop
 8003be4:	3754      	adds	r7, #84	@ 0x54
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
	...

08003bf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bf4:	b0c0      	sub	sp, #256	@ 0x100
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c0c:	68d9      	ldr	r1, [r3, #12]
 8003c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	ea40 0301 	orr.w	r3, r0, r1
 8003c18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003c48:	f021 010c 	bic.w	r1, r1, #12
 8003c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c56:	430b      	orrs	r3, r1
 8003c58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c6a:	6999      	ldr	r1, [r3, #24]
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	ea40 0301 	orr.w	r3, r0, r1
 8003c76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	4b8f      	ldr	r3, [pc, #572]	@ (8003ebc <UART_SetConfig+0x2cc>)
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d005      	beq.n	8003c90 <UART_SetConfig+0xa0>
 8003c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4b8d      	ldr	r3, [pc, #564]	@ (8003ec0 <UART_SetConfig+0x2d0>)
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d104      	bne.n	8003c9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c90:	f7fe fd90 	bl	80027b4 <HAL_RCC_GetPCLK2Freq>
 8003c94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003c98:	e003      	b.n	8003ca2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c9a:	f7fe fd77 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 8003c9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cac:	f040 810c 	bne.w	8003ec8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003cbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003cc2:	4622      	mov	r2, r4
 8003cc4:	462b      	mov	r3, r5
 8003cc6:	1891      	adds	r1, r2, r2
 8003cc8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003cca:	415b      	adcs	r3, r3
 8003ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	eb12 0801 	adds.w	r8, r2, r1
 8003cd8:	4629      	mov	r1, r5
 8003cda:	eb43 0901 	adc.w	r9, r3, r1
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	f04f 0300 	mov.w	r3, #0
 8003ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cf2:	4690      	mov	r8, r2
 8003cf4:	4699      	mov	r9, r3
 8003cf6:	4623      	mov	r3, r4
 8003cf8:	eb18 0303 	adds.w	r3, r8, r3
 8003cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d00:	462b      	mov	r3, r5
 8003d02:	eb49 0303 	adc.w	r3, r9, r3
 8003d06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003d1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d1e:	460b      	mov	r3, r1
 8003d20:	18db      	adds	r3, r3, r3
 8003d22:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d24:	4613      	mov	r3, r2
 8003d26:	eb42 0303 	adc.w	r3, r2, r3
 8003d2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003d30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003d34:	f7fc fac4 	bl	80002c0 <__aeabi_uldivmod>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4b61      	ldr	r3, [pc, #388]	@ (8003ec4 <UART_SetConfig+0x2d4>)
 8003d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	011c      	lsls	r4, r3, #4
 8003d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003d54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003d58:	4642      	mov	r2, r8
 8003d5a:	464b      	mov	r3, r9
 8003d5c:	1891      	adds	r1, r2, r2
 8003d5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003d60:	415b      	adcs	r3, r3
 8003d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003d68:	4641      	mov	r1, r8
 8003d6a:	eb12 0a01 	adds.w	sl, r2, r1
 8003d6e:	4649      	mov	r1, r9
 8003d70:	eb43 0b01 	adc.w	fp, r3, r1
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d88:	4692      	mov	sl, r2
 8003d8a:	469b      	mov	fp, r3
 8003d8c:	4643      	mov	r3, r8
 8003d8e:	eb1a 0303 	adds.w	r3, sl, r3
 8003d92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d96:	464b      	mov	r3, r9
 8003d98:	eb4b 0303 	adc.w	r3, fp, r3
 8003d9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003dac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003db0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003db4:	460b      	mov	r3, r1
 8003db6:	18db      	adds	r3, r3, r3
 8003db8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dba:	4613      	mov	r3, r2
 8003dbc:	eb42 0303 	adc.w	r3, r2, r3
 8003dc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003dc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003dca:	f7fc fa79 	bl	80002c0 <__aeabi_uldivmod>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4611      	mov	r1, r2
 8003dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec4 <UART_SetConfig+0x2d4>)
 8003dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	2264      	movs	r2, #100	@ 0x64
 8003dde:	fb02 f303 	mul.w	r3, r2, r3
 8003de2:	1acb      	subs	r3, r1, r3
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003dea:	4b36      	ldr	r3, [pc, #216]	@ (8003ec4 <UART_SetConfig+0x2d4>)
 8003dec:	fba3 2302 	umull	r2, r3, r3, r2
 8003df0:	095b      	lsrs	r3, r3, #5
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003df8:	441c      	add	r4, r3
 8003dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003e08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003e0c:	4642      	mov	r2, r8
 8003e0e:	464b      	mov	r3, r9
 8003e10:	1891      	adds	r1, r2, r2
 8003e12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e14:	415b      	adcs	r3, r3
 8003e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003e1c:	4641      	mov	r1, r8
 8003e1e:	1851      	adds	r1, r2, r1
 8003e20:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e22:	4649      	mov	r1, r9
 8003e24:	414b      	adcs	r3, r1
 8003e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	f04f 0300 	mov.w	r3, #0
 8003e30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003e34:	4659      	mov	r1, fp
 8003e36:	00cb      	lsls	r3, r1, #3
 8003e38:	4651      	mov	r1, sl
 8003e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e3e:	4651      	mov	r1, sl
 8003e40:	00ca      	lsls	r2, r1, #3
 8003e42:	4610      	mov	r0, r2
 8003e44:	4619      	mov	r1, r3
 8003e46:	4603      	mov	r3, r0
 8003e48:	4642      	mov	r2, r8
 8003e4a:	189b      	adds	r3, r3, r2
 8003e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e50:	464b      	mov	r3, r9
 8003e52:	460a      	mov	r2, r1
 8003e54:	eb42 0303 	adc.w	r3, r2, r3
 8003e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003e6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e70:	460b      	mov	r3, r1
 8003e72:	18db      	adds	r3, r3, r3
 8003e74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e76:	4613      	mov	r3, r2
 8003e78:	eb42 0303 	adc.w	r3, r2, r3
 8003e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003e86:	f7fc fa1b 	bl	80002c0 <__aeabi_uldivmod>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec4 <UART_SetConfig+0x2d4>)
 8003e90:	fba3 1302 	umull	r1, r3, r3, r2
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	2164      	movs	r1, #100	@ 0x64
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	3332      	adds	r3, #50	@ 0x32
 8003ea2:	4a08      	ldr	r2, [pc, #32]	@ (8003ec4 <UART_SetConfig+0x2d4>)
 8003ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	f003 0207 	and.w	r2, r3, #7
 8003eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4422      	add	r2, r4
 8003eb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003eb8:	e106      	b.n	80040c8 <UART_SetConfig+0x4d8>
 8003eba:	bf00      	nop
 8003ebc:	40011000 	.word	0x40011000
 8003ec0:	40011400 	.word	0x40011400
 8003ec4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ed2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ed6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003eda:	4642      	mov	r2, r8
 8003edc:	464b      	mov	r3, r9
 8003ede:	1891      	adds	r1, r2, r2
 8003ee0:	6239      	str	r1, [r7, #32]
 8003ee2:	415b      	adcs	r3, r3
 8003ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ee6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003eea:	4641      	mov	r1, r8
 8003eec:	1854      	adds	r4, r2, r1
 8003eee:	4649      	mov	r1, r9
 8003ef0:	eb43 0501 	adc.w	r5, r3, r1
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	00eb      	lsls	r3, r5, #3
 8003efe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f02:	00e2      	lsls	r2, r4, #3
 8003f04:	4614      	mov	r4, r2
 8003f06:	461d      	mov	r5, r3
 8003f08:	4643      	mov	r3, r8
 8003f0a:	18e3      	adds	r3, r4, r3
 8003f0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f10:	464b      	mov	r3, r9
 8003f12:	eb45 0303 	adc.w	r3, r5, r3
 8003f16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f36:	4629      	mov	r1, r5
 8003f38:	008b      	lsls	r3, r1, #2
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f40:	4621      	mov	r1, r4
 8003f42:	008a      	lsls	r2, r1, #2
 8003f44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003f48:	f7fc f9ba 	bl	80002c0 <__aeabi_uldivmod>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4b60      	ldr	r3, [pc, #384]	@ (80040d4 <UART_SetConfig+0x4e4>)
 8003f52:	fba3 2302 	umull	r2, r3, r3, r2
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	011c      	lsls	r4, r3, #4
 8003f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003f6c:	4642      	mov	r2, r8
 8003f6e:	464b      	mov	r3, r9
 8003f70:	1891      	adds	r1, r2, r2
 8003f72:	61b9      	str	r1, [r7, #24]
 8003f74:	415b      	adcs	r3, r3
 8003f76:	61fb      	str	r3, [r7, #28]
 8003f78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f7c:	4641      	mov	r1, r8
 8003f7e:	1851      	adds	r1, r2, r1
 8003f80:	6139      	str	r1, [r7, #16]
 8003f82:	4649      	mov	r1, r9
 8003f84:	414b      	adcs	r3, r1
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f94:	4659      	mov	r1, fp
 8003f96:	00cb      	lsls	r3, r1, #3
 8003f98:	4651      	mov	r1, sl
 8003f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f9e:	4651      	mov	r1, sl
 8003fa0:	00ca      	lsls	r2, r1, #3
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	4642      	mov	r2, r8
 8003faa:	189b      	adds	r3, r3, r2
 8003fac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fb0:	464b      	mov	r3, r9
 8003fb2:	460a      	mov	r2, r1
 8003fb4:	eb42 0303 	adc.w	r3, r2, r3
 8003fb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003fc6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003fd4:	4649      	mov	r1, r9
 8003fd6:	008b      	lsls	r3, r1, #2
 8003fd8:	4641      	mov	r1, r8
 8003fda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fde:	4641      	mov	r1, r8
 8003fe0:	008a      	lsls	r2, r1, #2
 8003fe2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003fe6:	f7fc f96b 	bl	80002c0 <__aeabi_uldivmod>
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4611      	mov	r1, r2
 8003ff0:	4b38      	ldr	r3, [pc, #224]	@ (80040d4 <UART_SetConfig+0x4e4>)
 8003ff2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	2264      	movs	r2, #100	@ 0x64
 8003ffa:	fb02 f303 	mul.w	r3, r2, r3
 8003ffe:	1acb      	subs	r3, r1, r3
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	3332      	adds	r3, #50	@ 0x32
 8004004:	4a33      	ldr	r2, [pc, #204]	@ (80040d4 <UART_SetConfig+0x4e4>)
 8004006:	fba2 2303 	umull	r2, r3, r2, r3
 800400a:	095b      	lsrs	r3, r3, #5
 800400c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004010:	441c      	add	r4, r3
 8004012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004016:	2200      	movs	r2, #0
 8004018:	673b      	str	r3, [r7, #112]	@ 0x70
 800401a:	677a      	str	r2, [r7, #116]	@ 0x74
 800401c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004020:	4642      	mov	r2, r8
 8004022:	464b      	mov	r3, r9
 8004024:	1891      	adds	r1, r2, r2
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	415b      	adcs	r3, r3
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004030:	4641      	mov	r1, r8
 8004032:	1851      	adds	r1, r2, r1
 8004034:	6039      	str	r1, [r7, #0]
 8004036:	4649      	mov	r1, r9
 8004038:	414b      	adcs	r3, r1
 800403a:	607b      	str	r3, [r7, #4]
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004048:	4659      	mov	r1, fp
 800404a:	00cb      	lsls	r3, r1, #3
 800404c:	4651      	mov	r1, sl
 800404e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004052:	4651      	mov	r1, sl
 8004054:	00ca      	lsls	r2, r1, #3
 8004056:	4610      	mov	r0, r2
 8004058:	4619      	mov	r1, r3
 800405a:	4603      	mov	r3, r0
 800405c:	4642      	mov	r2, r8
 800405e:	189b      	adds	r3, r3, r2
 8004060:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004062:	464b      	mov	r3, r9
 8004064:	460a      	mov	r2, r1
 8004066:	eb42 0303 	adc.w	r3, r2, r3
 800406a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	663b      	str	r3, [r7, #96]	@ 0x60
 8004076:	667a      	str	r2, [r7, #100]	@ 0x64
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004084:	4649      	mov	r1, r9
 8004086:	008b      	lsls	r3, r1, #2
 8004088:	4641      	mov	r1, r8
 800408a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800408e:	4641      	mov	r1, r8
 8004090:	008a      	lsls	r2, r1, #2
 8004092:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004096:	f7fc f913 	bl	80002c0 <__aeabi_uldivmod>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4b0d      	ldr	r3, [pc, #52]	@ (80040d4 <UART_SetConfig+0x4e4>)
 80040a0:	fba3 1302 	umull	r1, r3, r3, r2
 80040a4:	095b      	lsrs	r3, r3, #5
 80040a6:	2164      	movs	r1, #100	@ 0x64
 80040a8:	fb01 f303 	mul.w	r3, r1, r3
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	3332      	adds	r3, #50	@ 0x32
 80040b2:	4a08      	ldr	r2, [pc, #32]	@ (80040d4 <UART_SetConfig+0x4e4>)
 80040b4:	fba2 2303 	umull	r2, r3, r2, r3
 80040b8:	095b      	lsrs	r3, r3, #5
 80040ba:	f003 020f 	and.w	r2, r3, #15
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4422      	add	r2, r4
 80040c6:	609a      	str	r2, [r3, #8]
}
 80040c8:	bf00      	nop
 80040ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80040ce:	46bd      	mov	sp, r7
 80040d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040d4:	51eb851f 	.word	0x51eb851f

080040d8 <siprintf>:
 80040d8:	b40e      	push	{r1, r2, r3}
 80040da:	b500      	push	{lr}
 80040dc:	b09c      	sub	sp, #112	@ 0x70
 80040de:	ab1d      	add	r3, sp, #116	@ 0x74
 80040e0:	9002      	str	r0, [sp, #8]
 80040e2:	9006      	str	r0, [sp, #24]
 80040e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80040e8:	4809      	ldr	r0, [pc, #36]	@ (8004110 <siprintf+0x38>)
 80040ea:	9107      	str	r1, [sp, #28]
 80040ec:	9104      	str	r1, [sp, #16]
 80040ee:	4909      	ldr	r1, [pc, #36]	@ (8004114 <siprintf+0x3c>)
 80040f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80040f4:	9105      	str	r1, [sp, #20]
 80040f6:	6800      	ldr	r0, [r0, #0]
 80040f8:	9301      	str	r3, [sp, #4]
 80040fa:	a902      	add	r1, sp, #8
 80040fc:	f000 f994 	bl	8004428 <_svfiprintf_r>
 8004100:	9b02      	ldr	r3, [sp, #8]
 8004102:	2200      	movs	r2, #0
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	b01c      	add	sp, #112	@ 0x70
 8004108:	f85d eb04 	ldr.w	lr, [sp], #4
 800410c:	b003      	add	sp, #12
 800410e:	4770      	bx	lr
 8004110:	2000001c 	.word	0x2000001c
 8004114:	ffff0208 	.word	0xffff0208

08004118 <memset>:
 8004118:	4402      	add	r2, r0
 800411a:	4603      	mov	r3, r0
 800411c:	4293      	cmp	r3, r2
 800411e:	d100      	bne.n	8004122 <memset+0xa>
 8004120:	4770      	bx	lr
 8004122:	f803 1b01 	strb.w	r1, [r3], #1
 8004126:	e7f9      	b.n	800411c <memset+0x4>

08004128 <__errno>:
 8004128:	4b01      	ldr	r3, [pc, #4]	@ (8004130 <__errno+0x8>)
 800412a:	6818      	ldr	r0, [r3, #0]
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	2000001c 	.word	0x2000001c

08004134 <__libc_init_array>:
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	4d0d      	ldr	r5, [pc, #52]	@ (800416c <__libc_init_array+0x38>)
 8004138:	4c0d      	ldr	r4, [pc, #52]	@ (8004170 <__libc_init_array+0x3c>)
 800413a:	1b64      	subs	r4, r4, r5
 800413c:	10a4      	asrs	r4, r4, #2
 800413e:	2600      	movs	r6, #0
 8004140:	42a6      	cmp	r6, r4
 8004142:	d109      	bne.n	8004158 <__libc_init_array+0x24>
 8004144:	4d0b      	ldr	r5, [pc, #44]	@ (8004174 <__libc_init_array+0x40>)
 8004146:	4c0c      	ldr	r4, [pc, #48]	@ (8004178 <__libc_init_array+0x44>)
 8004148:	f000 fc66 	bl	8004a18 <_init>
 800414c:	1b64      	subs	r4, r4, r5
 800414e:	10a4      	asrs	r4, r4, #2
 8004150:	2600      	movs	r6, #0
 8004152:	42a6      	cmp	r6, r4
 8004154:	d105      	bne.n	8004162 <__libc_init_array+0x2e>
 8004156:	bd70      	pop	{r4, r5, r6, pc}
 8004158:	f855 3b04 	ldr.w	r3, [r5], #4
 800415c:	4798      	blx	r3
 800415e:	3601      	adds	r6, #1
 8004160:	e7ee      	b.n	8004140 <__libc_init_array+0xc>
 8004162:	f855 3b04 	ldr.w	r3, [r5], #4
 8004166:	4798      	blx	r3
 8004168:	3601      	adds	r6, #1
 800416a:	e7f2      	b.n	8004152 <__libc_init_array+0x1e>
 800416c:	08004a8c 	.word	0x08004a8c
 8004170:	08004a8c 	.word	0x08004a8c
 8004174:	08004a8c 	.word	0x08004a8c
 8004178:	08004a90 	.word	0x08004a90

0800417c <__retarget_lock_acquire_recursive>:
 800417c:	4770      	bx	lr

0800417e <__retarget_lock_release_recursive>:
 800417e:	4770      	bx	lr

08004180 <_free_r>:
 8004180:	b538      	push	{r3, r4, r5, lr}
 8004182:	4605      	mov	r5, r0
 8004184:	2900      	cmp	r1, #0
 8004186:	d041      	beq.n	800420c <_free_r+0x8c>
 8004188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800418c:	1f0c      	subs	r4, r1, #4
 800418e:	2b00      	cmp	r3, #0
 8004190:	bfb8      	it	lt
 8004192:	18e4      	addlt	r4, r4, r3
 8004194:	f000 f8e0 	bl	8004358 <__malloc_lock>
 8004198:	4a1d      	ldr	r2, [pc, #116]	@ (8004210 <_free_r+0x90>)
 800419a:	6813      	ldr	r3, [r2, #0]
 800419c:	b933      	cbnz	r3, 80041ac <_free_r+0x2c>
 800419e:	6063      	str	r3, [r4, #4]
 80041a0:	6014      	str	r4, [r2, #0]
 80041a2:	4628      	mov	r0, r5
 80041a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041a8:	f000 b8dc 	b.w	8004364 <__malloc_unlock>
 80041ac:	42a3      	cmp	r3, r4
 80041ae:	d908      	bls.n	80041c2 <_free_r+0x42>
 80041b0:	6820      	ldr	r0, [r4, #0]
 80041b2:	1821      	adds	r1, r4, r0
 80041b4:	428b      	cmp	r3, r1
 80041b6:	bf01      	itttt	eq
 80041b8:	6819      	ldreq	r1, [r3, #0]
 80041ba:	685b      	ldreq	r3, [r3, #4]
 80041bc:	1809      	addeq	r1, r1, r0
 80041be:	6021      	streq	r1, [r4, #0]
 80041c0:	e7ed      	b.n	800419e <_free_r+0x1e>
 80041c2:	461a      	mov	r2, r3
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	b10b      	cbz	r3, 80041cc <_free_r+0x4c>
 80041c8:	42a3      	cmp	r3, r4
 80041ca:	d9fa      	bls.n	80041c2 <_free_r+0x42>
 80041cc:	6811      	ldr	r1, [r2, #0]
 80041ce:	1850      	adds	r0, r2, r1
 80041d0:	42a0      	cmp	r0, r4
 80041d2:	d10b      	bne.n	80041ec <_free_r+0x6c>
 80041d4:	6820      	ldr	r0, [r4, #0]
 80041d6:	4401      	add	r1, r0
 80041d8:	1850      	adds	r0, r2, r1
 80041da:	4283      	cmp	r3, r0
 80041dc:	6011      	str	r1, [r2, #0]
 80041de:	d1e0      	bne.n	80041a2 <_free_r+0x22>
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	6053      	str	r3, [r2, #4]
 80041e6:	4408      	add	r0, r1
 80041e8:	6010      	str	r0, [r2, #0]
 80041ea:	e7da      	b.n	80041a2 <_free_r+0x22>
 80041ec:	d902      	bls.n	80041f4 <_free_r+0x74>
 80041ee:	230c      	movs	r3, #12
 80041f0:	602b      	str	r3, [r5, #0]
 80041f2:	e7d6      	b.n	80041a2 <_free_r+0x22>
 80041f4:	6820      	ldr	r0, [r4, #0]
 80041f6:	1821      	adds	r1, r4, r0
 80041f8:	428b      	cmp	r3, r1
 80041fa:	bf04      	itt	eq
 80041fc:	6819      	ldreq	r1, [r3, #0]
 80041fe:	685b      	ldreq	r3, [r3, #4]
 8004200:	6063      	str	r3, [r4, #4]
 8004202:	bf04      	itt	eq
 8004204:	1809      	addeq	r1, r1, r0
 8004206:	6021      	streq	r1, [r4, #0]
 8004208:	6054      	str	r4, [r2, #4]
 800420a:	e7ca      	b.n	80041a2 <_free_r+0x22>
 800420c:	bd38      	pop	{r3, r4, r5, pc}
 800420e:	bf00      	nop
 8004210:	2000036c 	.word	0x2000036c

08004214 <sbrk_aligned>:
 8004214:	b570      	push	{r4, r5, r6, lr}
 8004216:	4e0f      	ldr	r6, [pc, #60]	@ (8004254 <sbrk_aligned+0x40>)
 8004218:	460c      	mov	r4, r1
 800421a:	6831      	ldr	r1, [r6, #0]
 800421c:	4605      	mov	r5, r0
 800421e:	b911      	cbnz	r1, 8004226 <sbrk_aligned+0x12>
 8004220:	f000 fba6 	bl	8004970 <_sbrk_r>
 8004224:	6030      	str	r0, [r6, #0]
 8004226:	4621      	mov	r1, r4
 8004228:	4628      	mov	r0, r5
 800422a:	f000 fba1 	bl	8004970 <_sbrk_r>
 800422e:	1c43      	adds	r3, r0, #1
 8004230:	d103      	bne.n	800423a <sbrk_aligned+0x26>
 8004232:	f04f 34ff 	mov.w	r4, #4294967295
 8004236:	4620      	mov	r0, r4
 8004238:	bd70      	pop	{r4, r5, r6, pc}
 800423a:	1cc4      	adds	r4, r0, #3
 800423c:	f024 0403 	bic.w	r4, r4, #3
 8004240:	42a0      	cmp	r0, r4
 8004242:	d0f8      	beq.n	8004236 <sbrk_aligned+0x22>
 8004244:	1a21      	subs	r1, r4, r0
 8004246:	4628      	mov	r0, r5
 8004248:	f000 fb92 	bl	8004970 <_sbrk_r>
 800424c:	3001      	adds	r0, #1
 800424e:	d1f2      	bne.n	8004236 <sbrk_aligned+0x22>
 8004250:	e7ef      	b.n	8004232 <sbrk_aligned+0x1e>
 8004252:	bf00      	nop
 8004254:	20000368 	.word	0x20000368

08004258 <_malloc_r>:
 8004258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800425c:	1ccd      	adds	r5, r1, #3
 800425e:	f025 0503 	bic.w	r5, r5, #3
 8004262:	3508      	adds	r5, #8
 8004264:	2d0c      	cmp	r5, #12
 8004266:	bf38      	it	cc
 8004268:	250c      	movcc	r5, #12
 800426a:	2d00      	cmp	r5, #0
 800426c:	4606      	mov	r6, r0
 800426e:	db01      	blt.n	8004274 <_malloc_r+0x1c>
 8004270:	42a9      	cmp	r1, r5
 8004272:	d904      	bls.n	800427e <_malloc_r+0x26>
 8004274:	230c      	movs	r3, #12
 8004276:	6033      	str	r3, [r6, #0]
 8004278:	2000      	movs	r0, #0
 800427a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800427e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004354 <_malloc_r+0xfc>
 8004282:	f000 f869 	bl	8004358 <__malloc_lock>
 8004286:	f8d8 3000 	ldr.w	r3, [r8]
 800428a:	461c      	mov	r4, r3
 800428c:	bb44      	cbnz	r4, 80042e0 <_malloc_r+0x88>
 800428e:	4629      	mov	r1, r5
 8004290:	4630      	mov	r0, r6
 8004292:	f7ff ffbf 	bl	8004214 <sbrk_aligned>
 8004296:	1c43      	adds	r3, r0, #1
 8004298:	4604      	mov	r4, r0
 800429a:	d158      	bne.n	800434e <_malloc_r+0xf6>
 800429c:	f8d8 4000 	ldr.w	r4, [r8]
 80042a0:	4627      	mov	r7, r4
 80042a2:	2f00      	cmp	r7, #0
 80042a4:	d143      	bne.n	800432e <_malloc_r+0xd6>
 80042a6:	2c00      	cmp	r4, #0
 80042a8:	d04b      	beq.n	8004342 <_malloc_r+0xea>
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	4639      	mov	r1, r7
 80042ae:	4630      	mov	r0, r6
 80042b0:	eb04 0903 	add.w	r9, r4, r3
 80042b4:	f000 fb5c 	bl	8004970 <_sbrk_r>
 80042b8:	4581      	cmp	r9, r0
 80042ba:	d142      	bne.n	8004342 <_malloc_r+0xea>
 80042bc:	6821      	ldr	r1, [r4, #0]
 80042be:	1a6d      	subs	r5, r5, r1
 80042c0:	4629      	mov	r1, r5
 80042c2:	4630      	mov	r0, r6
 80042c4:	f7ff ffa6 	bl	8004214 <sbrk_aligned>
 80042c8:	3001      	adds	r0, #1
 80042ca:	d03a      	beq.n	8004342 <_malloc_r+0xea>
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	442b      	add	r3, r5
 80042d0:	6023      	str	r3, [r4, #0]
 80042d2:	f8d8 3000 	ldr.w	r3, [r8]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	bb62      	cbnz	r2, 8004334 <_malloc_r+0xdc>
 80042da:	f8c8 7000 	str.w	r7, [r8]
 80042de:	e00f      	b.n	8004300 <_malloc_r+0xa8>
 80042e0:	6822      	ldr	r2, [r4, #0]
 80042e2:	1b52      	subs	r2, r2, r5
 80042e4:	d420      	bmi.n	8004328 <_malloc_r+0xd0>
 80042e6:	2a0b      	cmp	r2, #11
 80042e8:	d917      	bls.n	800431a <_malloc_r+0xc2>
 80042ea:	1961      	adds	r1, r4, r5
 80042ec:	42a3      	cmp	r3, r4
 80042ee:	6025      	str	r5, [r4, #0]
 80042f0:	bf18      	it	ne
 80042f2:	6059      	strne	r1, [r3, #4]
 80042f4:	6863      	ldr	r3, [r4, #4]
 80042f6:	bf08      	it	eq
 80042f8:	f8c8 1000 	streq.w	r1, [r8]
 80042fc:	5162      	str	r2, [r4, r5]
 80042fe:	604b      	str	r3, [r1, #4]
 8004300:	4630      	mov	r0, r6
 8004302:	f000 f82f 	bl	8004364 <__malloc_unlock>
 8004306:	f104 000b 	add.w	r0, r4, #11
 800430a:	1d23      	adds	r3, r4, #4
 800430c:	f020 0007 	bic.w	r0, r0, #7
 8004310:	1ac2      	subs	r2, r0, r3
 8004312:	bf1c      	itt	ne
 8004314:	1a1b      	subne	r3, r3, r0
 8004316:	50a3      	strne	r3, [r4, r2]
 8004318:	e7af      	b.n	800427a <_malloc_r+0x22>
 800431a:	6862      	ldr	r2, [r4, #4]
 800431c:	42a3      	cmp	r3, r4
 800431e:	bf0c      	ite	eq
 8004320:	f8c8 2000 	streq.w	r2, [r8]
 8004324:	605a      	strne	r2, [r3, #4]
 8004326:	e7eb      	b.n	8004300 <_malloc_r+0xa8>
 8004328:	4623      	mov	r3, r4
 800432a:	6864      	ldr	r4, [r4, #4]
 800432c:	e7ae      	b.n	800428c <_malloc_r+0x34>
 800432e:	463c      	mov	r4, r7
 8004330:	687f      	ldr	r7, [r7, #4]
 8004332:	e7b6      	b.n	80042a2 <_malloc_r+0x4a>
 8004334:	461a      	mov	r2, r3
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	42a3      	cmp	r3, r4
 800433a:	d1fb      	bne.n	8004334 <_malloc_r+0xdc>
 800433c:	2300      	movs	r3, #0
 800433e:	6053      	str	r3, [r2, #4]
 8004340:	e7de      	b.n	8004300 <_malloc_r+0xa8>
 8004342:	230c      	movs	r3, #12
 8004344:	6033      	str	r3, [r6, #0]
 8004346:	4630      	mov	r0, r6
 8004348:	f000 f80c 	bl	8004364 <__malloc_unlock>
 800434c:	e794      	b.n	8004278 <_malloc_r+0x20>
 800434e:	6005      	str	r5, [r0, #0]
 8004350:	e7d6      	b.n	8004300 <_malloc_r+0xa8>
 8004352:	bf00      	nop
 8004354:	2000036c 	.word	0x2000036c

08004358 <__malloc_lock>:
 8004358:	4801      	ldr	r0, [pc, #4]	@ (8004360 <__malloc_lock+0x8>)
 800435a:	f7ff bf0f 	b.w	800417c <__retarget_lock_acquire_recursive>
 800435e:	bf00      	nop
 8004360:	20000364 	.word	0x20000364

08004364 <__malloc_unlock>:
 8004364:	4801      	ldr	r0, [pc, #4]	@ (800436c <__malloc_unlock+0x8>)
 8004366:	f7ff bf0a 	b.w	800417e <__retarget_lock_release_recursive>
 800436a:	bf00      	nop
 800436c:	20000364 	.word	0x20000364

08004370 <__ssputs_r>:
 8004370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004374:	688e      	ldr	r6, [r1, #8]
 8004376:	461f      	mov	r7, r3
 8004378:	42be      	cmp	r6, r7
 800437a:	680b      	ldr	r3, [r1, #0]
 800437c:	4682      	mov	sl, r0
 800437e:	460c      	mov	r4, r1
 8004380:	4690      	mov	r8, r2
 8004382:	d82d      	bhi.n	80043e0 <__ssputs_r+0x70>
 8004384:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004388:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800438c:	d026      	beq.n	80043dc <__ssputs_r+0x6c>
 800438e:	6965      	ldr	r5, [r4, #20]
 8004390:	6909      	ldr	r1, [r1, #16]
 8004392:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004396:	eba3 0901 	sub.w	r9, r3, r1
 800439a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800439e:	1c7b      	adds	r3, r7, #1
 80043a0:	444b      	add	r3, r9
 80043a2:	106d      	asrs	r5, r5, #1
 80043a4:	429d      	cmp	r5, r3
 80043a6:	bf38      	it	cc
 80043a8:	461d      	movcc	r5, r3
 80043aa:	0553      	lsls	r3, r2, #21
 80043ac:	d527      	bpl.n	80043fe <__ssputs_r+0x8e>
 80043ae:	4629      	mov	r1, r5
 80043b0:	f7ff ff52 	bl	8004258 <_malloc_r>
 80043b4:	4606      	mov	r6, r0
 80043b6:	b360      	cbz	r0, 8004412 <__ssputs_r+0xa2>
 80043b8:	6921      	ldr	r1, [r4, #16]
 80043ba:	464a      	mov	r2, r9
 80043bc:	f000 fae8 	bl	8004990 <memcpy>
 80043c0:	89a3      	ldrh	r3, [r4, #12]
 80043c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80043c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043ca:	81a3      	strh	r3, [r4, #12]
 80043cc:	6126      	str	r6, [r4, #16]
 80043ce:	6165      	str	r5, [r4, #20]
 80043d0:	444e      	add	r6, r9
 80043d2:	eba5 0509 	sub.w	r5, r5, r9
 80043d6:	6026      	str	r6, [r4, #0]
 80043d8:	60a5      	str	r5, [r4, #8]
 80043da:	463e      	mov	r6, r7
 80043dc:	42be      	cmp	r6, r7
 80043de:	d900      	bls.n	80043e2 <__ssputs_r+0x72>
 80043e0:	463e      	mov	r6, r7
 80043e2:	6820      	ldr	r0, [r4, #0]
 80043e4:	4632      	mov	r2, r6
 80043e6:	4641      	mov	r1, r8
 80043e8:	f000 faa8 	bl	800493c <memmove>
 80043ec:	68a3      	ldr	r3, [r4, #8]
 80043ee:	1b9b      	subs	r3, r3, r6
 80043f0:	60a3      	str	r3, [r4, #8]
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	4433      	add	r3, r6
 80043f6:	6023      	str	r3, [r4, #0]
 80043f8:	2000      	movs	r0, #0
 80043fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fe:	462a      	mov	r2, r5
 8004400:	f000 fad4 	bl	80049ac <_realloc_r>
 8004404:	4606      	mov	r6, r0
 8004406:	2800      	cmp	r0, #0
 8004408:	d1e0      	bne.n	80043cc <__ssputs_r+0x5c>
 800440a:	6921      	ldr	r1, [r4, #16]
 800440c:	4650      	mov	r0, sl
 800440e:	f7ff feb7 	bl	8004180 <_free_r>
 8004412:	230c      	movs	r3, #12
 8004414:	f8ca 3000 	str.w	r3, [sl]
 8004418:	89a3      	ldrh	r3, [r4, #12]
 800441a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800441e:	81a3      	strh	r3, [r4, #12]
 8004420:	f04f 30ff 	mov.w	r0, #4294967295
 8004424:	e7e9      	b.n	80043fa <__ssputs_r+0x8a>
	...

08004428 <_svfiprintf_r>:
 8004428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800442c:	4698      	mov	r8, r3
 800442e:	898b      	ldrh	r3, [r1, #12]
 8004430:	061b      	lsls	r3, r3, #24
 8004432:	b09d      	sub	sp, #116	@ 0x74
 8004434:	4607      	mov	r7, r0
 8004436:	460d      	mov	r5, r1
 8004438:	4614      	mov	r4, r2
 800443a:	d510      	bpl.n	800445e <_svfiprintf_r+0x36>
 800443c:	690b      	ldr	r3, [r1, #16]
 800443e:	b973      	cbnz	r3, 800445e <_svfiprintf_r+0x36>
 8004440:	2140      	movs	r1, #64	@ 0x40
 8004442:	f7ff ff09 	bl	8004258 <_malloc_r>
 8004446:	6028      	str	r0, [r5, #0]
 8004448:	6128      	str	r0, [r5, #16]
 800444a:	b930      	cbnz	r0, 800445a <_svfiprintf_r+0x32>
 800444c:	230c      	movs	r3, #12
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	f04f 30ff 	mov.w	r0, #4294967295
 8004454:	b01d      	add	sp, #116	@ 0x74
 8004456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800445a:	2340      	movs	r3, #64	@ 0x40
 800445c:	616b      	str	r3, [r5, #20]
 800445e:	2300      	movs	r3, #0
 8004460:	9309      	str	r3, [sp, #36]	@ 0x24
 8004462:	2320      	movs	r3, #32
 8004464:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004468:	f8cd 800c 	str.w	r8, [sp, #12]
 800446c:	2330      	movs	r3, #48	@ 0x30
 800446e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800460c <_svfiprintf_r+0x1e4>
 8004472:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004476:	f04f 0901 	mov.w	r9, #1
 800447a:	4623      	mov	r3, r4
 800447c:	469a      	mov	sl, r3
 800447e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004482:	b10a      	cbz	r2, 8004488 <_svfiprintf_r+0x60>
 8004484:	2a25      	cmp	r2, #37	@ 0x25
 8004486:	d1f9      	bne.n	800447c <_svfiprintf_r+0x54>
 8004488:	ebba 0b04 	subs.w	fp, sl, r4
 800448c:	d00b      	beq.n	80044a6 <_svfiprintf_r+0x7e>
 800448e:	465b      	mov	r3, fp
 8004490:	4622      	mov	r2, r4
 8004492:	4629      	mov	r1, r5
 8004494:	4638      	mov	r0, r7
 8004496:	f7ff ff6b 	bl	8004370 <__ssputs_r>
 800449a:	3001      	adds	r0, #1
 800449c:	f000 80a7 	beq.w	80045ee <_svfiprintf_r+0x1c6>
 80044a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044a2:	445a      	add	r2, fp
 80044a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80044a6:	f89a 3000 	ldrb.w	r3, [sl]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 809f 	beq.w	80045ee <_svfiprintf_r+0x1c6>
 80044b0:	2300      	movs	r3, #0
 80044b2:	f04f 32ff 	mov.w	r2, #4294967295
 80044b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044ba:	f10a 0a01 	add.w	sl, sl, #1
 80044be:	9304      	str	r3, [sp, #16]
 80044c0:	9307      	str	r3, [sp, #28]
 80044c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80044c8:	4654      	mov	r4, sl
 80044ca:	2205      	movs	r2, #5
 80044cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044d0:	484e      	ldr	r0, [pc, #312]	@ (800460c <_svfiprintf_r+0x1e4>)
 80044d2:	f7fb fea5 	bl	8000220 <memchr>
 80044d6:	9a04      	ldr	r2, [sp, #16]
 80044d8:	b9d8      	cbnz	r0, 8004512 <_svfiprintf_r+0xea>
 80044da:	06d0      	lsls	r0, r2, #27
 80044dc:	bf44      	itt	mi
 80044de:	2320      	movmi	r3, #32
 80044e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044e4:	0711      	lsls	r1, r2, #28
 80044e6:	bf44      	itt	mi
 80044e8:	232b      	movmi	r3, #43	@ 0x2b
 80044ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044ee:	f89a 3000 	ldrb.w	r3, [sl]
 80044f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80044f4:	d015      	beq.n	8004522 <_svfiprintf_r+0xfa>
 80044f6:	9a07      	ldr	r2, [sp, #28]
 80044f8:	4654      	mov	r4, sl
 80044fa:	2000      	movs	r0, #0
 80044fc:	f04f 0c0a 	mov.w	ip, #10
 8004500:	4621      	mov	r1, r4
 8004502:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004506:	3b30      	subs	r3, #48	@ 0x30
 8004508:	2b09      	cmp	r3, #9
 800450a:	d94b      	bls.n	80045a4 <_svfiprintf_r+0x17c>
 800450c:	b1b0      	cbz	r0, 800453c <_svfiprintf_r+0x114>
 800450e:	9207      	str	r2, [sp, #28]
 8004510:	e014      	b.n	800453c <_svfiprintf_r+0x114>
 8004512:	eba0 0308 	sub.w	r3, r0, r8
 8004516:	fa09 f303 	lsl.w	r3, r9, r3
 800451a:	4313      	orrs	r3, r2
 800451c:	9304      	str	r3, [sp, #16]
 800451e:	46a2      	mov	sl, r4
 8004520:	e7d2      	b.n	80044c8 <_svfiprintf_r+0xa0>
 8004522:	9b03      	ldr	r3, [sp, #12]
 8004524:	1d19      	adds	r1, r3, #4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	9103      	str	r1, [sp, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	bfbb      	ittet	lt
 800452e:	425b      	neglt	r3, r3
 8004530:	f042 0202 	orrlt.w	r2, r2, #2
 8004534:	9307      	strge	r3, [sp, #28]
 8004536:	9307      	strlt	r3, [sp, #28]
 8004538:	bfb8      	it	lt
 800453a:	9204      	strlt	r2, [sp, #16]
 800453c:	7823      	ldrb	r3, [r4, #0]
 800453e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004540:	d10a      	bne.n	8004558 <_svfiprintf_r+0x130>
 8004542:	7863      	ldrb	r3, [r4, #1]
 8004544:	2b2a      	cmp	r3, #42	@ 0x2a
 8004546:	d132      	bne.n	80045ae <_svfiprintf_r+0x186>
 8004548:	9b03      	ldr	r3, [sp, #12]
 800454a:	1d1a      	adds	r2, r3, #4
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	9203      	str	r2, [sp, #12]
 8004550:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004554:	3402      	adds	r4, #2
 8004556:	9305      	str	r3, [sp, #20]
 8004558:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800461c <_svfiprintf_r+0x1f4>
 800455c:	7821      	ldrb	r1, [r4, #0]
 800455e:	2203      	movs	r2, #3
 8004560:	4650      	mov	r0, sl
 8004562:	f7fb fe5d 	bl	8000220 <memchr>
 8004566:	b138      	cbz	r0, 8004578 <_svfiprintf_r+0x150>
 8004568:	9b04      	ldr	r3, [sp, #16]
 800456a:	eba0 000a 	sub.w	r0, r0, sl
 800456e:	2240      	movs	r2, #64	@ 0x40
 8004570:	4082      	lsls	r2, r0
 8004572:	4313      	orrs	r3, r2
 8004574:	3401      	adds	r4, #1
 8004576:	9304      	str	r3, [sp, #16]
 8004578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800457c:	4824      	ldr	r0, [pc, #144]	@ (8004610 <_svfiprintf_r+0x1e8>)
 800457e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004582:	2206      	movs	r2, #6
 8004584:	f7fb fe4c 	bl	8000220 <memchr>
 8004588:	2800      	cmp	r0, #0
 800458a:	d036      	beq.n	80045fa <_svfiprintf_r+0x1d2>
 800458c:	4b21      	ldr	r3, [pc, #132]	@ (8004614 <_svfiprintf_r+0x1ec>)
 800458e:	bb1b      	cbnz	r3, 80045d8 <_svfiprintf_r+0x1b0>
 8004590:	9b03      	ldr	r3, [sp, #12]
 8004592:	3307      	adds	r3, #7
 8004594:	f023 0307 	bic.w	r3, r3, #7
 8004598:	3308      	adds	r3, #8
 800459a:	9303      	str	r3, [sp, #12]
 800459c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800459e:	4433      	add	r3, r6
 80045a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80045a2:	e76a      	b.n	800447a <_svfiprintf_r+0x52>
 80045a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80045a8:	460c      	mov	r4, r1
 80045aa:	2001      	movs	r0, #1
 80045ac:	e7a8      	b.n	8004500 <_svfiprintf_r+0xd8>
 80045ae:	2300      	movs	r3, #0
 80045b0:	3401      	adds	r4, #1
 80045b2:	9305      	str	r3, [sp, #20]
 80045b4:	4619      	mov	r1, r3
 80045b6:	f04f 0c0a 	mov.w	ip, #10
 80045ba:	4620      	mov	r0, r4
 80045bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045c0:	3a30      	subs	r2, #48	@ 0x30
 80045c2:	2a09      	cmp	r2, #9
 80045c4:	d903      	bls.n	80045ce <_svfiprintf_r+0x1a6>
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0c6      	beq.n	8004558 <_svfiprintf_r+0x130>
 80045ca:	9105      	str	r1, [sp, #20]
 80045cc:	e7c4      	b.n	8004558 <_svfiprintf_r+0x130>
 80045ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80045d2:	4604      	mov	r4, r0
 80045d4:	2301      	movs	r3, #1
 80045d6:	e7f0      	b.n	80045ba <_svfiprintf_r+0x192>
 80045d8:	ab03      	add	r3, sp, #12
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	462a      	mov	r2, r5
 80045de:	4b0e      	ldr	r3, [pc, #56]	@ (8004618 <_svfiprintf_r+0x1f0>)
 80045e0:	a904      	add	r1, sp, #16
 80045e2:	4638      	mov	r0, r7
 80045e4:	f3af 8000 	nop.w
 80045e8:	1c42      	adds	r2, r0, #1
 80045ea:	4606      	mov	r6, r0
 80045ec:	d1d6      	bne.n	800459c <_svfiprintf_r+0x174>
 80045ee:	89ab      	ldrh	r3, [r5, #12]
 80045f0:	065b      	lsls	r3, r3, #25
 80045f2:	f53f af2d 	bmi.w	8004450 <_svfiprintf_r+0x28>
 80045f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045f8:	e72c      	b.n	8004454 <_svfiprintf_r+0x2c>
 80045fa:	ab03      	add	r3, sp, #12
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	462a      	mov	r2, r5
 8004600:	4b05      	ldr	r3, [pc, #20]	@ (8004618 <_svfiprintf_r+0x1f0>)
 8004602:	a904      	add	r1, sp, #16
 8004604:	4638      	mov	r0, r7
 8004606:	f000 f879 	bl	80046fc <_printf_i>
 800460a:	e7ed      	b.n	80045e8 <_svfiprintf_r+0x1c0>
 800460c:	08004a50 	.word	0x08004a50
 8004610:	08004a5a 	.word	0x08004a5a
 8004614:	00000000 	.word	0x00000000
 8004618:	08004371 	.word	0x08004371
 800461c:	08004a56 	.word	0x08004a56

08004620 <_printf_common>:
 8004620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004624:	4616      	mov	r6, r2
 8004626:	4698      	mov	r8, r3
 8004628:	688a      	ldr	r2, [r1, #8]
 800462a:	690b      	ldr	r3, [r1, #16]
 800462c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004630:	4293      	cmp	r3, r2
 8004632:	bfb8      	it	lt
 8004634:	4613      	movlt	r3, r2
 8004636:	6033      	str	r3, [r6, #0]
 8004638:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800463c:	4607      	mov	r7, r0
 800463e:	460c      	mov	r4, r1
 8004640:	b10a      	cbz	r2, 8004646 <_printf_common+0x26>
 8004642:	3301      	adds	r3, #1
 8004644:	6033      	str	r3, [r6, #0]
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	0699      	lsls	r1, r3, #26
 800464a:	bf42      	ittt	mi
 800464c:	6833      	ldrmi	r3, [r6, #0]
 800464e:	3302      	addmi	r3, #2
 8004650:	6033      	strmi	r3, [r6, #0]
 8004652:	6825      	ldr	r5, [r4, #0]
 8004654:	f015 0506 	ands.w	r5, r5, #6
 8004658:	d106      	bne.n	8004668 <_printf_common+0x48>
 800465a:	f104 0a19 	add.w	sl, r4, #25
 800465e:	68e3      	ldr	r3, [r4, #12]
 8004660:	6832      	ldr	r2, [r6, #0]
 8004662:	1a9b      	subs	r3, r3, r2
 8004664:	42ab      	cmp	r3, r5
 8004666:	dc26      	bgt.n	80046b6 <_printf_common+0x96>
 8004668:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800466c:	6822      	ldr	r2, [r4, #0]
 800466e:	3b00      	subs	r3, #0
 8004670:	bf18      	it	ne
 8004672:	2301      	movne	r3, #1
 8004674:	0692      	lsls	r2, r2, #26
 8004676:	d42b      	bmi.n	80046d0 <_printf_common+0xb0>
 8004678:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800467c:	4641      	mov	r1, r8
 800467e:	4638      	mov	r0, r7
 8004680:	47c8      	blx	r9
 8004682:	3001      	adds	r0, #1
 8004684:	d01e      	beq.n	80046c4 <_printf_common+0xa4>
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	6922      	ldr	r2, [r4, #16]
 800468a:	f003 0306 	and.w	r3, r3, #6
 800468e:	2b04      	cmp	r3, #4
 8004690:	bf02      	ittt	eq
 8004692:	68e5      	ldreq	r5, [r4, #12]
 8004694:	6833      	ldreq	r3, [r6, #0]
 8004696:	1aed      	subeq	r5, r5, r3
 8004698:	68a3      	ldr	r3, [r4, #8]
 800469a:	bf0c      	ite	eq
 800469c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046a0:	2500      	movne	r5, #0
 80046a2:	4293      	cmp	r3, r2
 80046a4:	bfc4      	itt	gt
 80046a6:	1a9b      	subgt	r3, r3, r2
 80046a8:	18ed      	addgt	r5, r5, r3
 80046aa:	2600      	movs	r6, #0
 80046ac:	341a      	adds	r4, #26
 80046ae:	42b5      	cmp	r5, r6
 80046b0:	d11a      	bne.n	80046e8 <_printf_common+0xc8>
 80046b2:	2000      	movs	r0, #0
 80046b4:	e008      	b.n	80046c8 <_printf_common+0xa8>
 80046b6:	2301      	movs	r3, #1
 80046b8:	4652      	mov	r2, sl
 80046ba:	4641      	mov	r1, r8
 80046bc:	4638      	mov	r0, r7
 80046be:	47c8      	blx	r9
 80046c0:	3001      	adds	r0, #1
 80046c2:	d103      	bne.n	80046cc <_printf_common+0xac>
 80046c4:	f04f 30ff 	mov.w	r0, #4294967295
 80046c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046cc:	3501      	adds	r5, #1
 80046ce:	e7c6      	b.n	800465e <_printf_common+0x3e>
 80046d0:	18e1      	adds	r1, r4, r3
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	2030      	movs	r0, #48	@ 0x30
 80046d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046da:	4422      	add	r2, r4
 80046dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046e4:	3302      	adds	r3, #2
 80046e6:	e7c7      	b.n	8004678 <_printf_common+0x58>
 80046e8:	2301      	movs	r3, #1
 80046ea:	4622      	mov	r2, r4
 80046ec:	4641      	mov	r1, r8
 80046ee:	4638      	mov	r0, r7
 80046f0:	47c8      	blx	r9
 80046f2:	3001      	adds	r0, #1
 80046f4:	d0e6      	beq.n	80046c4 <_printf_common+0xa4>
 80046f6:	3601      	adds	r6, #1
 80046f8:	e7d9      	b.n	80046ae <_printf_common+0x8e>
	...

080046fc <_printf_i>:
 80046fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004700:	7e0f      	ldrb	r7, [r1, #24]
 8004702:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004704:	2f78      	cmp	r7, #120	@ 0x78
 8004706:	4691      	mov	r9, r2
 8004708:	4680      	mov	r8, r0
 800470a:	460c      	mov	r4, r1
 800470c:	469a      	mov	sl, r3
 800470e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004712:	d807      	bhi.n	8004724 <_printf_i+0x28>
 8004714:	2f62      	cmp	r7, #98	@ 0x62
 8004716:	d80a      	bhi.n	800472e <_printf_i+0x32>
 8004718:	2f00      	cmp	r7, #0
 800471a:	f000 80d2 	beq.w	80048c2 <_printf_i+0x1c6>
 800471e:	2f58      	cmp	r7, #88	@ 0x58
 8004720:	f000 80b9 	beq.w	8004896 <_printf_i+0x19a>
 8004724:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004728:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800472c:	e03a      	b.n	80047a4 <_printf_i+0xa8>
 800472e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004732:	2b15      	cmp	r3, #21
 8004734:	d8f6      	bhi.n	8004724 <_printf_i+0x28>
 8004736:	a101      	add	r1, pc, #4	@ (adr r1, 800473c <_printf_i+0x40>)
 8004738:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800473c:	08004795 	.word	0x08004795
 8004740:	080047a9 	.word	0x080047a9
 8004744:	08004725 	.word	0x08004725
 8004748:	08004725 	.word	0x08004725
 800474c:	08004725 	.word	0x08004725
 8004750:	08004725 	.word	0x08004725
 8004754:	080047a9 	.word	0x080047a9
 8004758:	08004725 	.word	0x08004725
 800475c:	08004725 	.word	0x08004725
 8004760:	08004725 	.word	0x08004725
 8004764:	08004725 	.word	0x08004725
 8004768:	080048a9 	.word	0x080048a9
 800476c:	080047d3 	.word	0x080047d3
 8004770:	08004863 	.word	0x08004863
 8004774:	08004725 	.word	0x08004725
 8004778:	08004725 	.word	0x08004725
 800477c:	080048cb 	.word	0x080048cb
 8004780:	08004725 	.word	0x08004725
 8004784:	080047d3 	.word	0x080047d3
 8004788:	08004725 	.word	0x08004725
 800478c:	08004725 	.word	0x08004725
 8004790:	0800486b 	.word	0x0800486b
 8004794:	6833      	ldr	r3, [r6, #0]
 8004796:	1d1a      	adds	r2, r3, #4
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6032      	str	r2, [r6, #0]
 800479c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047a4:	2301      	movs	r3, #1
 80047a6:	e09d      	b.n	80048e4 <_printf_i+0x1e8>
 80047a8:	6833      	ldr	r3, [r6, #0]
 80047aa:	6820      	ldr	r0, [r4, #0]
 80047ac:	1d19      	adds	r1, r3, #4
 80047ae:	6031      	str	r1, [r6, #0]
 80047b0:	0606      	lsls	r6, r0, #24
 80047b2:	d501      	bpl.n	80047b8 <_printf_i+0xbc>
 80047b4:	681d      	ldr	r5, [r3, #0]
 80047b6:	e003      	b.n	80047c0 <_printf_i+0xc4>
 80047b8:	0645      	lsls	r5, r0, #25
 80047ba:	d5fb      	bpl.n	80047b4 <_printf_i+0xb8>
 80047bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047c0:	2d00      	cmp	r5, #0
 80047c2:	da03      	bge.n	80047cc <_printf_i+0xd0>
 80047c4:	232d      	movs	r3, #45	@ 0x2d
 80047c6:	426d      	negs	r5, r5
 80047c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047cc:	4859      	ldr	r0, [pc, #356]	@ (8004934 <_printf_i+0x238>)
 80047ce:	230a      	movs	r3, #10
 80047d0:	e011      	b.n	80047f6 <_printf_i+0xfa>
 80047d2:	6821      	ldr	r1, [r4, #0]
 80047d4:	6833      	ldr	r3, [r6, #0]
 80047d6:	0608      	lsls	r0, r1, #24
 80047d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80047dc:	d402      	bmi.n	80047e4 <_printf_i+0xe8>
 80047de:	0649      	lsls	r1, r1, #25
 80047e0:	bf48      	it	mi
 80047e2:	b2ad      	uxthmi	r5, r5
 80047e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80047e6:	4853      	ldr	r0, [pc, #332]	@ (8004934 <_printf_i+0x238>)
 80047e8:	6033      	str	r3, [r6, #0]
 80047ea:	bf14      	ite	ne
 80047ec:	230a      	movne	r3, #10
 80047ee:	2308      	moveq	r3, #8
 80047f0:	2100      	movs	r1, #0
 80047f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047f6:	6866      	ldr	r6, [r4, #4]
 80047f8:	60a6      	str	r6, [r4, #8]
 80047fa:	2e00      	cmp	r6, #0
 80047fc:	bfa2      	ittt	ge
 80047fe:	6821      	ldrge	r1, [r4, #0]
 8004800:	f021 0104 	bicge.w	r1, r1, #4
 8004804:	6021      	strge	r1, [r4, #0]
 8004806:	b90d      	cbnz	r5, 800480c <_printf_i+0x110>
 8004808:	2e00      	cmp	r6, #0
 800480a:	d04b      	beq.n	80048a4 <_printf_i+0x1a8>
 800480c:	4616      	mov	r6, r2
 800480e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004812:	fb03 5711 	mls	r7, r3, r1, r5
 8004816:	5dc7      	ldrb	r7, [r0, r7]
 8004818:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800481c:	462f      	mov	r7, r5
 800481e:	42bb      	cmp	r3, r7
 8004820:	460d      	mov	r5, r1
 8004822:	d9f4      	bls.n	800480e <_printf_i+0x112>
 8004824:	2b08      	cmp	r3, #8
 8004826:	d10b      	bne.n	8004840 <_printf_i+0x144>
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	07df      	lsls	r7, r3, #31
 800482c:	d508      	bpl.n	8004840 <_printf_i+0x144>
 800482e:	6923      	ldr	r3, [r4, #16]
 8004830:	6861      	ldr	r1, [r4, #4]
 8004832:	4299      	cmp	r1, r3
 8004834:	bfde      	ittt	le
 8004836:	2330      	movle	r3, #48	@ 0x30
 8004838:	f806 3c01 	strble.w	r3, [r6, #-1]
 800483c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004840:	1b92      	subs	r2, r2, r6
 8004842:	6122      	str	r2, [r4, #16]
 8004844:	f8cd a000 	str.w	sl, [sp]
 8004848:	464b      	mov	r3, r9
 800484a:	aa03      	add	r2, sp, #12
 800484c:	4621      	mov	r1, r4
 800484e:	4640      	mov	r0, r8
 8004850:	f7ff fee6 	bl	8004620 <_printf_common>
 8004854:	3001      	adds	r0, #1
 8004856:	d14a      	bne.n	80048ee <_printf_i+0x1f2>
 8004858:	f04f 30ff 	mov.w	r0, #4294967295
 800485c:	b004      	add	sp, #16
 800485e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	f043 0320 	orr.w	r3, r3, #32
 8004868:	6023      	str	r3, [r4, #0]
 800486a:	4833      	ldr	r0, [pc, #204]	@ (8004938 <_printf_i+0x23c>)
 800486c:	2778      	movs	r7, #120	@ 0x78
 800486e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	6831      	ldr	r1, [r6, #0]
 8004876:	061f      	lsls	r7, r3, #24
 8004878:	f851 5b04 	ldr.w	r5, [r1], #4
 800487c:	d402      	bmi.n	8004884 <_printf_i+0x188>
 800487e:	065f      	lsls	r7, r3, #25
 8004880:	bf48      	it	mi
 8004882:	b2ad      	uxthmi	r5, r5
 8004884:	6031      	str	r1, [r6, #0]
 8004886:	07d9      	lsls	r1, r3, #31
 8004888:	bf44      	itt	mi
 800488a:	f043 0320 	orrmi.w	r3, r3, #32
 800488e:	6023      	strmi	r3, [r4, #0]
 8004890:	b11d      	cbz	r5, 800489a <_printf_i+0x19e>
 8004892:	2310      	movs	r3, #16
 8004894:	e7ac      	b.n	80047f0 <_printf_i+0xf4>
 8004896:	4827      	ldr	r0, [pc, #156]	@ (8004934 <_printf_i+0x238>)
 8004898:	e7e9      	b.n	800486e <_printf_i+0x172>
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	f023 0320 	bic.w	r3, r3, #32
 80048a0:	6023      	str	r3, [r4, #0]
 80048a2:	e7f6      	b.n	8004892 <_printf_i+0x196>
 80048a4:	4616      	mov	r6, r2
 80048a6:	e7bd      	b.n	8004824 <_printf_i+0x128>
 80048a8:	6833      	ldr	r3, [r6, #0]
 80048aa:	6825      	ldr	r5, [r4, #0]
 80048ac:	6961      	ldr	r1, [r4, #20]
 80048ae:	1d18      	adds	r0, r3, #4
 80048b0:	6030      	str	r0, [r6, #0]
 80048b2:	062e      	lsls	r6, r5, #24
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	d501      	bpl.n	80048bc <_printf_i+0x1c0>
 80048b8:	6019      	str	r1, [r3, #0]
 80048ba:	e002      	b.n	80048c2 <_printf_i+0x1c6>
 80048bc:	0668      	lsls	r0, r5, #25
 80048be:	d5fb      	bpl.n	80048b8 <_printf_i+0x1bc>
 80048c0:	8019      	strh	r1, [r3, #0]
 80048c2:	2300      	movs	r3, #0
 80048c4:	6123      	str	r3, [r4, #16]
 80048c6:	4616      	mov	r6, r2
 80048c8:	e7bc      	b.n	8004844 <_printf_i+0x148>
 80048ca:	6833      	ldr	r3, [r6, #0]
 80048cc:	1d1a      	adds	r2, r3, #4
 80048ce:	6032      	str	r2, [r6, #0]
 80048d0:	681e      	ldr	r6, [r3, #0]
 80048d2:	6862      	ldr	r2, [r4, #4]
 80048d4:	2100      	movs	r1, #0
 80048d6:	4630      	mov	r0, r6
 80048d8:	f7fb fca2 	bl	8000220 <memchr>
 80048dc:	b108      	cbz	r0, 80048e2 <_printf_i+0x1e6>
 80048de:	1b80      	subs	r0, r0, r6
 80048e0:	6060      	str	r0, [r4, #4]
 80048e2:	6863      	ldr	r3, [r4, #4]
 80048e4:	6123      	str	r3, [r4, #16]
 80048e6:	2300      	movs	r3, #0
 80048e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048ec:	e7aa      	b.n	8004844 <_printf_i+0x148>
 80048ee:	6923      	ldr	r3, [r4, #16]
 80048f0:	4632      	mov	r2, r6
 80048f2:	4649      	mov	r1, r9
 80048f4:	4640      	mov	r0, r8
 80048f6:	47d0      	blx	sl
 80048f8:	3001      	adds	r0, #1
 80048fa:	d0ad      	beq.n	8004858 <_printf_i+0x15c>
 80048fc:	6823      	ldr	r3, [r4, #0]
 80048fe:	079b      	lsls	r3, r3, #30
 8004900:	d413      	bmi.n	800492a <_printf_i+0x22e>
 8004902:	68e0      	ldr	r0, [r4, #12]
 8004904:	9b03      	ldr	r3, [sp, #12]
 8004906:	4298      	cmp	r0, r3
 8004908:	bfb8      	it	lt
 800490a:	4618      	movlt	r0, r3
 800490c:	e7a6      	b.n	800485c <_printf_i+0x160>
 800490e:	2301      	movs	r3, #1
 8004910:	4632      	mov	r2, r6
 8004912:	4649      	mov	r1, r9
 8004914:	4640      	mov	r0, r8
 8004916:	47d0      	blx	sl
 8004918:	3001      	adds	r0, #1
 800491a:	d09d      	beq.n	8004858 <_printf_i+0x15c>
 800491c:	3501      	adds	r5, #1
 800491e:	68e3      	ldr	r3, [r4, #12]
 8004920:	9903      	ldr	r1, [sp, #12]
 8004922:	1a5b      	subs	r3, r3, r1
 8004924:	42ab      	cmp	r3, r5
 8004926:	dcf2      	bgt.n	800490e <_printf_i+0x212>
 8004928:	e7eb      	b.n	8004902 <_printf_i+0x206>
 800492a:	2500      	movs	r5, #0
 800492c:	f104 0619 	add.w	r6, r4, #25
 8004930:	e7f5      	b.n	800491e <_printf_i+0x222>
 8004932:	bf00      	nop
 8004934:	08004a61 	.word	0x08004a61
 8004938:	08004a72 	.word	0x08004a72

0800493c <memmove>:
 800493c:	4288      	cmp	r0, r1
 800493e:	b510      	push	{r4, lr}
 8004940:	eb01 0402 	add.w	r4, r1, r2
 8004944:	d902      	bls.n	800494c <memmove+0x10>
 8004946:	4284      	cmp	r4, r0
 8004948:	4623      	mov	r3, r4
 800494a:	d807      	bhi.n	800495c <memmove+0x20>
 800494c:	1e43      	subs	r3, r0, #1
 800494e:	42a1      	cmp	r1, r4
 8004950:	d008      	beq.n	8004964 <memmove+0x28>
 8004952:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004956:	f803 2f01 	strb.w	r2, [r3, #1]!
 800495a:	e7f8      	b.n	800494e <memmove+0x12>
 800495c:	4402      	add	r2, r0
 800495e:	4601      	mov	r1, r0
 8004960:	428a      	cmp	r2, r1
 8004962:	d100      	bne.n	8004966 <memmove+0x2a>
 8004964:	bd10      	pop	{r4, pc}
 8004966:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800496a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800496e:	e7f7      	b.n	8004960 <memmove+0x24>

08004970 <_sbrk_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	4d06      	ldr	r5, [pc, #24]	@ (800498c <_sbrk_r+0x1c>)
 8004974:	2300      	movs	r3, #0
 8004976:	4604      	mov	r4, r0
 8004978:	4608      	mov	r0, r1
 800497a:	602b      	str	r3, [r5, #0]
 800497c:	f7fc fb94 	bl	80010a8 <_sbrk>
 8004980:	1c43      	adds	r3, r0, #1
 8004982:	d102      	bne.n	800498a <_sbrk_r+0x1a>
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	b103      	cbz	r3, 800498a <_sbrk_r+0x1a>
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	bd38      	pop	{r3, r4, r5, pc}
 800498c:	20000360 	.word	0x20000360

08004990 <memcpy>:
 8004990:	440a      	add	r2, r1
 8004992:	4291      	cmp	r1, r2
 8004994:	f100 33ff 	add.w	r3, r0, #4294967295
 8004998:	d100      	bne.n	800499c <memcpy+0xc>
 800499a:	4770      	bx	lr
 800499c:	b510      	push	{r4, lr}
 800499e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049a6:	4291      	cmp	r1, r2
 80049a8:	d1f9      	bne.n	800499e <memcpy+0xe>
 80049aa:	bd10      	pop	{r4, pc}

080049ac <_realloc_r>:
 80049ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049b0:	4680      	mov	r8, r0
 80049b2:	4615      	mov	r5, r2
 80049b4:	460c      	mov	r4, r1
 80049b6:	b921      	cbnz	r1, 80049c2 <_realloc_r+0x16>
 80049b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049bc:	4611      	mov	r1, r2
 80049be:	f7ff bc4b 	b.w	8004258 <_malloc_r>
 80049c2:	b92a      	cbnz	r2, 80049d0 <_realloc_r+0x24>
 80049c4:	f7ff fbdc 	bl	8004180 <_free_r>
 80049c8:	2400      	movs	r4, #0
 80049ca:	4620      	mov	r0, r4
 80049cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049d0:	f000 f81a 	bl	8004a08 <_malloc_usable_size_r>
 80049d4:	4285      	cmp	r5, r0
 80049d6:	4606      	mov	r6, r0
 80049d8:	d802      	bhi.n	80049e0 <_realloc_r+0x34>
 80049da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80049de:	d8f4      	bhi.n	80049ca <_realloc_r+0x1e>
 80049e0:	4629      	mov	r1, r5
 80049e2:	4640      	mov	r0, r8
 80049e4:	f7ff fc38 	bl	8004258 <_malloc_r>
 80049e8:	4607      	mov	r7, r0
 80049ea:	2800      	cmp	r0, #0
 80049ec:	d0ec      	beq.n	80049c8 <_realloc_r+0x1c>
 80049ee:	42b5      	cmp	r5, r6
 80049f0:	462a      	mov	r2, r5
 80049f2:	4621      	mov	r1, r4
 80049f4:	bf28      	it	cs
 80049f6:	4632      	movcs	r2, r6
 80049f8:	f7ff ffca 	bl	8004990 <memcpy>
 80049fc:	4621      	mov	r1, r4
 80049fe:	4640      	mov	r0, r8
 8004a00:	f7ff fbbe 	bl	8004180 <_free_r>
 8004a04:	463c      	mov	r4, r7
 8004a06:	e7e0      	b.n	80049ca <_realloc_r+0x1e>

08004a08 <_malloc_usable_size_r>:
 8004a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a0c:	1f18      	subs	r0, r3, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	bfbc      	itt	lt
 8004a12:	580b      	ldrlt	r3, [r1, r0]
 8004a14:	18c0      	addlt	r0, r0, r3
 8004a16:	4770      	bx	lr

08004a18 <_init>:
 8004a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1a:	bf00      	nop
 8004a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1e:	bc08      	pop	{r3}
 8004a20:	469e      	mov	lr, r3
 8004a22:	4770      	bx	lr

08004a24 <_fini>:
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	bf00      	nop
 8004a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2a:	bc08      	pop	{r3}
 8004a2c:	469e      	mov	lr, r3
 8004a2e:	4770      	bx	lr
