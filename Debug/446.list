
446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046f8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080048c8  080048c8  000058c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800494c  0800494c  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  0800494c  0800494c  0000594c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004954  08004954  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004954  08004954  00005954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004958  08004958  00005958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800495c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000060  080049bc  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  080049bc  00006384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102ea  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d1  00000000  00000000  0001637a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00018750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b4e  00000000  00000000  000195d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002318  00000000  00000000  0001a11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011335  00000000  00000000  0001c436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3bbd  00000000  00000000  0002d76b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00101328  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004238  00000000  00000000  0010136c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001055a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080048b0 	.word	0x080048b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080048b0 	.word	0x080048b0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b08a      	sub	sp, #40	@ 0x28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
 80005bc:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80005be:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80005c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	lcd.en_pin = en_pin;
 80005c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80005ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
	lcd.en_port = en_port;
 80005cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80005ce:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80005d0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80005d2:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f80e 	bl	8000606 <Lcd_init>

	return lcd;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	461d      	mov	r5, r3
 80005ee:	f107 0410 	add.w	r4, r7, #16
 80005f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005fa:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80005fe:	68f8      	ldr	r0, [r7, #12]
 8000600:	3728      	adds	r7, #40	@ 0x28
 8000602:	46bd      	mov	sp, r7
 8000604:	bdb0      	pop	{r4, r5, r7, pc}

08000606 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	7d9b      	ldrb	r3, [r3, #22]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d10c      	bne.n	8000630 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000616:	2133      	movs	r1, #51	@ 0x33
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f000 f848 	bl	80006ae <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 800061e:	2132      	movs	r1, #50	@ 0x32
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f000 f844 	bl	80006ae <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000626:	2128      	movs	r1, #40	@ 0x28
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f000 f840 	bl	80006ae <lcd_write_command>
 800062e:	e003      	b.n	8000638 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000630:	2138      	movs	r1, #56	@ 0x38
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f000 f83b 	bl	80006ae <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000638:	2101      	movs	r1, #1
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f000 f837 	bl	80006ae <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000640:	210c      	movs	r1, #12
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 f833 	bl	80006ae <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000648:	2106      	movs	r1, #6
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f000 f82f 	bl	80006ae <lcd_write_command>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000662:	2300      	movs	r3, #0
 8000664:	73fb      	strb	r3, [r7, #15]
 8000666:	e00a      	b.n	800067e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f000 f849 	bl	800070a <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	3301      	adds	r3, #1
 800067c:	73fb      	strb	r3, [r7, #15]
 800067e:	7bfc      	ldrb	r4, [r7, #15]
 8000680:	6838      	ldr	r0, [r7, #0]
 8000682:	f7ff fdc5 	bl	8000210 <strlen>
 8000686:	4603      	mov	r3, r0
 8000688:	429c      	cmp	r4, r3
 800068a:	d3ed      	bcc.n	8000668 <Lcd_string+0x10>
	}
}
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	bd90      	pop	{r4, r7, pc}

08000696 <Lcd_clear>:
}

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 800069e:	2101      	movs	r1, #1
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 f804 	bl	80006ae <lcd_write_command>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
 80006b6:	460b      	mov	r3, r1
 80006b8:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6898      	ldr	r0, [r3, #8]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	899b      	ldrh	r3, [r3, #12]
 80006c2:	2200      	movs	r2, #0
 80006c4:	4619      	mov	r1, r3
 80006c6:	f001 fee1 	bl	800248c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	7d9b      	ldrb	r3, [r3, #22]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d111      	bne.n	80006f6 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80006d2:	78fb      	ldrb	r3, [r7, #3]
 80006d4:	091b      	lsrs	r3, r3, #4
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	2204      	movs	r2, #4
 80006da:	4619      	mov	r1, r3
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f000 f842 	bl	8000766 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	f003 030f 	and.w	r3, r3, #15
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2204      	movs	r2, #4
 80006ec:	4619      	mov	r1, r3
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f000 f839 	bl	8000766 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80006f4:	e005      	b.n	8000702 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80006f6:	78fb      	ldrb	r3, [r7, #3]
 80006f8:	2208      	movs	r2, #8
 80006fa:	4619      	mov	r1, r3
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f000 f832 	bl	8000766 <lcd_write>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
 8000712:	460b      	mov	r3, r1
 8000714:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6898      	ldr	r0, [r3, #8]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	899b      	ldrh	r3, [r3, #12]
 800071e:	2201      	movs	r2, #1
 8000720:	4619      	mov	r1, r3
 8000722:	f001 feb3 	bl	800248c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	7d9b      	ldrb	r3, [r3, #22]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d111      	bne.n	8000752 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	091b      	lsrs	r3, r3, #4
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2204      	movs	r2, #4
 8000736:	4619      	mov	r1, r3
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f000 f814 	bl	8000766 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800073e:	78fb      	ldrb	r3, [r7, #3]
 8000740:	f003 030f 	and.w	r3, r3, #15
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2204      	movs	r2, #4
 8000748:	4619      	mov	r1, r3
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f000 f80b 	bl	8000766 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000750:	e005      	b.n	800075e <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000752:	78fb      	ldrb	r3, [r7, #3]
 8000754:	2208      	movs	r2, #8
 8000756:	4619      	mov	r1, r3
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f000 f804 	bl	8000766 <lcd_write>
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b084      	sub	sp, #16
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
 800076e:	460b      	mov	r3, r1
 8000770:	70fb      	strb	r3, [r7, #3]
 8000772:	4613      	mov	r3, r2
 8000774:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000776:	2300      	movs	r3, #0
 8000778:	73fb      	strb	r3, [r7, #15]
 800077a:	e019      	b.n	80007b0 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	6818      	ldr	r0, [r3, #0]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685a      	ldr	r2, [r3, #4]
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	4413      	add	r3, r2
 8000792:	8819      	ldrh	r1, [r3, #0]
 8000794:	78fa      	ldrb	r2, [r7, #3]
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	fa42 f303 	asr.w	r3, r2, r3
 800079c:	b2db      	uxtb	r3, r3
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	461a      	mov	r2, r3
 80007a6:	f001 fe71 	bl	800248c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	3301      	adds	r3, #1
 80007ae:	73fb      	strb	r3, [r7, #15]
 80007b0:	7bfa      	ldrb	r2, [r7, #15]
 80007b2:	78bb      	ldrb	r3, [r7, #2]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d3e1      	bcc.n	800077c <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6918      	ldr	r0, [r3, #16]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	8a9b      	ldrh	r3, [r3, #20]
 80007c0:	2201      	movs	r2, #1
 80007c2:	4619      	mov	r1, r3
 80007c4:	f001 fe62 	bl	800248c <HAL_GPIO_WritePin>
	//DelayTime(1);
	HAL_Delay(1);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f000 fdfd 	bl	80013c8 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6918      	ldr	r0, [r3, #16]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	8a9b      	ldrh	r3, [r3, #20]
 80007d6:	2200      	movs	r2, #0
 80007d8:	4619      	mov	r1, r3
 80007da:	f001 fe57 	bl	800248c <HAL_GPIO_WritePin>
}
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b097      	sub	sp, #92	@ 0x5c
 80007ec:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f000 fd79 	bl	80012e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f877 	bl	80008e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f6:	f000 fa55 	bl	8000ca4 <MX_GPIO_Init>
  MX_TIM14_Init();
 80007fa:	f000 fa05 	bl	8000c08 <MX_TIM14_Init>
  MX_TIM11_Init();
 80007fe:	f000 f9df 	bl	8000bc0 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8000802:	f000 fa25 	bl	8000c50 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8000806:	f000 f9a5 	bl	8000b54 <MX_TIM7_Init>
  MX_CAN2_Init();
 800080a:	f000 f937 	bl	8000a7c <MX_CAN2_Init>
  MX_CAN1_Init();
 800080e:	f000 f8db 	bl	80009c8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  // timer is started
  HAL_TIM_Base_Start_IT(&htim14);
 8000812:	482c      	ldr	r0, [pc, #176]	@ (80008c4 <main+0xdc>)
 8000814:	f002 fcdc 	bl	80031d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000818:	482b      	ldr	r0, [pc, #172]	@ (80008c8 <main+0xe0>)
 800081a:	f002 fcd9 	bl	80031d0 <HAL_TIM_Base_Start_IT>




  Lcd_PortType ports[] = {
 800081e:	4b2b      	ldr	r3, [pc, #172]	@ (80008cc <main+0xe4>)
 8000820:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8000824:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000826:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port
  };

  Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 800082a:	4a29      	ldr	r2, [pc, #164]	@ (80008d0 <main+0xe8>)
 800082c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000830:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000834:	e883 0003 	stmia.w	r3, {r0, r1}

  Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8000838:	f107 0014 	add.w	r0, r7, #20
 800083c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000840:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000844:	2300      	movs	r3, #0
 8000846:	9303      	str	r3, [sp, #12]
 8000848:	2308      	movs	r3, #8
 800084a:	9302      	str	r3, [sp, #8]
 800084c:	4b21      	ldr	r3, [pc, #132]	@ (80008d4 <main+0xec>)
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	2308      	movs	r3, #8
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	4b20      	ldr	r3, [pc, #128]	@ (80008d8 <main+0xf0>)
 8000856:	f7ff feab 	bl	80005b0 <Lcd_create>
//  Lcd_int(&lcd, -500);

  // basic 16x2 test
  char buffer[16]; // Adjust size as needed

  HAL_Delay(1000);
 800085a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800085e:	f000 fdb3 	bl	80013c8 <HAL_Delay>
  for (int i = 0; i <= 100; i += 2) {
 8000862:	2300      	movs	r3, #0
 8000864:	647b      	str	r3, [r7, #68]	@ 0x44
 8000866:	e018      	b.n	800089a <main+0xb2>
      sprintf(buffer, "RPM: %d", i); // Convert integer to string
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800086c:	491b      	ldr	r1, [pc, #108]	@ (80008dc <main+0xf4>)
 800086e:	4618      	mov	r0, r3
 8000870:	f003 fb7e 	bl	8003f70 <siprintf>
      Lcd_clear(&lcd); // Clear the LCD if needed
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff0c 	bl	8000696 <Lcd_clear>
      Lcd_string(&lcd, buffer); // Display new value
 800087e:	1d3a      	adds	r2, r7, #4
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4611      	mov	r1, r2
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fee6 	bl	8000658 <Lcd_string>
      HAL_Delay(1000); // Delay to see the change
 800088c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000890:	f000 fd9a 	bl	80013c8 <HAL_Delay>
  for (int i = 0; i <= 100; i += 2) {
 8000894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000896:	3302      	adds	r3, #2
 8000898:	647b      	str	r3, [r7, #68]	@ 0x44
 800089a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800089c:	2b64      	cmp	r3, #100	@ 0x64
 800089e:	dde3      	ble.n	8000868 <main+0x80>
	  //static uint8_t warning_active = 0;

//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // Turn on decimal point


	  TxData[0] = 0x23;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <main+0xf8>)
 80008a2:	2223      	movs	r2, #35	@ 0x23
 80008a4:	701a      	strb	r2, [r3, #0]
      TxData[1] = 0x49;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <main+0xf8>)
 80008a8:	2249      	movs	r2, #73	@ 0x49
 80008aa:	705a      	strb	r2, [r3, #1]
      TxData[2] = 0x69;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <main+0xf8>)
 80008ae:	2269      	movs	r2, #105	@ 0x69
 80008b0:	709a      	strb	r2, [r3, #2]
      TxData[5] = 0x51;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	@ (80008e0 <main+0xf8>)
 80008b4:	2251      	movs	r2, #81	@ 0x51
 80008b6:	715a      	strb	r2, [r3, #5]
//
	// DisplayRxData(251);

//	 DisplayRxData(oil_temp);
//
	   HAL_Delay(150); // delay of 1ms
 80008b8:	2096      	movs	r0, #150	@ 0x96
 80008ba:	f000 fd85 	bl	80013c8 <HAL_Delay>
	  TxData[0] = 0x23;
 80008be:	bf00      	nop
 80008c0:	e7ee      	b.n	80008a0 <main+0xb8>
 80008c2:	bf00      	nop
 80008c4:	2000015c 	.word	0x2000015c
 80008c8:	200000cc 	.word	0x200000cc
 80008cc:	080048d8 	.word	0x080048d8
 80008d0:	080048e8 	.word	0x080048e8
 80008d4:	40020400 	.word	0x40020400
 80008d8:	40020800 	.word	0x40020800
 80008dc:	080048d0 	.word	0x080048d0
 80008e0:	20000220 	.word	0x20000220

080008e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b094      	sub	sp, #80	@ 0x50
 80008e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2234      	movs	r2, #52	@ 0x34
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f003 fb5c 	bl	8003fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000908:	2300      	movs	r3, #0
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	4b2c      	ldr	r3, [pc, #176]	@ (80009c0 <SystemClock_Config+0xdc>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000910:	4a2b      	ldr	r2, [pc, #172]	@ (80009c0 <SystemClock_Config+0xdc>)
 8000912:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000916:	6413      	str	r3, [r2, #64]	@ 0x40
 8000918:	4b29      	ldr	r3, [pc, #164]	@ (80009c0 <SystemClock_Config+0xdc>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000924:	2300      	movs	r3, #0
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	4b26      	ldr	r3, [pc, #152]	@ (80009c4 <SystemClock_Config+0xe0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a25      	ldr	r2, [pc, #148]	@ (80009c4 <SystemClock_Config+0xe0>)
 800092e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	4b23      	ldr	r3, [pc, #140]	@ (80009c4 <SystemClock_Config+0xe0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000940:	2302      	movs	r3, #2
 8000942:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000944:	2301      	movs	r3, #1
 8000946:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000948:	2310      	movs	r3, #16
 800094a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094c:	2302      	movs	r3, #2
 800094e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000950:	2300      	movs	r3, #0
 8000952:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000954:	2308      	movs	r3, #8
 8000956:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000958:	23b4      	movs	r3, #180	@ 0xb4
 800095a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800095c:	2302      	movs	r3, #2
 800095e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000960:	2302      	movs	r3, #2
 8000962:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000964:	2302      	movs	r3, #2
 8000966:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4618      	mov	r0, r3
 800096e:	f002 f941 	bl	8002bf4 <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000978:	f000 fa78 	bl	8000e6c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800097c:	f001 fda0 	bl	80024c0 <HAL_PWREx_EnableOverDrive>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000986:	f000 fa71 	bl	8000e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098a:	230f      	movs	r3, #15
 800098c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098e:	2302      	movs	r3, #2
 8000990:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000996:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800099a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800099c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	2105      	movs	r1, #5
 80009a8:	4618      	mov	r0, r3
 80009aa:	f001 fdd9 	bl	8002560 <HAL_RCC_ClockConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80009b4:	f000 fa5a 	bl	8000e6c <Error_Handler>
  }
}
 80009b8:	bf00      	nop
 80009ba:	3750      	adds	r7, #80	@ 0x50
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40007000 	.word	0x40007000

080009c8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	@ 0x28
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009ce:	4b29      	ldr	r3, [pc, #164]	@ (8000a74 <MX_CAN1_Init+0xac>)
 80009d0:	4a29      	ldr	r2, [pc, #164]	@ (8000a78 <MX_CAN1_Init+0xb0>)
 80009d2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80009d4:	4b27      	ldr	r3, [pc, #156]	@ (8000a74 <MX_CAN1_Init+0xac>)
 80009d6:	2209      	movs	r2, #9
 80009d8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009da:	4b26      	ldr	r3, [pc, #152]	@ (8000a74 <MX_CAN1_Init+0xac>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009e0:	4b24      	ldr	r3, [pc, #144]	@ (8000a74 <MX_CAN1_Init+0xac>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 80009e6:	4b23      	ldr	r3, [pc, #140]	@ (8000a74 <MX_CAN1_Init+0xac>)
 80009e8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009ec:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80009ee:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <MX_CAN1_Init+0xac>)
 80009f0:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80009f4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a74 <MX_CAN1_Init+0xac>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a74 <MX_CAN1_Init+0xac>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a02:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <MX_CAN1_Init+0xac>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a08:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <MX_CAN1_Init+0xac>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a0e:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <MX_CAN1_Init+0xac>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a14:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <MX_CAN1_Init+0xac>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a1a:	4816      	ldr	r0, [pc, #88]	@ (8000a74 <MX_CAN1_Init+0xac>)
 8000a1c:	f000 fcf8 	bl	8001410 <HAL_CAN_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000a26:	f000 fa21 	bl	8000e6c <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */

  	  	  	  CAN_FilterTypeDef  canonefilter;


    		  canonefilter.FilterBank = 1; //change to 1 if CAN stops working
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	617b      	str	r3, [r7, #20]
    		  canonefilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
    		  canonefilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a32:	2301      	movs	r3, #1
 8000a34:	61fb      	str	r3, [r7, #28]
    		  canonefilter.FilterIdHigh = 0x0000;
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
    		  canonefilter.FilterIdLow = 0x0000;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
    		  canonefilter.FilterMaskIdHigh = 0x0000;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
    		  canonefilter.FilterMaskIdLow = 0x0000;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
    		  canonefilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
    		  canonefilter.FilterActivation = CAN_FILTER_ENABLE;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	623b      	str	r3, [r7, #32]
    		  canonefilter.SlaveStartFilterBank = 1; // meaningless in our context
 8000a4e:	2301      	movs	r3, #1
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24


    		  	  HAL_CAN_ConfigFilter(&hcan1, &canonefilter);
 8000a52:	463b      	mov	r3, r7
 8000a54:	4619      	mov	r1, r3
 8000a56:	4807      	ldr	r0, [pc, #28]	@ (8000a74 <MX_CAN1_Init+0xac>)
 8000a58:	f000 fdd6 	bl	8001608 <HAL_CAN_ConfigFilter>
    		  	  HAL_CAN_Start(&hcan1);
 8000a5c:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_CAN1_Init+0xac>)
 8000a5e:	f000 feb3 	bl	80017c8 <HAL_CAN_Start>

    		  	  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // potentially not needed
 8000a62:	2102      	movs	r1, #2
 8000a64:	4803      	ldr	r0, [pc, #12]	@ (8000a74 <MX_CAN1_Init+0xac>)
 8000a66:	f001 f815 	bl	8001a94 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN1_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	@ 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000007c 	.word	0x2000007c
 8000a78:	40006400 	.word	0x40006400

08000a7c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	@ 0x28
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_Init 1 */



  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000a82:	4b31      	ldr	r3, [pc, #196]	@ (8000b48 <MX_CAN2_Init+0xcc>)
 8000a84:	4a31      	ldr	r2, [pc, #196]	@ (8000b4c <MX_CAN2_Init+0xd0>)
 8000a86:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8000a88:	4b2f      	ldr	r3, [pc, #188]	@ (8000b48 <MX_CAN2_Init+0xcc>)
 8000a8a:	2209      	movs	r2, #9
 8000a8c:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000a8e:	4b2e      	ldr	r3, [pc, #184]	@ (8000b48 <MX_CAN2_Init+0xcc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a94:	4b2c      	ldr	r3, [pc, #176]	@ (8000b48 <MX_CAN2_Init+0xcc>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b48 <MX_CAN2_Init+0xcc>)
 8000a9c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000aa0:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000aa2:	4b29      	ldr	r3, [pc, #164]	@ (8000b48 <MX_CAN2_Init+0xcc>)
 8000aa4:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000aa8:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000aaa:	4b27      	ldr	r3, [pc, #156]	@ (8000b48 <MX_CAN2_Init+0xcc>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000ab0:	4b25      	ldr	r3, [pc, #148]	@ (8000b48 <MX_CAN2_Init+0xcc>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000ab6:	4b24      	ldr	r3, [pc, #144]	@ (8000b48 <MX_CAN2_Init+0xcc>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000abc:	4b22      	ldr	r3, [pc, #136]	@ (8000b48 <MX_CAN2_Init+0xcc>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	@ (8000b48 <MX_CAN2_Init+0xcc>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b48 <MX_CAN2_Init+0xcc>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000ace:	481e      	ldr	r0, [pc, #120]	@ (8000b48 <MX_CAN2_Init+0xcc>)
 8000ad0:	f000 fc9e 	bl	8001410 <HAL_CAN_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000ada:	f000 f9c7 	bl	8000e6c <Error_Handler>
  /* USER CODE BEGIN CAN2_Init 2 */

  CAN_FilterTypeDef  canfilterconfig;


  		  canfilterconfig.FilterBank = 1; //change to 1 if CAN stops working
 8000ade:	2301      	movs	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
  		  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61bb      	str	r3, [r7, #24]
  		  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	61fb      	str	r3, [r7, #28]
  		  canfilterconfig.FilterIdHigh = 0x0000;
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
  		  canfilterconfig.FilterIdLow = 0x0000;
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
  		  canfilterconfig.FilterMaskIdHigh = 0x0000;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
  		  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  		  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  		  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000afe:	2301      	movs	r3, #1
 8000b00:	623b      	str	r3, [r7, #32]
  		  canfilterconfig.SlaveStartFilterBank = 14; // meaningless in our context
 8000b02:	230e      	movs	r3, #14
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24


  		  	  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8000b06:	463b      	mov	r3, r7
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480f      	ldr	r0, [pc, #60]	@ (8000b48 <MX_CAN2_Init+0xcc>)
 8000b0c:	f000 fd7c 	bl	8001608 <HAL_CAN_ConfigFilter>
  		  	  HAL_CAN_Start(&hcan2);
 8000b10:	480d      	ldr	r0, [pc, #52]	@ (8000b48 <MX_CAN2_Init+0xcc>)
 8000b12:	f000 fe59 	bl	80017c8 <HAL_CAN_Start>

  		  	  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000b16:	2102      	movs	r1, #2
 8000b18:	480b      	ldr	r0, [pc, #44]	@ (8000b48 <MX_CAN2_Init+0xcc>)
 8000b1a:	f000 ffbb 	bl	8001a94 <HAL_CAN_ActivateNotification>



  	  	    TxHeader.StdId = 0x0446;  // ID 2 (to match H7's filter)
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_CAN2_Init+0xd4>)
 8000b20:	f240 4246 	movw	r2, #1094	@ 0x446
 8000b24:	601a      	str	r2, [r3, #0]
 	        TxHeader.IDE = CAN_ID_STD;  // Standard ID
 8000b26:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <MX_CAN2_Init+0xd4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
 	        TxHeader.RTR = CAN_RTR_DATA;  // Data frame
 8000b2c:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <MX_CAN2_Init+0xd4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
 	        TxHeader.DLC = 8;  // Length of data (3 bytes)
 8000b32:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <MX_CAN2_Init+0xd4>)
 8000b34:	2208      	movs	r2, #8
 8000b36:	611a      	str	r2, [r3, #16]
 	        TxHeader.TransmitGlobalTime = DISABLE;
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <MX_CAN2_Init+0xd4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	751a      	strb	r2, [r3, #20]

  /* USER CODE END CAN2_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	3728      	adds	r7, #40	@ 0x28
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000a4 	.word	0x200000a4
 8000b4c:	40006800 	.word	0x40006800
 8000b50:	200001ec 	.word	0x200001ec

08000b54 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b62:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <MX_TIM7_Init+0x64>)
 8000b64:	4a15      	ldr	r2, [pc, #84]	@ (8000bbc <MX_TIM7_Init+0x68>)
 8000b66:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000 - 1;
 8000b68:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <MX_TIM7_Init+0x64>)
 8000b6a:	f242 3227 	movw	r2, #8999	@ 0x2327
 8000b6e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <MX_TIM7_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10 - 1;
 8000b76:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <MX_TIM7_Init+0x64>)
 8000b78:	2209      	movs	r2, #9
 8000b7a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <MX_TIM7_Init+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b82:	480d      	ldr	r0, [pc, #52]	@ (8000bb8 <MX_TIM7_Init+0x64>)
 8000b84:	f002 fad4 	bl	8003130 <HAL_TIM_Base_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000b8e:	f000 f96d 	bl	8000e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b92:	2300      	movs	r3, #0
 8000b94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4806      	ldr	r0, [pc, #24]	@ (8000bb8 <MX_TIM7_Init+0x64>)
 8000ba0:	f002 fd4a 	bl	8003638 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000baa:	f000 f95f 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000cc 	.word	0x200000cc
 8000bbc:	40001400 	.word	0x40001400

08000bc0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <MX_TIM11_Init+0x40>)
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c04 <MX_TIM11_Init+0x44>)
 8000bc8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 9000 - 1;
 8000bca:	4b0d      	ldr	r3, [pc, #52]	@ (8000c00 <MX_TIM11_Init+0x40>)
 8000bcc:	f242 3227 	movw	r2, #8999	@ 0x2327
 8000bd0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <MX_TIM11_Init+0x40>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535 - 1;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <MX_TIM11_Init+0x40>)
 8000bda:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000bde:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be0:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <MX_TIM11_Init+0x40>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <MX_TIM11_Init+0x40>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000bec:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <MX_TIM11_Init+0x40>)
 8000bee:	f002 fa9f 	bl	8003130 <HAL_TIM_Base_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8000bf8:	f000 f938 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000114 	.word	0x20000114
 8000c04:	40014800 	.word	0x40014800

08000c08 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_TIM14_Init+0x40>)
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c4c <MX_TIM14_Init+0x44>)
 8000c10:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 9000 - 1;
 8000c12:	4b0d      	ldr	r3, [pc, #52]	@ (8000c48 <MX_TIM14_Init+0x40>)
 8000c14:	f242 3227 	movw	r2, #8999	@ 0x2327
 8000c18:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <MX_TIM14_Init+0x40>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20 - 1;
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_TIM14_Init+0x40>)
 8000c22:	2213      	movs	r2, #19
 8000c24:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <MX_TIM14_Init+0x40>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_TIM14_Init+0x40>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_TIM14_Init+0x40>)
 8000c34:	f002 fa7c 	bl	8003130 <HAL_TIM_Base_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000c3e:	f000 f915 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000015c 	.word	0x2000015c
 8000c4c:	40002000 	.word	0x40002000

08000c50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c54:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	@ (8000ca0 <MX_USART2_UART_Init+0x50>)
 8000c58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c5a:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c5c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c74:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c76:	220c      	movs	r2, #12
 8000c78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c86:	4805      	ldr	r0, [pc, #20]	@ (8000c9c <MX_USART2_UART_Init+0x4c>)
 8000c88:	f002 fd66 	bl	8003758 <HAL_UART_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c92:	f000 f8eb 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200001a4 	.word	0x200001a4
 8000ca0:	40004400 	.word	0x40004400

08000ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	@ 0x28
 8000ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b44      	ldr	r3, [pc, #272]	@ (8000dd0 <MX_GPIO_Init+0x12c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	4a43      	ldr	r2, [pc, #268]	@ (8000dd0 <MX_GPIO_Init+0x12c>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cca:	4b41      	ldr	r3, [pc, #260]	@ (8000dd0 <MX_GPIO_Init+0x12c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b3d      	ldr	r3, [pc, #244]	@ (8000dd0 <MX_GPIO_Init+0x12c>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	4a3c      	ldr	r2, [pc, #240]	@ (8000dd0 <MX_GPIO_Init+0x12c>)
 8000ce0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce6:	4b3a      	ldr	r3, [pc, #232]	@ (8000dd0 <MX_GPIO_Init+0x12c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	4b36      	ldr	r3, [pc, #216]	@ (8000dd0 <MX_GPIO_Init+0x12c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a35      	ldr	r2, [pc, #212]	@ (8000dd0 <MX_GPIO_Init+0x12c>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b33      	ldr	r3, [pc, #204]	@ (8000dd0 <MX_GPIO_Init+0x12c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd0 <MX_GPIO_Init+0x12c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a2e      	ldr	r2, [pc, #184]	@ (8000dd0 <MX_GPIO_Init+0x12c>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd0 <MX_GPIO_Init+0x12c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f646 116f 	movw	r1, #26991	@ 0x696f
 8000d30:	4828      	ldr	r0, [pc, #160]	@ (8000dd4 <MX_GPIO_Init+0x130>)
 8000d32:	f001 fbab 	bl	800248c <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
 8000d36:	2200      	movs	r2, #0
 8000d38:	f240 7122 	movw	r1, #1826	@ 0x722
 8000d3c:	4826      	ldr	r0, [pc, #152]	@ (8000dd8 <MX_GPIO_Init+0x134>)
 8000d3e:	f001 fba5 	bl	800248c <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000d42:	2200      	movs	r2, #0
 8000d44:	f24e 7138 	movw	r1, #59192	@ 0xe738
 8000d48:	4824      	ldr	r0, [pc, #144]	@ (8000ddc <MX_GPIO_Init+0x138>)
 8000d4a:	f001 fb9f 	bl	800248c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC0 PC1
                           PC2 PC3 PC5 PC6
                           PC8 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1
 8000d4e:	f646 136f 	movw	r3, #26991	@ 0x696f
 8000d52:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	481b      	ldr	r0, [pc, #108]	@ (8000dd4 <MX_GPIO_Init+0x130>)
 8000d68:	f001 f9fc 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
 8000d6c:	f240 7322 	movw	r3, #1826	@ 0x722
 8000d70:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4814      	ldr	r0, [pc, #80]	@ (8000dd8 <MX_GPIO_Init+0x134>)
 8000d86:	f001 f9ed 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d8a:	2310      	movs	r3, #16
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	480c      	ldr	r0, [pc, #48]	@ (8000dd8 <MX_GPIO_Init+0x134>)
 8000da6:	f001 f9dd 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB13 PB14 PB15
                           PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000daa:	f24e 7338 	movw	r3, #59192	@ 0xe738
 8000dae:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4806      	ldr	r0, [pc, #24]	@ (8000ddc <MX_GPIO_Init+0x138>)
 8000dc4:	f001 f9ce 	bl	8002164 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	@ 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020800 	.word	0x40020800
 8000dd8:	40020000 	.word	0x40020000
 8000ddc:	40020400 	.word	0x40020400

08000de0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

	// changed values hcan->Instance = CAN2 and inside get hcan -> &hcan2

	if (hcan->Instance == CAN2) {
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a14      	ldr	r2, [pc, #80]	@ (8000e40 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d122      	bne.n	8000e38 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000df2:	4b14      	ldr	r3, [pc, #80]	@ (8000e44 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000df4:	4a14      	ldr	r2, [pc, #80]	@ (8000e48 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000df6:	2100      	movs	r1, #0
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 fd29 	bl	8001850 <HAL_CAN_GetRxMessage>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
  {

    /* Reception Error */
    Error_Handler();
 8000e04:	f000 f832 	bl	8000e6c <Error_Handler>
  	  }


  //if (RxHeader.StdId == 0x650) {

  	  batt_volt = RxData[5];
 8000e08:	4b0e      	ldr	r3, [pc, #56]	@ (8000e44 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000e0a:	795b      	ldrb	r3, [r3, #5]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000e10:	601a      	str	r2, [r3, #0]

	//  int voltage = RxData[5];  // Read voltage value
	  char uart_buffer[20];

	   //Format as decimal
	  unsigned int uart_buffer_size = sprintf(uart_buffer, "Voltage: %u\r\n", batt_volt);
 8000e12:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	490d      	ldr	r1, [pc, #52]	@ (8000e50 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f003 f8a7 	bl	8003f70 <siprintf>
 8000e22:	4603      	mov	r3, r0
 8000e24:	61fb      	str	r3, [r7, #28]


	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, uart_buffer_size, HAL_MAX_DELAY);
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	f107 0108 	add.w	r1, r7, #8
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	4808      	ldr	r0, [pc, #32]	@ (8000e54 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000e34:	f002 fce0 	bl	80037f8 <HAL_UART_Transmit>
  //}


	}

}
 8000e38:	bf00      	nop
 8000e3a:	3720      	adds	r7, #32
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40006800 	.word	0x40006800
 8000e44:	20000228 	.word	0x20000228
 8000e48:	20000204 	.word	0x20000204
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	080048f0 	.word	0x080048f0
 8000e54:	200001a4 	.word	0x200001a4

08000e58 <HAL_TIM_PeriodElapsedCallback>:


// The function below this is the timer interrupt callback (Code within the specific timers constantly executes)

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
//    if (htim == &htim7) {
////    	DisplayRxData(oil_temp);
//
//
//    }
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e70:	b672      	cpsid	i
}
 8000e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <Error_Handler+0x8>

08000e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <HAL_MspInit+0x4c>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e86:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec4 <HAL_MspInit+0x4c>)
 8000e88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <HAL_MspInit+0x4c>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <HAL_MspInit+0x4c>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	4a08      	ldr	r2, [pc, #32]	@ (8000ec4 <HAL_MspInit+0x4c>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_MspInit+0x4c>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	@ 0x30
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a4b      	ldr	r2, [pc, #300]	@ (8001014 <HAL_CAN_MspInit+0x14c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d13e      	bne.n	8000f68 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000eea:	4b4b      	ldr	r3, [pc, #300]	@ (8001018 <HAL_CAN_MspInit+0x150>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	4a49      	ldr	r2, [pc, #292]	@ (8001018 <HAL_CAN_MspInit+0x150>)
 8000ef2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000ef4:	4b48      	ldr	r3, [pc, #288]	@ (8001018 <HAL_CAN_MspInit+0x150>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d10d      	bne.n	8000f18 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000efc:	2300      	movs	r3, #0
 8000efe:	61bb      	str	r3, [r7, #24]
 8000f00:	4b46      	ldr	r3, [pc, #280]	@ (800101c <HAL_CAN_MspInit+0x154>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f04:	4a45      	ldr	r2, [pc, #276]	@ (800101c <HAL_CAN_MspInit+0x154>)
 8000f06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0c:	4b43      	ldr	r3, [pc, #268]	@ (800101c <HAL_CAN_MspInit+0x154>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f14:	61bb      	str	r3, [r7, #24]
 8000f16:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	4b3f      	ldr	r3, [pc, #252]	@ (800101c <HAL_CAN_MspInit+0x154>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f20:	4a3e      	ldr	r2, [pc, #248]	@ (800101c <HAL_CAN_MspInit+0x154>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f28:	4b3c      	ldr	r3, [pc, #240]	@ (800101c <HAL_CAN_MspInit+0x154>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f34:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f46:	2309      	movs	r3, #9
 8000f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4833      	ldr	r0, [pc, #204]	@ (8001020 <HAL_CAN_MspInit+0x158>)
 8000f52:	f001 f907 	bl	8002164 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2014      	movs	r0, #20
 8000f5c:	f001 f8cb 	bl	80020f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f60:	2014      	movs	r0, #20
 8000f62:	f001 f8e4 	bl	800212e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000f66:	e050      	b.n	800100a <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a2d      	ldr	r2, [pc, #180]	@ (8001024 <HAL_CAN_MspInit+0x15c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d14b      	bne.n	800100a <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b29      	ldr	r3, [pc, #164]	@ (800101c <HAL_CAN_MspInit+0x154>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	4a28      	ldr	r2, [pc, #160]	@ (800101c <HAL_CAN_MspInit+0x154>)
 8000f7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f82:	4b26      	ldr	r3, [pc, #152]	@ (800101c <HAL_CAN_MspInit+0x154>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000f8e:	4b22      	ldr	r3, [pc, #136]	@ (8001018 <HAL_CAN_MspInit+0x150>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	3301      	adds	r3, #1
 8000f94:	4a20      	ldr	r2, [pc, #128]	@ (8001018 <HAL_CAN_MspInit+0x150>)
 8000f96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000f98:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <HAL_CAN_MspInit+0x150>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d10d      	bne.n	8000fbc <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <HAL_CAN_MspInit+0x154>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800101c <HAL_CAN_MspInit+0x154>)
 8000faa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <HAL_CAN_MspInit+0x154>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	4b16      	ldr	r3, [pc, #88]	@ (800101c <HAL_CAN_MspInit+0x154>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc4:	4a15      	ldr	r2, [pc, #84]	@ (800101c <HAL_CAN_MspInit+0x154>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fcc:	4b13      	ldr	r3, [pc, #76]	@ (800101c <HAL_CAN_MspInit+0x154>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8000fd8:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8000fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000fea:	2309      	movs	r3, #9
 8000fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480c      	ldr	r0, [pc, #48]	@ (8001028 <HAL_CAN_MspInit+0x160>)
 8000ff6:	f001 f8b5 	bl	8002164 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2040      	movs	r0, #64	@ 0x40
 8001000:	f001 f879 	bl	80020f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001004:	2040      	movs	r0, #64	@ 0x40
 8001006:	f001 f892 	bl	800212e <HAL_NVIC_EnableIRQ>
}
 800100a:	bf00      	nop
 800100c:	3730      	adds	r7, #48	@ 0x30
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40006400 	.word	0x40006400
 8001018:	20000230 	.word	0x20000230
 800101c:	40023800 	.word	0x40023800
 8001020:	40020000 	.word	0x40020000
 8001024:	40006800 	.word	0x40006800
 8001028:	40020400 	.word	0x40020400

0800102c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a22      	ldr	r2, [pc, #136]	@ (80010c4 <HAL_TIM_Base_MspInit+0x98>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d10e      	bne.n	800105c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	4b21      	ldr	r3, [pc, #132]	@ (80010c8 <HAL_TIM_Base_MspInit+0x9c>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	4a20      	ldr	r2, [pc, #128]	@ (80010c8 <HAL_TIM_Base_MspInit+0x9c>)
 8001048:	f043 0320 	orr.w	r3, r3, #32
 800104c:	6413      	str	r3, [r2, #64]	@ 0x40
 800104e:	4b1e      	ldr	r3, [pc, #120]	@ (80010c8 <HAL_TIM_Base_MspInit+0x9c>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001052:	f003 0320 	and.w	r3, r3, #32
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800105a:	e02e      	b.n	80010ba <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM11)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a1a      	ldr	r2, [pc, #104]	@ (80010cc <HAL_TIM_Base_MspInit+0xa0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d10e      	bne.n	8001084 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <HAL_TIM_Base_MspInit+0x9c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106e:	4a16      	ldr	r2, [pc, #88]	@ (80010c8 <HAL_TIM_Base_MspInit+0x9c>)
 8001070:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001074:	6453      	str	r3, [r2, #68]	@ 0x44
 8001076:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <HAL_TIM_Base_MspInit+0x9c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]
}
 8001082:	e01a      	b.n	80010ba <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM14)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a11      	ldr	r2, [pc, #68]	@ (80010d0 <HAL_TIM_Base_MspInit+0xa4>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d115      	bne.n	80010ba <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b0d      	ldr	r3, [pc, #52]	@ (80010c8 <HAL_TIM_Base_MspInit+0x9c>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001096:	4a0c      	ldr	r2, [pc, #48]	@ (80010c8 <HAL_TIM_Base_MspInit+0x9c>)
 8001098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800109c:	6413      	str	r3, [r2, #64]	@ 0x40
 800109e:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <HAL_TIM_Base_MspInit+0x9c>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 2, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2102      	movs	r1, #2
 80010ae:	202d      	movs	r0, #45	@ 0x2d
 80010b0:	f001 f821 	bl	80020f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80010b4:	202d      	movs	r0, #45	@ 0x2d
 80010b6:	f001 f83a 	bl	800212e <HAL_NVIC_EnableIRQ>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40001400 	.word	0x40001400
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40014800 	.word	0x40014800
 80010d0:	40002000 	.word	0x40002000

080010d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	@ 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a19      	ldr	r2, [pc, #100]	@ (8001158 <HAL_UART_MspInit+0x84>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d12b      	bne.n	800114e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b18      	ldr	r3, [pc, #96]	@ (800115c <HAL_UART_MspInit+0x88>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fe:	4a17      	ldr	r2, [pc, #92]	@ (800115c <HAL_UART_MspInit+0x88>)
 8001100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001104:	6413      	str	r3, [r2, #64]	@ 0x40
 8001106:	4b15      	ldr	r3, [pc, #84]	@ (800115c <HAL_UART_MspInit+0x88>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <HAL_UART_MspInit+0x88>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a10      	ldr	r2, [pc, #64]	@ (800115c <HAL_UART_MspInit+0x88>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <HAL_UART_MspInit+0x88>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800112e:	230c      	movs	r3, #12
 8001130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800113e:	2307      	movs	r3, #7
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	@ (8001160 <HAL_UART_MspInit+0x8c>)
 800114a:	f001 f80b 	bl	8002164 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800114e:	bf00      	nop
 8001150:	3728      	adds	r7, #40	@ 0x28
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40004400 	.word	0x40004400
 800115c:	40023800 	.word	0x40023800
 8001160:	40020000 	.word	0x40020000

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <NMI_Handler+0x4>

0800116c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <MemManage_Handler+0x4>

0800117c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <BusFault_Handler+0x4>

08001184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <UsageFault_Handler+0x4>

0800118c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ba:	f000 f8e5 	bl	8001388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80011c8:	4802      	ldr	r0, [pc, #8]	@ (80011d4 <CAN1_RX0_IRQHandler+0x10>)
 80011ca:	f000 fc89 	bl	8001ae0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000007c 	.word	0x2000007c

080011d8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80011dc:	4802      	ldr	r0, [pc, #8]	@ (80011e8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80011de:	f002 f867 	bl	80032b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000015c 	.word	0x2000015c

080011ec <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80011f0:	4802      	ldr	r0, [pc, #8]	@ (80011fc <CAN2_RX0_IRQHandler+0x10>)
 80011f2:	f000 fc75 	bl	8001ae0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200000a4 	.word	0x200000a4

08001200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001208:	4a14      	ldr	r2, [pc, #80]	@ (800125c <_sbrk+0x5c>)
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <_sbrk+0x60>)
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001214:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <_sbrk+0x64>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d102      	bne.n	8001222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800121c:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <_sbrk+0x64>)
 800121e:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <_sbrk+0x68>)
 8001220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001222:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	429a      	cmp	r2, r3
 800122e:	d207      	bcs.n	8001240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001230:	f002 fec6 	bl	8003fc0 <__errno>
 8001234:	4603      	mov	r3, r0
 8001236:	220c      	movs	r2, #12
 8001238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	e009      	b.n	8001254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <_sbrk+0x64>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <_sbrk+0x64>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	4a05      	ldr	r2, [pc, #20]	@ (8001264 <_sbrk+0x64>)
 8001250:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001252:	68fb      	ldr	r3, [r7, #12]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20020000 	.word	0x20020000
 8001260:	00000400 	.word	0x00000400
 8001264:	20000234 	.word	0x20000234
 8001268:	20000388 	.word	0x20000388

0800126c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <SystemInit+0x20>)
 8001272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001276:	4a05      	ldr	r2, [pc, #20]	@ (800128c <SystemInit+0x20>)
 8001278:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800127c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001290:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001294:	f7ff ffea 	bl	800126c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800129a:	490d      	ldr	r1, [pc, #52]	@ (80012d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800129c:	4a0d      	ldr	r2, [pc, #52]	@ (80012d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012b0:	4c0a      	ldr	r4, [pc, #40]	@ (80012dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012be:	f002 fe85 	bl	8003fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012c2:	f7ff fa91 	bl	80007e8 <main>
  bx  lr    
 80012c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80012d4:	0800495c 	.word	0x0800495c
  ldr r2, =_sbss
 80012d8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80012dc:	20000384 	.word	0x20000384

080012e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e0:	e7fe      	b.n	80012e0 <ADC_IRQHandler>
	...

080012e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <HAL_Init+0x40>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001324 <HAL_Init+0x40>)
 80012ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <HAL_Init+0x40>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001324 <HAL_Init+0x40>)
 80012fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001300:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <HAL_Init+0x40>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a07      	ldr	r2, [pc, #28]	@ (8001324 <HAL_Init+0x40>)
 8001306:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800130a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130c:	2003      	movs	r0, #3
 800130e:	f000 fee7 	bl	80020e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001312:	200f      	movs	r0, #15
 8001314:	f000 f808 	bl	8001328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001318:	f7ff fdae 	bl	8000e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023c00 	.word	0x40023c00

08001328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001330:	4b12      	ldr	r3, [pc, #72]	@ (800137c <HAL_InitTick+0x54>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <HAL_InitTick+0x58>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800133e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001342:	fbb2 f3f3 	udiv	r3, r2, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f000 feff 	bl	800214a <HAL_SYSTICK_Config>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e00e      	b.n	8001374 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b0f      	cmp	r3, #15
 800135a:	d80a      	bhi.n	8001372 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800135c:	2200      	movs	r2, #0
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f000 fec7 	bl	80020f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001368:	4a06      	ldr	r2, [pc, #24]	@ (8001384 <HAL_InitTick+0x5c>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	e000      	b.n	8001374 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000004 	.word	0x20000004
 8001380:	2000000c 	.word	0x2000000c
 8001384:	20000008 	.word	0x20000008

08001388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <HAL_IncTick+0x20>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_IncTick+0x24>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4413      	add	r3, r2
 8001398:	4a04      	ldr	r2, [pc, #16]	@ (80013ac <HAL_IncTick+0x24>)
 800139a:	6013      	str	r3, [r2, #0]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	2000000c 	.word	0x2000000c
 80013ac:	20000238 	.word	0x20000238

080013b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return uwTick;
 80013b4:	4b03      	ldr	r3, [pc, #12]	@ (80013c4 <HAL_GetTick+0x14>)
 80013b6:	681b      	ldr	r3, [r3, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000238 	.word	0x20000238

080013c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d0:	f7ff ffee 	bl	80013b0 <HAL_GetTick>
 80013d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e0:	d005      	beq.n	80013ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <HAL_Delay+0x44>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4413      	add	r3, r2
 80013ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ee:	bf00      	nop
 80013f0:	f7ff ffde 	bl	80013b0 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d8f7      	bhi.n	80013f0 <HAL_Delay+0x28>
  {
  }
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000000c 	.word	0x2000000c

08001410 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e0ed      	b.n	80015fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d102      	bne.n	8001434 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff fd4a 	bl	8000ec8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f042 0201 	orr.w	r2, r2, #1
 8001442:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001444:	f7ff ffb4 	bl	80013b0 <HAL_GetTick>
 8001448:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800144a:	e012      	b.n	8001472 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800144c:	f7ff ffb0 	bl	80013b0 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b0a      	cmp	r3, #10
 8001458:	d90b      	bls.n	8001472 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2205      	movs	r2, #5
 800146a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e0c5      	b.n	80015fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0e5      	beq.n	800144c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0202 	bic.w	r2, r2, #2
 800148e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001490:	f7ff ff8e 	bl	80013b0 <HAL_GetTick>
 8001494:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001496:	e012      	b.n	80014be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001498:	f7ff ff8a 	bl	80013b0 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b0a      	cmp	r3, #10
 80014a4:	d90b      	bls.n	80014be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2205      	movs	r2, #5
 80014b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e09f      	b.n	80015fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1e5      	bne.n	8001498 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7e1b      	ldrb	r3, [r3, #24]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d108      	bne.n	80014e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	e007      	b.n	80014f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7e5b      	ldrb	r3, [r3, #25]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d108      	bne.n	8001510 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	e007      	b.n	8001520 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800151e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7e9b      	ldrb	r3, [r3, #26]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d108      	bne.n	800153a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 0220 	orr.w	r2, r2, #32
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	e007      	b.n	800154a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0220 	bic.w	r2, r2, #32
 8001548:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	7edb      	ldrb	r3, [r3, #27]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d108      	bne.n	8001564 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0210 	bic.w	r2, r2, #16
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	e007      	b.n	8001574 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0210 	orr.w	r2, r2, #16
 8001572:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7f1b      	ldrb	r3, [r3, #28]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d108      	bne.n	800158e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0208 	orr.w	r2, r2, #8
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	e007      	b.n	800159e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 0208 	bic.w	r2, r2, #8
 800159c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7f5b      	ldrb	r3, [r3, #29]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d108      	bne.n	80015b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 0204 	orr.w	r2, r2, #4
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	e007      	b.n	80015c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0204 	bic.w	r2, r2, #4
 80015c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	ea42 0103 	orr.w	r1, r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	1e5a      	subs	r2, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800161e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001620:	7cfb      	ldrb	r3, [r7, #19]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d003      	beq.n	800162e <HAL_CAN_ConfigFilter+0x26>
 8001626:	7cfb      	ldrb	r3, [r7, #19]
 8001628:	2b02      	cmp	r3, #2
 800162a:	f040 80be 	bne.w	80017aa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800162e:	4b65      	ldr	r3, [pc, #404]	@ (80017c4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001630:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001638:	f043 0201 	orr.w	r2, r3, #1
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001648:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	431a      	orrs	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	2201      	movs	r2, #1
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	401a      	ands	r2, r3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d123      	bne.n	80016d8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	43db      	mvns	r3, r3
 800169a:	401a      	ands	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	3248      	adds	r2, #72	@ 0x48
 80016b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016ce:	6979      	ldr	r1, [r7, #20]
 80016d0:	3348      	adds	r3, #72	@ 0x48
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	440b      	add	r3, r1
 80016d6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d122      	bne.n	8001726 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	431a      	orrs	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001700:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3248      	adds	r2, #72	@ 0x48
 8001706:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800171a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800171c:	6979      	ldr	r1, [r7, #20]
 800171e:	3348      	adds	r3, #72	@ 0x48
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	440b      	add	r3, r1
 8001724:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43db      	mvns	r3, r3
 8001738:	401a      	ands	r2, r3
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001740:	e007      	b.n	8001752 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	431a      	orrs	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d109      	bne.n	800176e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	43db      	mvns	r3, r3
 8001764:	401a      	ands	r2, r3
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800176c:	e007      	b.n	800177e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	431a      	orrs	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d107      	bne.n	8001796 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	431a      	orrs	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800179c:	f023 0201 	bic.w	r2, r3, #1
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e006      	b.n	80017b8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ae:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
  }
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	371c      	adds	r7, #28
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	40006400 	.word	0x40006400

080017c8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d12e      	bne.n	800183a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2202      	movs	r2, #2
 80017e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80017f4:	f7ff fddc 	bl	80013b0 <HAL_GetTick>
 80017f8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017fa:	e012      	b.n	8001822 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017fc:	f7ff fdd8 	bl	80013b0 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b0a      	cmp	r3, #10
 8001808:	d90b      	bls.n	8001822 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2205      	movs	r2, #5
 800181a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e012      	b.n	8001848 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1e5      	bne.n	80017fc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	e006      	b.n	8001848 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
  }
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001864:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001866:	7dfb      	ldrb	r3, [r7, #23]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d003      	beq.n	8001874 <HAL_CAN_GetRxMessage+0x24>
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	2b02      	cmp	r3, #2
 8001870:	f040 8103 	bne.w	8001a7a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10e      	bne.n	8001898 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d116      	bne.n	80018b6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0f7      	b.n	8001a88 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d107      	bne.n	80018b6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018aa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e0e8      	b.n	8001a88 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	331b      	adds	r3, #27
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	4413      	add	r3, r2
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0204 	and.w	r2, r3, #4
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10c      	bne.n	80018ee <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	331b      	adds	r3, #27
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	4413      	add	r3, r2
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	0d5b      	lsrs	r3, r3, #21
 80018e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	e00b      	b.n	8001906 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	331b      	adds	r3, #27
 80018f6:	011b      	lsls	r3, r3, #4
 80018f8:	4413      	add	r3, r2
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	08db      	lsrs	r3, r3, #3
 80018fe:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	331b      	adds	r3, #27
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	4413      	add	r3, r2
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0202 	and.w	r2, r3, #2
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	331b      	adds	r3, #27
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	4413      	add	r3, r2
 8001928:	3304      	adds	r3, #4
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2208      	movs	r2, #8
 8001938:	611a      	str	r2, [r3, #16]
 800193a:	e00b      	b.n	8001954 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	331b      	adds	r3, #27
 8001944:	011b      	lsls	r3, r3, #4
 8001946:	4413      	add	r3, r2
 8001948:	3304      	adds	r3, #4
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 020f 	and.w	r2, r3, #15
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	331b      	adds	r3, #27
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	4413      	add	r3, r2
 8001960:	3304      	adds	r3, #4
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	b2da      	uxtb	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	331b      	adds	r3, #27
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	4413      	add	r3, r2
 8001978:	3304      	adds	r3, #4
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	0c1b      	lsrs	r3, r3, #16
 800197e:	b29a      	uxth	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	4413      	add	r3, r2
 800198e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	4413      	add	r3, r2
 80019a4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	0a1a      	lsrs	r2, r3, #8
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	4413      	add	r3, r2
 80019be:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	0c1a      	lsrs	r2, r3, #16
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	3302      	adds	r3, #2
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	4413      	add	r3, r2
 80019d8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	0e1a      	lsrs	r2, r3, #24
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	3303      	adds	r3, #3
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	4413      	add	r3, r2
 80019f2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	3304      	adds	r3, #4
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	4413      	add	r3, r2
 8001a0a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	0a1a      	lsrs	r2, r3, #8
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	3305      	adds	r3, #5
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	4413      	add	r3, r2
 8001a24:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	0c1a      	lsrs	r2, r3, #16
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	3306      	adds	r3, #6
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	4413      	add	r3, r2
 8001a3e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	0e1a      	lsrs	r2, r3, #24
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	3307      	adds	r3, #7
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d108      	bne.n	8001a66 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0220 	orr.w	r2, r2, #32
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	e007      	b.n	8001a76 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0220 	orr.w	r2, r2, #32
 8001a74:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e006      	b.n	8001a88 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
  }
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	371c      	adds	r7, #28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aa4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d002      	beq.n	8001ab2 <HAL_CAN_ActivateNotification+0x1e>
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d109      	bne.n	8001ac6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6959      	ldr	r1, [r3, #20]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e006      	b.n	8001ad4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
  }
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	@ 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d07c      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d023      	beq.n	8001b78 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2201      	movs	r2, #1
 8001b36:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f983 	bl	8001e4e <HAL_CAN_TxMailbox0CompleteCallback>
 8001b48:	e016      	b.n	8001b78 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d004      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b56:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b5c:	e00c      	b.n	8001b78 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d004      	beq.n	8001b72 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b70:	e002      	b.n	8001b78 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f989 	bl	8001e8a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d024      	beq.n	8001bcc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b8a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f963 	bl	8001e62 <HAL_CAN_TxMailbox1CompleteCallback>
 8001b9c:	e016      	b.n	8001bcc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d004      	beq.n	8001bb2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001baa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bb0:	e00c      	b.n	8001bcc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d004      	beq.n	8001bc6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bc4:	e002      	b.n	8001bcc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f969 	bl	8001e9e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d024      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bde:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f943 	bl	8001e76 <HAL_CAN_TxMailbox2CompleteCallback>
 8001bf0:	e016      	b.n	8001c20 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d004      	beq.n	8001c06 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c04:	e00c      	b.n	8001c20 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d004      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c18:	e002      	b.n	8001c20 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f949 	bl	8001eb2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00c      	beq.n	8001c44 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f003 0310 	and.w	r3, r3, #16
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d007      	beq.n	8001c44 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2210      	movs	r2, #16
 8001c42:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00b      	beq.n	8001c66 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d006      	beq.n	8001c66 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2208      	movs	r2, #8
 8001c5e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f930 	bl	8001ec6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d009      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff f8ae 	bl	8000de0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00c      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d007      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c9e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2210      	movs	r2, #16
 8001ca6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ca8:	6a3b      	ldr	r3, [r7, #32]
 8001caa:	f003 0320 	and.w	r3, r3, #32
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00b      	beq.n	8001cca <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d006      	beq.n	8001cca <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2208      	movs	r2, #8
 8001cc2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f912 	bl	8001eee <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d009      	beq.n	8001ce8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f8f9 	bl	8001eda <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00b      	beq.n	8001d0a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	f003 0310 	and.w	r3, r3, #16
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d006      	beq.n	8001d0a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2210      	movs	r2, #16
 8001d02:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f8fc 	bl	8001f02 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00b      	beq.n	8001d2c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d006      	beq.n	8001d2c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2208      	movs	r2, #8
 8001d24:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f8f5 	bl	8001f16 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d07b      	beq.n	8001e2e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d072      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d008      	beq.n	8001d5c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d008      	beq.n	8001d78 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d72:	f043 0302 	orr.w	r3, r3, #2
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d008      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8e:	f043 0304 	orr.w	r3, r3, #4
 8001d92:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d043      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d03e      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dae:	2b60      	cmp	r3, #96	@ 0x60
 8001db0:	d02b      	beq.n	8001e0a <HAL_CAN_IRQHandler+0x32a>
 8001db2:	2b60      	cmp	r3, #96	@ 0x60
 8001db4:	d82e      	bhi.n	8001e14 <HAL_CAN_IRQHandler+0x334>
 8001db6:	2b50      	cmp	r3, #80	@ 0x50
 8001db8:	d022      	beq.n	8001e00 <HAL_CAN_IRQHandler+0x320>
 8001dba:	2b50      	cmp	r3, #80	@ 0x50
 8001dbc:	d82a      	bhi.n	8001e14 <HAL_CAN_IRQHandler+0x334>
 8001dbe:	2b40      	cmp	r3, #64	@ 0x40
 8001dc0:	d019      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x316>
 8001dc2:	2b40      	cmp	r3, #64	@ 0x40
 8001dc4:	d826      	bhi.n	8001e14 <HAL_CAN_IRQHandler+0x334>
 8001dc6:	2b30      	cmp	r3, #48	@ 0x30
 8001dc8:	d010      	beq.n	8001dec <HAL_CAN_IRQHandler+0x30c>
 8001dca:	2b30      	cmp	r3, #48	@ 0x30
 8001dcc:	d822      	bhi.n	8001e14 <HAL_CAN_IRQHandler+0x334>
 8001dce:	2b10      	cmp	r3, #16
 8001dd0:	d002      	beq.n	8001dd8 <HAL_CAN_IRQHandler+0x2f8>
 8001dd2:	2b20      	cmp	r3, #32
 8001dd4:	d005      	beq.n	8001de2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001dd6:	e01d      	b.n	8001e14 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dda:	f043 0308 	orr.w	r3, r3, #8
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001de0:	e019      	b.n	8001e16 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	f043 0310 	orr.w	r3, r3, #16
 8001de8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001dea:	e014      	b.n	8001e16 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dee:	f043 0320 	orr.w	r3, r3, #32
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001df4:	e00f      	b.n	8001e16 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001dfe:	e00a      	b.n	8001e16 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e06:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e08:	e005      	b.n	8001e16 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e10:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e12:	e000      	b.n	8001e16 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e14:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	699a      	ldr	r2, [r3, #24]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001e24:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f872 	bl	8001f2a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e46:	bf00      	nop
 8001e48:	3728      	adds	r7, #40	@ 0x28
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f50:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <__NVIC_SetPriorityGrouping+0x44>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f72:	4a04      	ldr	r2, [pc, #16]	@ (8001f84 <__NVIC_SetPriorityGrouping+0x44>)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	60d3      	str	r3, [r2, #12]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f8c:	4b04      	ldr	r3, [pc, #16]	@ (8001fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	0a1b      	lsrs	r3, r3, #8
 8001f92:	f003 0307 	and.w	r3, r3, #7
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	db0b      	blt.n	8001fce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	f003 021f 	and.w	r2, r3, #31
 8001fbc:	4907      	ldr	r1, [pc, #28]	@ (8001fdc <__NVIC_EnableIRQ+0x38>)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	e000e100 	.word	0xe000e100

08001fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	6039      	str	r1, [r7, #0]
 8001fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	db0a      	blt.n	800200a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	490c      	ldr	r1, [pc, #48]	@ (800202c <__NVIC_SetPriority+0x4c>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	0112      	lsls	r2, r2, #4
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	440b      	add	r3, r1
 8002004:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002008:	e00a      	b.n	8002020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	b2da      	uxtb	r2, r3
 800200e:	4908      	ldr	r1, [pc, #32]	@ (8002030 <__NVIC_SetPriority+0x50>)
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	3b04      	subs	r3, #4
 8002018:	0112      	lsls	r2, r2, #4
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	440b      	add	r3, r1
 800201e:	761a      	strb	r2, [r3, #24]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000e100 	.word	0xe000e100
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	@ 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f1c3 0307 	rsb	r3, r3, #7
 800204e:	2b04      	cmp	r3, #4
 8002050:	bf28      	it	cs
 8002052:	2304      	movcs	r3, #4
 8002054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3304      	adds	r3, #4
 800205a:	2b06      	cmp	r3, #6
 800205c:	d902      	bls.n	8002064 <NVIC_EncodePriority+0x30>
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3b03      	subs	r3, #3
 8002062:	e000      	b.n	8002066 <NVIC_EncodePriority+0x32>
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	f04f 32ff 	mov.w	r2, #4294967295
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43da      	mvns	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	401a      	ands	r2, r3
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800207c:	f04f 31ff 	mov.w	r1, #4294967295
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	fa01 f303 	lsl.w	r3, r1, r3
 8002086:	43d9      	mvns	r1, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	4313      	orrs	r3, r2
         );
}
 800208e:	4618      	mov	r0, r3
 8002090:	3724      	adds	r7, #36	@ 0x24
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020ac:	d301      	bcc.n	80020b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ae:	2301      	movs	r3, #1
 80020b0:	e00f      	b.n	80020d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b2:	4a0a      	ldr	r2, [pc, #40]	@ (80020dc <SysTick_Config+0x40>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ba:	210f      	movs	r1, #15
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295
 80020c0:	f7ff ff8e 	bl	8001fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c4:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <SysTick_Config+0x40>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ca:	4b04      	ldr	r3, [pc, #16]	@ (80020dc <SysTick_Config+0x40>)
 80020cc:	2207      	movs	r2, #7
 80020ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	e000e010 	.word	0xe000e010

080020e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ff29 	bl	8001f40 <__NVIC_SetPriorityGrouping>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002108:	f7ff ff3e 	bl	8001f88 <__NVIC_GetPriorityGrouping>
 800210c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	6978      	ldr	r0, [r7, #20]
 8002114:	f7ff ff8e 	bl	8002034 <NVIC_EncodePriority>
 8002118:	4602      	mov	r2, r0
 800211a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff5d 	bl	8001fe0 <__NVIC_SetPriority>
}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff31 	bl	8001fa4 <__NVIC_EnableIRQ>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ffa2 	bl	800209c <SysTick_Config>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	@ 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	e165      	b.n	800244c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002180:	2201      	movs	r2, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	429a      	cmp	r2, r3
 800219a:	f040 8154 	bne.w	8002446 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d005      	beq.n	80021b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d130      	bne.n	8002218 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	2203      	movs	r2, #3
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ec:	2201      	movs	r2, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 0201 	and.w	r2, r3, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	2b03      	cmp	r3, #3
 8002222:	d017      	beq.n	8002254 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d123      	bne.n	80022a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	08da      	lsrs	r2, r3, #3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3208      	adds	r2, #8
 8002268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	220f      	movs	r2, #15
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	08da      	lsrs	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3208      	adds	r2, #8
 80022a2:	69b9      	ldr	r1, [r7, #24]
 80022a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	2203      	movs	r2, #3
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0203 	and.w	r2, r3, #3
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80ae 	beq.w	8002446 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002464 <HAL_GPIO_Init+0x300>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f2:	4a5c      	ldr	r2, [pc, #368]	@ (8002464 <HAL_GPIO_Init+0x300>)
 80022f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022fa:	4b5a      	ldr	r3, [pc, #360]	@ (8002464 <HAL_GPIO_Init+0x300>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002306:	4a58      	ldr	r2, [pc, #352]	@ (8002468 <HAL_GPIO_Init+0x304>)
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	3302      	adds	r3, #2
 800230e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	220f      	movs	r2, #15
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4f      	ldr	r2, [pc, #316]	@ (800246c <HAL_GPIO_Init+0x308>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d025      	beq.n	800237e <HAL_GPIO_Init+0x21a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a4e      	ldr	r2, [pc, #312]	@ (8002470 <HAL_GPIO_Init+0x30c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d01f      	beq.n	800237a <HAL_GPIO_Init+0x216>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4d      	ldr	r2, [pc, #308]	@ (8002474 <HAL_GPIO_Init+0x310>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d019      	beq.n	8002376 <HAL_GPIO_Init+0x212>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a4c      	ldr	r2, [pc, #304]	@ (8002478 <HAL_GPIO_Init+0x314>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d013      	beq.n	8002372 <HAL_GPIO_Init+0x20e>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a4b      	ldr	r2, [pc, #300]	@ (800247c <HAL_GPIO_Init+0x318>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00d      	beq.n	800236e <HAL_GPIO_Init+0x20a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4a      	ldr	r2, [pc, #296]	@ (8002480 <HAL_GPIO_Init+0x31c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d007      	beq.n	800236a <HAL_GPIO_Init+0x206>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a49      	ldr	r2, [pc, #292]	@ (8002484 <HAL_GPIO_Init+0x320>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d101      	bne.n	8002366 <HAL_GPIO_Init+0x202>
 8002362:	2306      	movs	r3, #6
 8002364:	e00c      	b.n	8002380 <HAL_GPIO_Init+0x21c>
 8002366:	2307      	movs	r3, #7
 8002368:	e00a      	b.n	8002380 <HAL_GPIO_Init+0x21c>
 800236a:	2305      	movs	r3, #5
 800236c:	e008      	b.n	8002380 <HAL_GPIO_Init+0x21c>
 800236e:	2304      	movs	r3, #4
 8002370:	e006      	b.n	8002380 <HAL_GPIO_Init+0x21c>
 8002372:	2303      	movs	r3, #3
 8002374:	e004      	b.n	8002380 <HAL_GPIO_Init+0x21c>
 8002376:	2302      	movs	r3, #2
 8002378:	e002      	b.n	8002380 <HAL_GPIO_Init+0x21c>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <HAL_GPIO_Init+0x21c>
 800237e:	2300      	movs	r3, #0
 8002380:	69fa      	ldr	r2, [r7, #28]
 8002382:	f002 0203 	and.w	r2, r2, #3
 8002386:	0092      	lsls	r2, r2, #2
 8002388:	4093      	lsls	r3, r2
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002390:	4935      	ldr	r1, [pc, #212]	@ (8002468 <HAL_GPIO_Init+0x304>)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	089b      	lsrs	r3, r3, #2
 8002396:	3302      	adds	r3, #2
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800239e:	4b3a      	ldr	r3, [pc, #232]	@ (8002488 <HAL_GPIO_Init+0x324>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023c2:	4a31      	ldr	r2, [pc, #196]	@ (8002488 <HAL_GPIO_Init+0x324>)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002488 <HAL_GPIO_Init+0x324>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023ec:	4a26      	ldr	r2, [pc, #152]	@ (8002488 <HAL_GPIO_Init+0x324>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023f2:	4b25      	ldr	r3, [pc, #148]	@ (8002488 <HAL_GPIO_Init+0x324>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002416:	4a1c      	ldr	r2, [pc, #112]	@ (8002488 <HAL_GPIO_Init+0x324>)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800241c:	4b1a      	ldr	r3, [pc, #104]	@ (8002488 <HAL_GPIO_Init+0x324>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002440:	4a11      	ldr	r2, [pc, #68]	@ (8002488 <HAL_GPIO_Init+0x324>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3301      	adds	r3, #1
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	2b0f      	cmp	r3, #15
 8002450:	f67f ae96 	bls.w	8002180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002454:	bf00      	nop
 8002456:	bf00      	nop
 8002458:	3724      	adds	r7, #36	@ 0x24
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40023800 	.word	0x40023800
 8002468:	40013800 	.word	0x40013800
 800246c:	40020000 	.word	0x40020000
 8002470:	40020400 	.word	0x40020400
 8002474:	40020800 	.word	0x40020800
 8002478:	40020c00 	.word	0x40020c00
 800247c:	40021000 	.word	0x40021000
 8002480:	40021400 	.word	0x40021400
 8002484:	40021800 	.word	0x40021800
 8002488:	40013c00 	.word	0x40013c00

0800248c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	807b      	strh	r3, [r7, #2]
 8002498:	4613      	mov	r3, r2
 800249a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800249c:	787b      	ldrb	r3, [r7, #1]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024a2:	887a      	ldrh	r2, [r7, #2]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024a8:	e003      	b.n	80024b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024aa:	887b      	ldrh	r3, [r7, #2]
 80024ac:	041a      	lsls	r2, r3, #16
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	619a      	str	r2, [r3, #24]
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	603b      	str	r3, [r7, #0]
 80024ce:	4b20      	ldr	r3, [pc, #128]	@ (8002550 <HAL_PWREx_EnableOverDrive+0x90>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002550 <HAL_PWREx_EnableOverDrive+0x90>)
 80024d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024da:	4b1d      	ldr	r3, [pc, #116]	@ (8002550 <HAL_PWREx_EnableOverDrive+0x90>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e2:	603b      	str	r3, [r7, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80024e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002554 <HAL_PWREx_EnableOverDrive+0x94>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024ec:	f7fe ff60 	bl	80013b0 <HAL_GetTick>
 80024f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024f2:	e009      	b.n	8002508 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024f4:	f7fe ff5c 	bl	80013b0 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002502:	d901      	bls.n	8002508 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e01f      	b.n	8002548 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002508:	4b13      	ldr	r3, [pc, #76]	@ (8002558 <HAL_PWREx_EnableOverDrive+0x98>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002514:	d1ee      	bne.n	80024f4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002516:	4b11      	ldr	r3, [pc, #68]	@ (800255c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002518:	2201      	movs	r2, #1
 800251a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800251c:	f7fe ff48 	bl	80013b0 <HAL_GetTick>
 8002520:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002522:	e009      	b.n	8002538 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002524:	f7fe ff44 	bl	80013b0 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002532:	d901      	bls.n	8002538 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e007      	b.n	8002548 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002538:	4b07      	ldr	r3, [pc, #28]	@ (8002558 <HAL_PWREx_EnableOverDrive+0x98>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002540:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002544:	d1ee      	bne.n	8002524 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40023800 	.word	0x40023800
 8002554:	420e0040 	.word	0x420e0040
 8002558:	40007000 	.word	0x40007000
 800255c:	420e0044 	.word	0x420e0044

08002560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0cc      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002574:	4b68      	ldr	r3, [pc, #416]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d90c      	bls.n	800259c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b65      	ldr	r3, [pc, #404]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b63      	ldr	r3, [pc, #396]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0b8      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d020      	beq.n	80025ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b4:	4b59      	ldr	r3, [pc, #356]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	4a58      	ldr	r2, [pc, #352]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025cc:	4b53      	ldr	r3, [pc, #332]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	4a52      	ldr	r2, [pc, #328]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d8:	4b50      	ldr	r3, [pc, #320]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	494d      	ldr	r1, [pc, #308]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d044      	beq.n	8002680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d107      	bne.n	800260e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	4b47      	ldr	r3, [pc, #284]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d119      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e07f      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d003      	beq.n	800261e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800261a:	2b03      	cmp	r3, #3
 800261c:	d107      	bne.n	800262e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261e:	4b3f      	ldr	r3, [pc, #252]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e06f      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262e:	4b3b      	ldr	r3, [pc, #236]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e067      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263e:	4b37      	ldr	r3, [pc, #220]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f023 0203 	bic.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4934      	ldr	r1, [pc, #208]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	4313      	orrs	r3, r2
 800264e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002650:	f7fe feae 	bl	80013b0 <HAL_GetTick>
 8002654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	e00a      	b.n	800266e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002658:	f7fe feaa 	bl	80013b0 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e04f      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	4b2b      	ldr	r3, [pc, #172]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 020c 	and.w	r2, r3, #12
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	429a      	cmp	r2, r3
 800267e:	d1eb      	bne.n	8002658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002680:	4b25      	ldr	r3, [pc, #148]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d20c      	bcs.n	80026a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b22      	ldr	r3, [pc, #136]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002696:	4b20      	ldr	r3, [pc, #128]	@ (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e032      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b4:	4b19      	ldr	r3, [pc, #100]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4916      	ldr	r1, [pc, #88]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d009      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026d2:	4b12      	ldr	r3, [pc, #72]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	490e      	ldr	r1, [pc, #56]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026e6:	f000 f855 	bl	8002794 <HAL_RCC_GetSysClockFreq>
 80026ea:	4602      	mov	r2, r0
 80026ec:	4b0b      	ldr	r3, [pc, #44]	@ (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	490a      	ldr	r1, [pc, #40]	@ (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	5ccb      	ldrb	r3, [r1, r3]
 80026fa:	fa22 f303 	lsr.w	r3, r2, r3
 80026fe:	4a09      	ldr	r2, [pc, #36]	@ (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002702:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <HAL_RCC_ClockConfig+0x1c8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fe0e 	bl	8001328 <HAL_InitTick>

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023c00 	.word	0x40023c00
 800271c:	40023800 	.word	0x40023800
 8002720:	08004900 	.word	0x08004900
 8002724:	20000004 	.word	0x20000004
 8002728:	20000008 	.word	0x20000008

0800272c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002730:	4b03      	ldr	r3, [pc, #12]	@ (8002740 <HAL_RCC_GetHCLKFreq+0x14>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000004 	.word	0x20000004

08002744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002748:	f7ff fff0 	bl	800272c <HAL_RCC_GetHCLKFreq>
 800274c:	4602      	mov	r2, r0
 800274e:	4b05      	ldr	r3, [pc, #20]	@ (8002764 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	0a9b      	lsrs	r3, r3, #10
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	4903      	ldr	r1, [pc, #12]	@ (8002768 <HAL_RCC_GetPCLK1Freq+0x24>)
 800275a:	5ccb      	ldrb	r3, [r1, r3]
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40023800 	.word	0x40023800
 8002768:	08004910 	.word	0x08004910

0800276c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002770:	f7ff ffdc 	bl	800272c <HAL_RCC_GetHCLKFreq>
 8002774:	4602      	mov	r2, r0
 8002776:	4b05      	ldr	r3, [pc, #20]	@ (800278c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	0b5b      	lsrs	r3, r3, #13
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	4903      	ldr	r1, [pc, #12]	@ (8002790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002782:	5ccb      	ldrb	r3, [r1, r3]
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002788:	4618      	mov	r0, r3
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40023800 	.word	0x40023800
 8002790:	08004910 	.word	0x08004910

08002794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002798:	b0ae      	sub	sp, #184	@ 0xb8
 800279a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027ba:	4bcb      	ldr	r3, [pc, #812]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x354>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	2b0c      	cmp	r3, #12
 80027c4:	f200 8206 	bhi.w	8002bd4 <HAL_RCC_GetSysClockFreq+0x440>
 80027c8:	a201      	add	r2, pc, #4	@ (adr r2, 80027d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80027ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ce:	bf00      	nop
 80027d0:	08002805 	.word	0x08002805
 80027d4:	08002bd5 	.word	0x08002bd5
 80027d8:	08002bd5 	.word	0x08002bd5
 80027dc:	08002bd5 	.word	0x08002bd5
 80027e0:	0800280d 	.word	0x0800280d
 80027e4:	08002bd5 	.word	0x08002bd5
 80027e8:	08002bd5 	.word	0x08002bd5
 80027ec:	08002bd5 	.word	0x08002bd5
 80027f0:	08002815 	.word	0x08002815
 80027f4:	08002bd5 	.word	0x08002bd5
 80027f8:	08002bd5 	.word	0x08002bd5
 80027fc:	08002bd5 	.word	0x08002bd5
 8002800:	08002a05 	.word	0x08002a05
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002804:	4bb9      	ldr	r3, [pc, #740]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x358>)
 8002806:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800280a:	e1e7      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800280c:	4bb8      	ldr	r3, [pc, #736]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800280e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002812:	e1e3      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002814:	4bb4      	ldr	r3, [pc, #720]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800281c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002820:	4bb1      	ldr	r3, [pc, #708]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d071      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282c:	4bae      	ldr	r3, [pc, #696]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x354>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	099b      	lsrs	r3, r3, #6
 8002832:	2200      	movs	r2, #0
 8002834:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002838:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800283c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002844:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002848:	2300      	movs	r3, #0
 800284a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800284e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002852:	4622      	mov	r2, r4
 8002854:	462b      	mov	r3, r5
 8002856:	f04f 0000 	mov.w	r0, #0
 800285a:	f04f 0100 	mov.w	r1, #0
 800285e:	0159      	lsls	r1, r3, #5
 8002860:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002864:	0150      	lsls	r0, r2, #5
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4621      	mov	r1, r4
 800286c:	1a51      	subs	r1, r2, r1
 800286e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002870:	4629      	mov	r1, r5
 8002872:	eb63 0301 	sbc.w	r3, r3, r1
 8002876:	647b      	str	r3, [r7, #68]	@ 0x44
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002884:	4649      	mov	r1, r9
 8002886:	018b      	lsls	r3, r1, #6
 8002888:	4641      	mov	r1, r8
 800288a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800288e:	4641      	mov	r1, r8
 8002890:	018a      	lsls	r2, r1, #6
 8002892:	4641      	mov	r1, r8
 8002894:	1a51      	subs	r1, r2, r1
 8002896:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002898:	4649      	mov	r1, r9
 800289a:	eb63 0301 	sbc.w	r3, r3, r1
 800289e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80028ac:	4649      	mov	r1, r9
 80028ae:	00cb      	lsls	r3, r1, #3
 80028b0:	4641      	mov	r1, r8
 80028b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028b6:	4641      	mov	r1, r8
 80028b8:	00ca      	lsls	r2, r1, #3
 80028ba:	4610      	mov	r0, r2
 80028bc:	4619      	mov	r1, r3
 80028be:	4603      	mov	r3, r0
 80028c0:	4622      	mov	r2, r4
 80028c2:	189b      	adds	r3, r3, r2
 80028c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80028c6:	462b      	mov	r3, r5
 80028c8:	460a      	mov	r2, r1
 80028ca:	eb42 0303 	adc.w	r3, r2, r3
 80028ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028dc:	4629      	mov	r1, r5
 80028de:	024b      	lsls	r3, r1, #9
 80028e0:	4621      	mov	r1, r4
 80028e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028e6:	4621      	mov	r1, r4
 80028e8:	024a      	lsls	r2, r1, #9
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028f2:	2200      	movs	r2, #0
 80028f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002900:	f7fd fcde 	bl	80002c0 <__aeabi_uldivmod>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4613      	mov	r3, r2
 800290a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800290e:	e067      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002910:	4b75      	ldr	r3, [pc, #468]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	099b      	lsrs	r3, r3, #6
 8002916:	2200      	movs	r2, #0
 8002918:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800291c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002920:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002928:	67bb      	str	r3, [r7, #120]	@ 0x78
 800292a:	2300      	movs	r3, #0
 800292c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800292e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002932:	4622      	mov	r2, r4
 8002934:	462b      	mov	r3, r5
 8002936:	f04f 0000 	mov.w	r0, #0
 800293a:	f04f 0100 	mov.w	r1, #0
 800293e:	0159      	lsls	r1, r3, #5
 8002940:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002944:	0150      	lsls	r0, r2, #5
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4621      	mov	r1, r4
 800294c:	1a51      	subs	r1, r2, r1
 800294e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002950:	4629      	mov	r1, r5
 8002952:	eb63 0301 	sbc.w	r3, r3, r1
 8002956:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002964:	4649      	mov	r1, r9
 8002966:	018b      	lsls	r3, r1, #6
 8002968:	4641      	mov	r1, r8
 800296a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800296e:	4641      	mov	r1, r8
 8002970:	018a      	lsls	r2, r1, #6
 8002972:	4641      	mov	r1, r8
 8002974:	ebb2 0a01 	subs.w	sl, r2, r1
 8002978:	4649      	mov	r1, r9
 800297a:	eb63 0b01 	sbc.w	fp, r3, r1
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800298a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800298e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002992:	4692      	mov	sl, r2
 8002994:	469b      	mov	fp, r3
 8002996:	4623      	mov	r3, r4
 8002998:	eb1a 0303 	adds.w	r3, sl, r3
 800299c:	623b      	str	r3, [r7, #32]
 800299e:	462b      	mov	r3, r5
 80029a0:	eb4b 0303 	adc.w	r3, fp, r3
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80029b2:	4629      	mov	r1, r5
 80029b4:	028b      	lsls	r3, r1, #10
 80029b6:	4621      	mov	r1, r4
 80029b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029bc:	4621      	mov	r1, r4
 80029be:	028a      	lsls	r2, r1, #10
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029c8:	2200      	movs	r2, #0
 80029ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80029cc:	677a      	str	r2, [r7, #116]	@ 0x74
 80029ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80029d2:	f7fd fc75 	bl	80002c0 <__aeabi_uldivmod>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4613      	mov	r3, r2
 80029dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029e0:	4b41      	ldr	r3, [pc, #260]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x354>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	0c1b      	lsrs	r3, r3, #16
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	3301      	adds	r3, #1
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80029f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a02:	e0eb      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a04:	4b38      	ldr	r3, [pc, #224]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a10:	4b35      	ldr	r3, [pc, #212]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d06b      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a1c:	4b32      	ldr	r3, [pc, #200]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	099b      	lsrs	r3, r3, #6
 8002a22:	2200      	movs	r2, #0
 8002a24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a30:	2300      	movs	r3, #0
 8002a32:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a34:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002a38:	4622      	mov	r2, r4
 8002a3a:	462b      	mov	r3, r5
 8002a3c:	f04f 0000 	mov.w	r0, #0
 8002a40:	f04f 0100 	mov.w	r1, #0
 8002a44:	0159      	lsls	r1, r3, #5
 8002a46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a4a:	0150      	lsls	r0, r2, #5
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4621      	mov	r1, r4
 8002a52:	1a51      	subs	r1, r2, r1
 8002a54:	61b9      	str	r1, [r7, #24]
 8002a56:	4629      	mov	r1, r5
 8002a58:	eb63 0301 	sbc.w	r3, r3, r1
 8002a5c:	61fb      	str	r3, [r7, #28]
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a6a:	4659      	mov	r1, fp
 8002a6c:	018b      	lsls	r3, r1, #6
 8002a6e:	4651      	mov	r1, sl
 8002a70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a74:	4651      	mov	r1, sl
 8002a76:	018a      	lsls	r2, r1, #6
 8002a78:	4651      	mov	r1, sl
 8002a7a:	ebb2 0801 	subs.w	r8, r2, r1
 8002a7e:	4659      	mov	r1, fp
 8002a80:	eb63 0901 	sbc.w	r9, r3, r1
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a98:	4690      	mov	r8, r2
 8002a9a:	4699      	mov	r9, r3
 8002a9c:	4623      	mov	r3, r4
 8002a9e:	eb18 0303 	adds.w	r3, r8, r3
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	462b      	mov	r3, r5
 8002aa6:	eb49 0303 	adc.w	r3, r9, r3
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ab8:	4629      	mov	r1, r5
 8002aba:	024b      	lsls	r3, r1, #9
 8002abc:	4621      	mov	r1, r4
 8002abe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	024a      	lsls	r2, r1, #9
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ace:	2200      	movs	r2, #0
 8002ad0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ad2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002ad4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ad8:	f7fd fbf2 	bl	80002c0 <__aeabi_uldivmod>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ae6:	e065      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x420>
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	00f42400 	.word	0x00f42400
 8002af0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af4:	4b3d      	ldr	r3, [pc, #244]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x458>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	099b      	lsrs	r3, r3, #6
 8002afa:	2200      	movs	r2, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	4611      	mov	r1, r2
 8002b00:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b04:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b06:	2300      	movs	r3, #0
 8002b08:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b0a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002b0e:	4642      	mov	r2, r8
 8002b10:	464b      	mov	r3, r9
 8002b12:	f04f 0000 	mov.w	r0, #0
 8002b16:	f04f 0100 	mov.w	r1, #0
 8002b1a:	0159      	lsls	r1, r3, #5
 8002b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b20:	0150      	lsls	r0, r2, #5
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4641      	mov	r1, r8
 8002b28:	1a51      	subs	r1, r2, r1
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	4649      	mov	r1, r9
 8002b2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b40:	4659      	mov	r1, fp
 8002b42:	018b      	lsls	r3, r1, #6
 8002b44:	4651      	mov	r1, sl
 8002b46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b4a:	4651      	mov	r1, sl
 8002b4c:	018a      	lsls	r2, r1, #6
 8002b4e:	4651      	mov	r1, sl
 8002b50:	1a54      	subs	r4, r2, r1
 8002b52:	4659      	mov	r1, fp
 8002b54:	eb63 0501 	sbc.w	r5, r3, r1
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	00eb      	lsls	r3, r5, #3
 8002b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b66:	00e2      	lsls	r2, r4, #3
 8002b68:	4614      	mov	r4, r2
 8002b6a:	461d      	mov	r5, r3
 8002b6c:	4643      	mov	r3, r8
 8002b6e:	18e3      	adds	r3, r4, r3
 8002b70:	603b      	str	r3, [r7, #0]
 8002b72:	464b      	mov	r3, r9
 8002b74:	eb45 0303 	adc.w	r3, r5, r3
 8002b78:	607b      	str	r3, [r7, #4]
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b86:	4629      	mov	r1, r5
 8002b88:	028b      	lsls	r3, r1, #10
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b90:	4621      	mov	r1, r4
 8002b92:	028a      	lsls	r2, r1, #10
 8002b94:	4610      	mov	r0, r2
 8002b96:	4619      	mov	r1, r3
 8002b98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ba0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002ba2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ba6:	f7fd fb8b 	bl	80002c0 <__aeabi_uldivmod>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4613      	mov	r3, r2
 8002bb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x458>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	0f1b      	lsrs	r3, r3, #28
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002bc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bd2:	e003      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002bd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	37b8      	adds	r7, #184	@ 0xb8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	00f42400 	.word	0x00f42400

08002bf4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e28d      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 8083 	beq.w	8002d1a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c14:	4b94      	ldr	r3, [pc, #592]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 030c 	and.w	r3, r3, #12
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d019      	beq.n	8002c54 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c20:	4b91      	ldr	r3, [pc, #580]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d106      	bne.n	8002c3a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c2c:	4b8e      	ldr	r3, [pc, #568]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c38:	d00c      	beq.n	8002c54 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c3a:	4b8b      	ldr	r3, [pc, #556]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c42:	2b0c      	cmp	r3, #12
 8002c44:	d112      	bne.n	8002c6c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c46:	4b88      	ldr	r3, [pc, #544]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c52:	d10b      	bne.n	8002c6c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c54:	4b84      	ldr	r3, [pc, #528]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d05b      	beq.n	8002d18 <HAL_RCC_OscConfig+0x124>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d157      	bne.n	8002d18 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e25a      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c74:	d106      	bne.n	8002c84 <HAL_RCC_OscConfig+0x90>
 8002c76:	4b7c      	ldr	r3, [pc, #496]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a7b      	ldr	r2, [pc, #492]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e01d      	b.n	8002cc0 <HAL_RCC_OscConfig+0xcc>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0xb4>
 8002c8e:	4b76      	ldr	r3, [pc, #472]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a75      	ldr	r2, [pc, #468]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002c94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	4b73      	ldr	r3, [pc, #460]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a72      	ldr	r2, [pc, #456]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	e00b      	b.n	8002cc0 <HAL_RCC_OscConfig+0xcc>
 8002ca8:	4b6f      	ldr	r3, [pc, #444]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a6e      	ldr	r2, [pc, #440]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002cae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	4b6c      	ldr	r3, [pc, #432]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a6b      	ldr	r2, [pc, #428]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002cba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d013      	beq.n	8002cf0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fb72 	bl	80013b0 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd0:	f7fe fb6e 	bl	80013b0 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	@ 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e21f      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	4b61      	ldr	r3, [pc, #388]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0xdc>
 8002cee:	e014      	b.n	8002d1a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7fe fb5e 	bl	80013b0 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7fe fb5a 	bl	80013b0 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	@ 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e20b      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0a:	4b57      	ldr	r3, [pc, #348]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x104>
 8002d16:	e000      	b.n	8002d1a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d06f      	beq.n	8002e06 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d26:	4b50      	ldr	r3, [pc, #320]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d017      	beq.n	8002d62 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d32:	4b4d      	ldr	r3, [pc, #308]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
        || \
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d105      	bne.n	8002d4a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00b      	beq.n	8002d62 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d4a:	4b47      	ldr	r3, [pc, #284]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d52:	2b0c      	cmp	r3, #12
 8002d54:	d11c      	bne.n	8002d90 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d56:	4b44      	ldr	r3, [pc, #272]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d116      	bne.n	8002d90 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d62:	4b41      	ldr	r3, [pc, #260]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <HAL_RCC_OscConfig+0x186>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d001      	beq.n	8002d7a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e1d3      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4937      	ldr	r1, [pc, #220]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8e:	e03a      	b.n	8002e06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d020      	beq.n	8002dda <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d98:	4b34      	ldr	r3, [pc, #208]	@ (8002e6c <HAL_RCC_OscConfig+0x278>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9e:	f7fe fb07 	bl	80013b0 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da6:	f7fe fb03 	bl	80013b0 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e1b4      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc4:	4b28      	ldr	r3, [pc, #160]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4925      	ldr	r1, [pc, #148]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	600b      	str	r3, [r1, #0]
 8002dd8:	e015      	b.n	8002e06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dda:	4b24      	ldr	r3, [pc, #144]	@ (8002e6c <HAL_RCC_OscConfig+0x278>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7fe fae6 	bl	80013b0 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de8:	f7fe fae2 	bl	80013b0 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e193      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d036      	beq.n	8002e80 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d016      	beq.n	8002e48 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e1a:	4b15      	ldr	r3, [pc, #84]	@ (8002e70 <HAL_RCC_OscConfig+0x27c>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e20:	f7fe fac6 	bl	80013b0 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e28:	f7fe fac2 	bl	80013b0 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e173      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0x234>
 8002e46:	e01b      	b.n	8002e80 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e48:	4b09      	ldr	r3, [pc, #36]	@ (8002e70 <HAL_RCC_OscConfig+0x27c>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4e:	f7fe faaf 	bl	80013b0 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e54:	e00e      	b.n	8002e74 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e56:	f7fe faab 	bl	80013b0 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d907      	bls.n	8002e74 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e15c      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	42470000 	.word	0x42470000
 8002e70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e74:	4b8a      	ldr	r3, [pc, #552]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002e76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1ea      	bne.n	8002e56 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 8097 	beq.w	8002fbc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e92:	4b83      	ldr	r3, [pc, #524]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10f      	bne.n	8002ebe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	4b7f      	ldr	r3, [pc, #508]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea6:	4a7e      	ldr	r2, [pc, #504]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eae:	4b7c      	ldr	r3, [pc, #496]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebe:	4b79      	ldr	r3, [pc, #484]	@ (80030a4 <HAL_RCC_OscConfig+0x4b0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d118      	bne.n	8002efc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eca:	4b76      	ldr	r3, [pc, #472]	@ (80030a4 <HAL_RCC_OscConfig+0x4b0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a75      	ldr	r2, [pc, #468]	@ (80030a4 <HAL_RCC_OscConfig+0x4b0>)
 8002ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed6:	f7fe fa6b 	bl	80013b0 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ede:	f7fe fa67 	bl	80013b0 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e118      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef0:	4b6c      	ldr	r3, [pc, #432]	@ (80030a4 <HAL_RCC_OscConfig+0x4b0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d106      	bne.n	8002f12 <HAL_RCC_OscConfig+0x31e>
 8002f04:	4b66      	ldr	r3, [pc, #408]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f08:	4a65      	ldr	r2, [pc, #404]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f10:	e01c      	b.n	8002f4c <HAL_RCC_OscConfig+0x358>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b05      	cmp	r3, #5
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x340>
 8002f1a:	4b61      	ldr	r3, [pc, #388]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1e:	4a60      	ldr	r2, [pc, #384]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f26:	4b5e      	ldr	r3, [pc, #376]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2a:	4a5d      	ldr	r2, [pc, #372]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f32:	e00b      	b.n	8002f4c <HAL_RCC_OscConfig+0x358>
 8002f34:	4b5a      	ldr	r3, [pc, #360]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f38:	4a59      	ldr	r2, [pc, #356]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f3a:	f023 0301 	bic.w	r3, r3, #1
 8002f3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f40:	4b57      	ldr	r3, [pc, #348]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f44:	4a56      	ldr	r2, [pc, #344]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f46:	f023 0304 	bic.w	r3, r3, #4
 8002f4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d015      	beq.n	8002f80 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7fe fa2c 	bl	80013b0 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5c:	f7fe fa28 	bl	80013b0 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e0d7      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f72:	4b4b      	ldr	r3, [pc, #300]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0ee      	beq.n	8002f5c <HAL_RCC_OscConfig+0x368>
 8002f7e:	e014      	b.n	8002faa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f80:	f7fe fa16 	bl	80013b0 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f86:	e00a      	b.n	8002f9e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f88:	f7fe fa12 	bl	80013b0 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e0c1      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9e:	4b40      	ldr	r3, [pc, #256]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1ee      	bne.n	8002f88 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002faa:	7dfb      	ldrb	r3, [r7, #23]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d105      	bne.n	8002fbc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb0:	4b3b      	ldr	r3, [pc, #236]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb4:	4a3a      	ldr	r2, [pc, #232]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002fb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80ad 	beq.w	8003120 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fc6:	4b36      	ldr	r3, [pc, #216]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d060      	beq.n	8003094 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d145      	bne.n	8003066 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fda:	4b33      	ldr	r3, [pc, #204]	@ (80030a8 <HAL_RCC_OscConfig+0x4b4>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7fe f9e6 	bl	80013b0 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe8:	f7fe f9e2 	bl	80013b0 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e093      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffa:	4b29      	ldr	r3, [pc, #164]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69da      	ldr	r2, [r3, #28]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003014:	019b      	lsls	r3, r3, #6
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301c:	085b      	lsrs	r3, r3, #1
 800301e:	3b01      	subs	r3, #1
 8003020:	041b      	lsls	r3, r3, #16
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003028:	061b      	lsls	r3, r3, #24
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003030:	071b      	lsls	r3, r3, #28
 8003032:	491b      	ldr	r1, [pc, #108]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003038:	4b1b      	ldr	r3, [pc, #108]	@ (80030a8 <HAL_RCC_OscConfig+0x4b4>)
 800303a:	2201      	movs	r2, #1
 800303c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303e:	f7fe f9b7 	bl	80013b0 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003046:	f7fe f9b3 	bl	80013b0 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e064      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003058:	4b11      	ldr	r3, [pc, #68]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x452>
 8003064:	e05c      	b.n	8003120 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003066:	4b10      	ldr	r3, [pc, #64]	@ (80030a8 <HAL_RCC_OscConfig+0x4b4>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe f9a0 	bl	80013b0 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003074:	f7fe f99c 	bl	80013b0 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e04d      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003086:	4b06      	ldr	r3, [pc, #24]	@ (80030a0 <HAL_RCC_OscConfig+0x4ac>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x480>
 8003092:	e045      	b.n	8003120 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d107      	bne.n	80030ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e040      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40007000 	.word	0x40007000
 80030a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030ac:	4b1f      	ldr	r3, [pc, #124]	@ (800312c <HAL_RCC_OscConfig+0x538>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d030      	beq.n	800311c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d129      	bne.n	800311c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d122      	bne.n	800311c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030dc:	4013      	ands	r3, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d119      	bne.n	800311c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f2:	085b      	lsrs	r3, r3, #1
 80030f4:	3b01      	subs	r3, #1
 80030f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d10f      	bne.n	800311c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003106:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003108:	429a      	cmp	r2, r3
 800310a:	d107      	bne.n	800311c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800

08003130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e041      	b.n	80031c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fd ff68 	bl	800102c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3304      	adds	r3, #4
 800316c:	4619      	mov	r1, r3
 800316e:	4610      	mov	r0, r2
 8003170:	f000 f9b6 	bl	80034e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d001      	beq.n	80031e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e04e      	b.n	8003286 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a23      	ldr	r2, [pc, #140]	@ (8003294 <HAL_TIM_Base_Start_IT+0xc4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d022      	beq.n	8003250 <HAL_TIM_Base_Start_IT+0x80>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003212:	d01d      	beq.n	8003250 <HAL_TIM_Base_Start_IT+0x80>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a1f      	ldr	r2, [pc, #124]	@ (8003298 <HAL_TIM_Base_Start_IT+0xc8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d018      	beq.n	8003250 <HAL_TIM_Base_Start_IT+0x80>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1e      	ldr	r2, [pc, #120]	@ (800329c <HAL_TIM_Base_Start_IT+0xcc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d013      	beq.n	8003250 <HAL_TIM_Base_Start_IT+0x80>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a1c      	ldr	r2, [pc, #112]	@ (80032a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00e      	beq.n	8003250 <HAL_TIM_Base_Start_IT+0x80>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a1b      	ldr	r2, [pc, #108]	@ (80032a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d009      	beq.n	8003250 <HAL_TIM_Base_Start_IT+0x80>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a19      	ldr	r2, [pc, #100]	@ (80032a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d004      	beq.n	8003250 <HAL_TIM_Base_Start_IT+0x80>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a18      	ldr	r2, [pc, #96]	@ (80032ac <HAL_TIM_Base_Start_IT+0xdc>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d111      	bne.n	8003274 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2b06      	cmp	r3, #6
 8003260:	d010      	beq.n	8003284 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 0201 	orr.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003272:	e007      	b.n	8003284 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0201 	orr.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40010000 	.word	0x40010000
 8003298:	40000400 	.word	0x40000400
 800329c:	40000800 	.word	0x40000800
 80032a0:	40000c00 	.word	0x40000c00
 80032a4:	40010400 	.word	0x40010400
 80032a8:	40014000 	.word	0x40014000
 80032ac:	40001800 	.word	0x40001800

080032b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d020      	beq.n	8003314 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d01b      	beq.n	8003314 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0202 	mvn.w	r2, #2
 80032e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f8d2 	bl	80034a4 <HAL_TIM_IC_CaptureCallback>
 8003300:	e005      	b.n	800330e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f8c4 	bl	8003490 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f8d5 	bl	80034b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	d020      	beq.n	8003360 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01b      	beq.n	8003360 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0204 	mvn.w	r2, #4
 8003330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2202      	movs	r2, #2
 8003336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f8ac 	bl	80034a4 <HAL_TIM_IC_CaptureCallback>
 800334c:	e005      	b.n	800335a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f89e 	bl	8003490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f8af 	bl	80034b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d020      	beq.n	80033ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b00      	cmp	r3, #0
 8003372:	d01b      	beq.n	80033ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0208 	mvn.w	r2, #8
 800337c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2204      	movs	r2, #4
 8003382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f886 	bl	80034a4 <HAL_TIM_IC_CaptureCallback>
 8003398:	e005      	b.n	80033a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f878 	bl	8003490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f889 	bl	80034b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d020      	beq.n	80033f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01b      	beq.n	80033f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0210 	mvn.w	r2, #16
 80033c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2208      	movs	r2, #8
 80033ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f860 	bl	80034a4 <HAL_TIM_IC_CaptureCallback>
 80033e4:	e005      	b.n	80033f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f852 	bl	8003490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f863 	bl	80034b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00c      	beq.n	800341c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d007      	beq.n	800341c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f06f 0201 	mvn.w	r2, #1
 8003414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fd fd1e 	bl	8000e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00c      	beq.n	8003440 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800342c:	2b00      	cmp	r3, #0
 800342e:	d007      	beq.n	8003440 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f982 	bl	8003744 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00c      	beq.n	8003464 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003450:	2b00      	cmp	r3, #0
 8003452:	d007      	beq.n	8003464 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800345c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f834 	bl	80034cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00c      	beq.n	8003488 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d007      	beq.n	8003488 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0220 	mvn.w	r2, #32
 8003480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f954 	bl	8003730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003488:	bf00      	nop
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a46      	ldr	r2, [pc, #280]	@ (800360c <TIM_Base_SetConfig+0x12c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d013      	beq.n	8003520 <TIM_Base_SetConfig+0x40>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034fe:	d00f      	beq.n	8003520 <TIM_Base_SetConfig+0x40>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a43      	ldr	r2, [pc, #268]	@ (8003610 <TIM_Base_SetConfig+0x130>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00b      	beq.n	8003520 <TIM_Base_SetConfig+0x40>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a42      	ldr	r2, [pc, #264]	@ (8003614 <TIM_Base_SetConfig+0x134>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d007      	beq.n	8003520 <TIM_Base_SetConfig+0x40>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a41      	ldr	r2, [pc, #260]	@ (8003618 <TIM_Base_SetConfig+0x138>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d003      	beq.n	8003520 <TIM_Base_SetConfig+0x40>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a40      	ldr	r2, [pc, #256]	@ (800361c <TIM_Base_SetConfig+0x13c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d108      	bne.n	8003532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a35      	ldr	r2, [pc, #212]	@ (800360c <TIM_Base_SetConfig+0x12c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d02b      	beq.n	8003592 <TIM_Base_SetConfig+0xb2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003540:	d027      	beq.n	8003592 <TIM_Base_SetConfig+0xb2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a32      	ldr	r2, [pc, #200]	@ (8003610 <TIM_Base_SetConfig+0x130>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d023      	beq.n	8003592 <TIM_Base_SetConfig+0xb2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a31      	ldr	r2, [pc, #196]	@ (8003614 <TIM_Base_SetConfig+0x134>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d01f      	beq.n	8003592 <TIM_Base_SetConfig+0xb2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a30      	ldr	r2, [pc, #192]	@ (8003618 <TIM_Base_SetConfig+0x138>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d01b      	beq.n	8003592 <TIM_Base_SetConfig+0xb2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a2f      	ldr	r2, [pc, #188]	@ (800361c <TIM_Base_SetConfig+0x13c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d017      	beq.n	8003592 <TIM_Base_SetConfig+0xb2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a2e      	ldr	r2, [pc, #184]	@ (8003620 <TIM_Base_SetConfig+0x140>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d013      	beq.n	8003592 <TIM_Base_SetConfig+0xb2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a2d      	ldr	r2, [pc, #180]	@ (8003624 <TIM_Base_SetConfig+0x144>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00f      	beq.n	8003592 <TIM_Base_SetConfig+0xb2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a2c      	ldr	r2, [pc, #176]	@ (8003628 <TIM_Base_SetConfig+0x148>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00b      	beq.n	8003592 <TIM_Base_SetConfig+0xb2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a2b      	ldr	r2, [pc, #172]	@ (800362c <TIM_Base_SetConfig+0x14c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d007      	beq.n	8003592 <TIM_Base_SetConfig+0xb2>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a2a      	ldr	r2, [pc, #168]	@ (8003630 <TIM_Base_SetConfig+0x150>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d003      	beq.n	8003592 <TIM_Base_SetConfig+0xb2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a29      	ldr	r2, [pc, #164]	@ (8003634 <TIM_Base_SetConfig+0x154>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d108      	bne.n	80035a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a10      	ldr	r2, [pc, #64]	@ (800360c <TIM_Base_SetConfig+0x12c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d003      	beq.n	80035d8 <TIM_Base_SetConfig+0xf8>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a12      	ldr	r2, [pc, #72]	@ (800361c <TIM_Base_SetConfig+0x13c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d103      	bne.n	80035e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d105      	bne.n	80035fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f023 0201 	bic.w	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	611a      	str	r2, [r3, #16]
  }
}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40010000 	.word	0x40010000
 8003610:	40000400 	.word	0x40000400
 8003614:	40000800 	.word	0x40000800
 8003618:	40000c00 	.word	0x40000c00
 800361c:	40010400 	.word	0x40010400
 8003620:	40014000 	.word	0x40014000
 8003624:	40014400 	.word	0x40014400
 8003628:	40014800 	.word	0x40014800
 800362c:	40001800 	.word	0x40001800
 8003630:	40001c00 	.word	0x40001c00
 8003634:	40002000 	.word	0x40002000

08003638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800364c:	2302      	movs	r3, #2
 800364e:	e05a      	b.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a21      	ldr	r2, [pc, #132]	@ (8003714 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d022      	beq.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800369c:	d01d      	beq.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003718 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d018      	beq.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1b      	ldr	r2, [pc, #108]	@ (800371c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d013      	beq.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003720 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00e      	beq.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a18      	ldr	r2, [pc, #96]	@ (8003724 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d009      	beq.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a17      	ldr	r2, [pc, #92]	@ (8003728 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d004      	beq.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a15      	ldr	r2, [pc, #84]	@ (800372c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d10c      	bne.n	80036f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40010000 	.word	0x40010000
 8003718:	40000400 	.word	0x40000400
 800371c:	40000800 	.word	0x40000800
 8003720:	40000c00 	.word	0x40000c00
 8003724:	40010400 	.word	0x40010400
 8003728:	40014000 	.word	0x40014000
 800372c:	40001800 	.word	0x40001800

08003730 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e042      	b.n	80037f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fd fca8 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2224      	movs	r2, #36	@ 0x24
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800379a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f973 	bl	8003a88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695a      	ldr	r2, [r3, #20]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08a      	sub	sp, #40	@ 0x28
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	4613      	mov	r3, r2
 8003806:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b20      	cmp	r3, #32
 8003816:	d175      	bne.n	8003904 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_UART_Transmit+0x2c>
 800381e:	88fb      	ldrh	r3, [r7, #6]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e06e      	b.n	8003906 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2221      	movs	r2, #33	@ 0x21
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003836:	f7fd fdbb 	bl	80013b0 <HAL_GetTick>
 800383a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	88fa      	ldrh	r2, [r7, #6]
 8003840:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	88fa      	ldrh	r2, [r7, #6]
 8003846:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003850:	d108      	bne.n	8003864 <HAL_UART_Transmit+0x6c>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d104      	bne.n	8003864 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	e003      	b.n	800386c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003868:	2300      	movs	r3, #0
 800386a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800386c:	e02e      	b.n	80038cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2200      	movs	r2, #0
 8003876:	2180      	movs	r1, #128	@ 0x80
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f848 	bl	800390e <UART_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e03a      	b.n	8003906 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10b      	bne.n	80038ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	3302      	adds	r3, #2
 80038aa:	61bb      	str	r3, [r7, #24]
 80038ac:	e007      	b.n	80038be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	781a      	ldrb	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	3301      	adds	r3, #1
 80038bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1cb      	bne.n	800386e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2200      	movs	r2, #0
 80038de:	2140      	movs	r1, #64	@ 0x40
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 f814 	bl	800390e <UART_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e006      	b.n	8003906 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	e000      	b.n	8003906 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003904:	2302      	movs	r3, #2
  }
}
 8003906:	4618      	mov	r0, r3
 8003908:	3720      	adds	r7, #32
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b086      	sub	sp, #24
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	4613      	mov	r3, r2
 800391c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800391e:	e03b      	b.n	8003998 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003926:	d037      	beq.n	8003998 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003928:	f7fd fd42 	bl	80013b0 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	6a3a      	ldr	r2, [r7, #32]
 8003934:	429a      	cmp	r2, r3
 8003936:	d302      	bcc.n	800393e <UART_WaitOnFlagUntilTimeout+0x30>
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e03a      	b.n	80039b8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d023      	beq.n	8003998 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b80      	cmp	r3, #128	@ 0x80
 8003954:	d020      	beq.n	8003998 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b40      	cmp	r3, #64	@ 0x40
 800395a:	d01d      	beq.n	8003998 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b08      	cmp	r3, #8
 8003968:	d116      	bne.n	8003998 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 f81d 	bl	80039c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2208      	movs	r2, #8
 800398a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e00f      	b.n	80039b8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	4013      	ands	r3, r2
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	bf0c      	ite	eq
 80039a8:	2301      	moveq	r3, #1
 80039aa:	2300      	movne	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d0b4      	beq.n	8003920 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b095      	sub	sp, #84	@ 0x54
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	330c      	adds	r3, #12
 80039ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d2:	e853 3f00 	ldrex	r3, [r3]
 80039d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	330c      	adds	r3, #12
 80039e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039e8:	643a      	str	r2, [r7, #64]	@ 0x40
 80039ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039f0:	e841 2300 	strex	r3, r2, [r1]
 80039f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1e5      	bne.n	80039c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3314      	adds	r3, #20
 8003a02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	e853 3f00 	ldrex	r3, [r3]
 8003a0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f023 0301 	bic.w	r3, r3, #1
 8003a12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3314      	adds	r3, #20
 8003a1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a24:	e841 2300 	strex	r3, r2, [r1]
 8003a28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1e5      	bne.n	80039fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d119      	bne.n	8003a6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	330c      	adds	r3, #12
 8003a3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	e853 3f00 	ldrex	r3, [r3]
 8003a46:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f023 0310 	bic.w	r3, r3, #16
 8003a4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	330c      	adds	r3, #12
 8003a56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a58:	61ba      	str	r2, [r7, #24]
 8003a5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5c:	6979      	ldr	r1, [r7, #20]
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	e841 2300 	strex	r3, r2, [r1]
 8003a64:	613b      	str	r3, [r7, #16]
   return(result);
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1e5      	bne.n	8003a38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a7a:	bf00      	nop
 8003a7c:	3754      	adds	r7, #84	@ 0x54
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
	...

08003a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a8c:	b0c0      	sub	sp, #256	@ 0x100
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa4:	68d9      	ldr	r1, [r3, #12]
 8003aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	ea40 0301 	orr.w	r3, r0, r1
 8003ab0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ae0:	f021 010c 	bic.w	r1, r1, #12
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003aee:	430b      	orrs	r3, r1
 8003af0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b02:	6999      	ldr	r1, [r3, #24]
 8003b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	ea40 0301 	orr.w	r3, r0, r1
 8003b0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	4b8f      	ldr	r3, [pc, #572]	@ (8003d54 <UART_SetConfig+0x2cc>)
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d005      	beq.n	8003b28 <UART_SetConfig+0xa0>
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4b8d      	ldr	r3, [pc, #564]	@ (8003d58 <UART_SetConfig+0x2d0>)
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d104      	bne.n	8003b32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b28:	f7fe fe20 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 8003b2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b30:	e003      	b.n	8003b3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b32:	f7fe fe07 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 8003b36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b44:	f040 810c 	bne.w	8003d60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b5a:	4622      	mov	r2, r4
 8003b5c:	462b      	mov	r3, r5
 8003b5e:	1891      	adds	r1, r2, r2
 8003b60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b62:	415b      	adcs	r3, r3
 8003b64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	eb12 0801 	adds.w	r8, r2, r1
 8003b70:	4629      	mov	r1, r5
 8003b72:	eb43 0901 	adc.w	r9, r3, r1
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b8a:	4690      	mov	r8, r2
 8003b8c:	4699      	mov	r9, r3
 8003b8e:	4623      	mov	r3, r4
 8003b90:	eb18 0303 	adds.w	r3, r8, r3
 8003b94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b98:	462b      	mov	r3, r5
 8003b9a:	eb49 0303 	adc.w	r3, r9, r3
 8003b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003bb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	18db      	adds	r3, r3, r3
 8003bba:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	eb42 0303 	adc.w	r3, r2, r3
 8003bc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003bc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003bcc:	f7fc fb78 	bl	80002c0 <__aeabi_uldivmod>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4b61      	ldr	r3, [pc, #388]	@ (8003d5c <UART_SetConfig+0x2d4>)
 8003bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	011c      	lsls	r4, r3, #4
 8003bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003be2:	2200      	movs	r2, #0
 8003be4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003be8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003bec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003bf0:	4642      	mov	r2, r8
 8003bf2:	464b      	mov	r3, r9
 8003bf4:	1891      	adds	r1, r2, r2
 8003bf6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003bf8:	415b      	adcs	r3, r3
 8003bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c00:	4641      	mov	r1, r8
 8003c02:	eb12 0a01 	adds.w	sl, r2, r1
 8003c06:	4649      	mov	r1, r9
 8003c08:	eb43 0b01 	adc.w	fp, r3, r1
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c20:	4692      	mov	sl, r2
 8003c22:	469b      	mov	fp, r3
 8003c24:	4643      	mov	r3, r8
 8003c26:	eb1a 0303 	adds.w	r3, sl, r3
 8003c2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c2e:	464b      	mov	r3, r9
 8003c30:	eb4b 0303 	adc.w	r3, fp, r3
 8003c34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	18db      	adds	r3, r3, r3
 8003c50:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c52:	4613      	mov	r3, r2
 8003c54:	eb42 0303 	adc.w	r3, r2, r3
 8003c58:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c62:	f7fc fb2d 	bl	80002c0 <__aeabi_uldivmod>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d5c <UART_SetConfig+0x2d4>)
 8003c6e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	2264      	movs	r2, #100	@ 0x64
 8003c76:	fb02 f303 	mul.w	r3, r2, r3
 8003c7a:	1acb      	subs	r3, r1, r3
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c82:	4b36      	ldr	r3, [pc, #216]	@ (8003d5c <UART_SetConfig+0x2d4>)
 8003c84:	fba3 2302 	umull	r2, r3, r3, r2
 8003c88:	095b      	lsrs	r3, r3, #5
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c90:	441c      	add	r4, r3
 8003c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ca0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ca4:	4642      	mov	r2, r8
 8003ca6:	464b      	mov	r3, r9
 8003ca8:	1891      	adds	r1, r2, r2
 8003caa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003cac:	415b      	adcs	r3, r3
 8003cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003cb4:	4641      	mov	r1, r8
 8003cb6:	1851      	adds	r1, r2, r1
 8003cb8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003cba:	4649      	mov	r1, r9
 8003cbc:	414b      	adcs	r3, r1
 8003cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ccc:	4659      	mov	r1, fp
 8003cce:	00cb      	lsls	r3, r1, #3
 8003cd0:	4651      	mov	r1, sl
 8003cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cd6:	4651      	mov	r1, sl
 8003cd8:	00ca      	lsls	r2, r1, #3
 8003cda:	4610      	mov	r0, r2
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4603      	mov	r3, r0
 8003ce0:	4642      	mov	r2, r8
 8003ce2:	189b      	adds	r3, r3, r2
 8003ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ce8:	464b      	mov	r3, r9
 8003cea:	460a      	mov	r2, r1
 8003cec:	eb42 0303 	adc.w	r3, r2, r3
 8003cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d08:	460b      	mov	r3, r1
 8003d0a:	18db      	adds	r3, r3, r3
 8003d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d0e:	4613      	mov	r3, r2
 8003d10:	eb42 0303 	adc.w	r3, r2, r3
 8003d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d1e:	f7fc facf 	bl	80002c0 <__aeabi_uldivmod>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4b0d      	ldr	r3, [pc, #52]	@ (8003d5c <UART_SetConfig+0x2d4>)
 8003d28:	fba3 1302 	umull	r1, r3, r3, r2
 8003d2c:	095b      	lsrs	r3, r3, #5
 8003d2e:	2164      	movs	r1, #100	@ 0x64
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	3332      	adds	r3, #50	@ 0x32
 8003d3a:	4a08      	ldr	r2, [pc, #32]	@ (8003d5c <UART_SetConfig+0x2d4>)
 8003d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d40:	095b      	lsrs	r3, r3, #5
 8003d42:	f003 0207 	and.w	r2, r3, #7
 8003d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4422      	add	r2, r4
 8003d4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d50:	e106      	b.n	8003f60 <UART_SetConfig+0x4d8>
 8003d52:	bf00      	nop
 8003d54:	40011000 	.word	0x40011000
 8003d58:	40011400 	.word	0x40011400
 8003d5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d64:	2200      	movs	r2, #0
 8003d66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d72:	4642      	mov	r2, r8
 8003d74:	464b      	mov	r3, r9
 8003d76:	1891      	adds	r1, r2, r2
 8003d78:	6239      	str	r1, [r7, #32]
 8003d7a:	415b      	adcs	r3, r3
 8003d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d82:	4641      	mov	r1, r8
 8003d84:	1854      	adds	r4, r2, r1
 8003d86:	4649      	mov	r1, r9
 8003d88:	eb43 0501 	adc.w	r5, r3, r1
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	00eb      	lsls	r3, r5, #3
 8003d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d9a:	00e2      	lsls	r2, r4, #3
 8003d9c:	4614      	mov	r4, r2
 8003d9e:	461d      	mov	r5, r3
 8003da0:	4643      	mov	r3, r8
 8003da2:	18e3      	adds	r3, r4, r3
 8003da4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003da8:	464b      	mov	r3, r9
 8003daa:	eb45 0303 	adc.w	r3, r5, r3
 8003dae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dbe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003dce:	4629      	mov	r1, r5
 8003dd0:	008b      	lsls	r3, r1, #2
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dd8:	4621      	mov	r1, r4
 8003dda:	008a      	lsls	r2, r1, #2
 8003ddc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003de0:	f7fc fa6e 	bl	80002c0 <__aeabi_uldivmod>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4b60      	ldr	r3, [pc, #384]	@ (8003f6c <UART_SetConfig+0x4e4>)
 8003dea:	fba3 2302 	umull	r2, r3, r3, r2
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	011c      	lsls	r4, r3, #4
 8003df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003df6:	2200      	movs	r2, #0
 8003df8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003dfc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e04:	4642      	mov	r2, r8
 8003e06:	464b      	mov	r3, r9
 8003e08:	1891      	adds	r1, r2, r2
 8003e0a:	61b9      	str	r1, [r7, #24]
 8003e0c:	415b      	adcs	r3, r3
 8003e0e:	61fb      	str	r3, [r7, #28]
 8003e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e14:	4641      	mov	r1, r8
 8003e16:	1851      	adds	r1, r2, r1
 8003e18:	6139      	str	r1, [r7, #16]
 8003e1a:	4649      	mov	r1, r9
 8003e1c:	414b      	adcs	r3, r1
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e2c:	4659      	mov	r1, fp
 8003e2e:	00cb      	lsls	r3, r1, #3
 8003e30:	4651      	mov	r1, sl
 8003e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e36:	4651      	mov	r1, sl
 8003e38:	00ca      	lsls	r2, r1, #3
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4603      	mov	r3, r0
 8003e40:	4642      	mov	r2, r8
 8003e42:	189b      	adds	r3, r3, r2
 8003e44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e48:	464b      	mov	r3, r9
 8003e4a:	460a      	mov	r2, r1
 8003e4c:	eb42 0303 	adc.w	r3, r2, r3
 8003e50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e6c:	4649      	mov	r1, r9
 8003e6e:	008b      	lsls	r3, r1, #2
 8003e70:	4641      	mov	r1, r8
 8003e72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e76:	4641      	mov	r1, r8
 8003e78:	008a      	lsls	r2, r1, #2
 8003e7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e7e:	f7fc fa1f 	bl	80002c0 <__aeabi_uldivmod>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4611      	mov	r1, r2
 8003e88:	4b38      	ldr	r3, [pc, #224]	@ (8003f6c <UART_SetConfig+0x4e4>)
 8003e8a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	2264      	movs	r2, #100	@ 0x64
 8003e92:	fb02 f303 	mul.w	r3, r2, r3
 8003e96:	1acb      	subs	r3, r1, r3
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	3332      	adds	r3, #50	@ 0x32
 8003e9c:	4a33      	ldr	r2, [pc, #204]	@ (8003f6c <UART_SetConfig+0x4e4>)
 8003e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ea8:	441c      	add	r4, r3
 8003eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eae:	2200      	movs	r2, #0
 8003eb0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003eb2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003eb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003eb8:	4642      	mov	r2, r8
 8003eba:	464b      	mov	r3, r9
 8003ebc:	1891      	adds	r1, r2, r2
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	415b      	adcs	r3, r3
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ec8:	4641      	mov	r1, r8
 8003eca:	1851      	adds	r1, r2, r1
 8003ecc:	6039      	str	r1, [r7, #0]
 8003ece:	4649      	mov	r1, r9
 8003ed0:	414b      	adcs	r3, r1
 8003ed2:	607b      	str	r3, [r7, #4]
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ee0:	4659      	mov	r1, fp
 8003ee2:	00cb      	lsls	r3, r1, #3
 8003ee4:	4651      	mov	r1, sl
 8003ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eea:	4651      	mov	r1, sl
 8003eec:	00ca      	lsls	r2, r1, #3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	4642      	mov	r2, r8
 8003ef6:	189b      	adds	r3, r3, r2
 8003ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003efa:	464b      	mov	r3, r9
 8003efc:	460a      	mov	r2, r1
 8003efe:	eb42 0303 	adc.w	r3, r2, r3
 8003f02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f0e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f1c:	4649      	mov	r1, r9
 8003f1e:	008b      	lsls	r3, r1, #2
 8003f20:	4641      	mov	r1, r8
 8003f22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f26:	4641      	mov	r1, r8
 8003f28:	008a      	lsls	r2, r1, #2
 8003f2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f2e:	f7fc f9c7 	bl	80002c0 <__aeabi_uldivmod>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4b0d      	ldr	r3, [pc, #52]	@ (8003f6c <UART_SetConfig+0x4e4>)
 8003f38:	fba3 1302 	umull	r1, r3, r3, r2
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	2164      	movs	r1, #100	@ 0x64
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	3332      	adds	r3, #50	@ 0x32
 8003f4a:	4a08      	ldr	r2, [pc, #32]	@ (8003f6c <UART_SetConfig+0x4e4>)
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	f003 020f 	and.w	r2, r3, #15
 8003f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4422      	add	r2, r4
 8003f5e:	609a      	str	r2, [r3, #8]
}
 8003f60:	bf00      	nop
 8003f62:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f66:	46bd      	mov	sp, r7
 8003f68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f6c:	51eb851f 	.word	0x51eb851f

08003f70 <siprintf>:
 8003f70:	b40e      	push	{r1, r2, r3}
 8003f72:	b500      	push	{lr}
 8003f74:	b09c      	sub	sp, #112	@ 0x70
 8003f76:	ab1d      	add	r3, sp, #116	@ 0x74
 8003f78:	9002      	str	r0, [sp, #8]
 8003f7a:	9006      	str	r0, [sp, #24]
 8003f7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003f80:	4809      	ldr	r0, [pc, #36]	@ (8003fa8 <siprintf+0x38>)
 8003f82:	9107      	str	r1, [sp, #28]
 8003f84:	9104      	str	r1, [sp, #16]
 8003f86:	4909      	ldr	r1, [pc, #36]	@ (8003fac <siprintf+0x3c>)
 8003f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f8c:	9105      	str	r1, [sp, #20]
 8003f8e:	6800      	ldr	r0, [r0, #0]
 8003f90:	9301      	str	r3, [sp, #4]
 8003f92:	a902      	add	r1, sp, #8
 8003f94:	f000 f994 	bl	80042c0 <_svfiprintf_r>
 8003f98:	9b02      	ldr	r3, [sp, #8]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	b01c      	add	sp, #112	@ 0x70
 8003fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fa4:	b003      	add	sp, #12
 8003fa6:	4770      	bx	lr
 8003fa8:	20000010 	.word	0x20000010
 8003fac:	ffff0208 	.word	0xffff0208

08003fb0 <memset>:
 8003fb0:	4402      	add	r2, r0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d100      	bne.n	8003fba <memset+0xa>
 8003fb8:	4770      	bx	lr
 8003fba:	f803 1b01 	strb.w	r1, [r3], #1
 8003fbe:	e7f9      	b.n	8003fb4 <memset+0x4>

08003fc0 <__errno>:
 8003fc0:	4b01      	ldr	r3, [pc, #4]	@ (8003fc8 <__errno+0x8>)
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	20000010 	.word	0x20000010

08003fcc <__libc_init_array>:
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	4d0d      	ldr	r5, [pc, #52]	@ (8004004 <__libc_init_array+0x38>)
 8003fd0:	4c0d      	ldr	r4, [pc, #52]	@ (8004008 <__libc_init_array+0x3c>)
 8003fd2:	1b64      	subs	r4, r4, r5
 8003fd4:	10a4      	asrs	r4, r4, #2
 8003fd6:	2600      	movs	r6, #0
 8003fd8:	42a6      	cmp	r6, r4
 8003fda:	d109      	bne.n	8003ff0 <__libc_init_array+0x24>
 8003fdc:	4d0b      	ldr	r5, [pc, #44]	@ (800400c <__libc_init_array+0x40>)
 8003fde:	4c0c      	ldr	r4, [pc, #48]	@ (8004010 <__libc_init_array+0x44>)
 8003fe0:	f000 fc66 	bl	80048b0 <_init>
 8003fe4:	1b64      	subs	r4, r4, r5
 8003fe6:	10a4      	asrs	r4, r4, #2
 8003fe8:	2600      	movs	r6, #0
 8003fea:	42a6      	cmp	r6, r4
 8003fec:	d105      	bne.n	8003ffa <__libc_init_array+0x2e>
 8003fee:	bd70      	pop	{r4, r5, r6, pc}
 8003ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ff4:	4798      	blx	r3
 8003ff6:	3601      	adds	r6, #1
 8003ff8:	e7ee      	b.n	8003fd8 <__libc_init_array+0xc>
 8003ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ffe:	4798      	blx	r3
 8004000:	3601      	adds	r6, #1
 8004002:	e7f2      	b.n	8003fea <__libc_init_array+0x1e>
 8004004:	08004954 	.word	0x08004954
 8004008:	08004954 	.word	0x08004954
 800400c:	08004954 	.word	0x08004954
 8004010:	08004958 	.word	0x08004958

08004014 <__retarget_lock_acquire_recursive>:
 8004014:	4770      	bx	lr

08004016 <__retarget_lock_release_recursive>:
 8004016:	4770      	bx	lr

08004018 <_free_r>:
 8004018:	b538      	push	{r3, r4, r5, lr}
 800401a:	4605      	mov	r5, r0
 800401c:	2900      	cmp	r1, #0
 800401e:	d041      	beq.n	80040a4 <_free_r+0x8c>
 8004020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004024:	1f0c      	subs	r4, r1, #4
 8004026:	2b00      	cmp	r3, #0
 8004028:	bfb8      	it	lt
 800402a:	18e4      	addlt	r4, r4, r3
 800402c:	f000 f8e0 	bl	80041f0 <__malloc_lock>
 8004030:	4a1d      	ldr	r2, [pc, #116]	@ (80040a8 <_free_r+0x90>)
 8004032:	6813      	ldr	r3, [r2, #0]
 8004034:	b933      	cbnz	r3, 8004044 <_free_r+0x2c>
 8004036:	6063      	str	r3, [r4, #4]
 8004038:	6014      	str	r4, [r2, #0]
 800403a:	4628      	mov	r0, r5
 800403c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004040:	f000 b8dc 	b.w	80041fc <__malloc_unlock>
 8004044:	42a3      	cmp	r3, r4
 8004046:	d908      	bls.n	800405a <_free_r+0x42>
 8004048:	6820      	ldr	r0, [r4, #0]
 800404a:	1821      	adds	r1, r4, r0
 800404c:	428b      	cmp	r3, r1
 800404e:	bf01      	itttt	eq
 8004050:	6819      	ldreq	r1, [r3, #0]
 8004052:	685b      	ldreq	r3, [r3, #4]
 8004054:	1809      	addeq	r1, r1, r0
 8004056:	6021      	streq	r1, [r4, #0]
 8004058:	e7ed      	b.n	8004036 <_free_r+0x1e>
 800405a:	461a      	mov	r2, r3
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	b10b      	cbz	r3, 8004064 <_free_r+0x4c>
 8004060:	42a3      	cmp	r3, r4
 8004062:	d9fa      	bls.n	800405a <_free_r+0x42>
 8004064:	6811      	ldr	r1, [r2, #0]
 8004066:	1850      	adds	r0, r2, r1
 8004068:	42a0      	cmp	r0, r4
 800406a:	d10b      	bne.n	8004084 <_free_r+0x6c>
 800406c:	6820      	ldr	r0, [r4, #0]
 800406e:	4401      	add	r1, r0
 8004070:	1850      	adds	r0, r2, r1
 8004072:	4283      	cmp	r3, r0
 8004074:	6011      	str	r1, [r2, #0]
 8004076:	d1e0      	bne.n	800403a <_free_r+0x22>
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	6053      	str	r3, [r2, #4]
 800407e:	4408      	add	r0, r1
 8004080:	6010      	str	r0, [r2, #0]
 8004082:	e7da      	b.n	800403a <_free_r+0x22>
 8004084:	d902      	bls.n	800408c <_free_r+0x74>
 8004086:	230c      	movs	r3, #12
 8004088:	602b      	str	r3, [r5, #0]
 800408a:	e7d6      	b.n	800403a <_free_r+0x22>
 800408c:	6820      	ldr	r0, [r4, #0]
 800408e:	1821      	adds	r1, r4, r0
 8004090:	428b      	cmp	r3, r1
 8004092:	bf04      	itt	eq
 8004094:	6819      	ldreq	r1, [r3, #0]
 8004096:	685b      	ldreq	r3, [r3, #4]
 8004098:	6063      	str	r3, [r4, #4]
 800409a:	bf04      	itt	eq
 800409c:	1809      	addeq	r1, r1, r0
 800409e:	6021      	streq	r1, [r4, #0]
 80040a0:	6054      	str	r4, [r2, #4]
 80040a2:	e7ca      	b.n	800403a <_free_r+0x22>
 80040a4:	bd38      	pop	{r3, r4, r5, pc}
 80040a6:	bf00      	nop
 80040a8:	20000380 	.word	0x20000380

080040ac <sbrk_aligned>:
 80040ac:	b570      	push	{r4, r5, r6, lr}
 80040ae:	4e0f      	ldr	r6, [pc, #60]	@ (80040ec <sbrk_aligned+0x40>)
 80040b0:	460c      	mov	r4, r1
 80040b2:	6831      	ldr	r1, [r6, #0]
 80040b4:	4605      	mov	r5, r0
 80040b6:	b911      	cbnz	r1, 80040be <sbrk_aligned+0x12>
 80040b8:	f000 fba6 	bl	8004808 <_sbrk_r>
 80040bc:	6030      	str	r0, [r6, #0]
 80040be:	4621      	mov	r1, r4
 80040c0:	4628      	mov	r0, r5
 80040c2:	f000 fba1 	bl	8004808 <_sbrk_r>
 80040c6:	1c43      	adds	r3, r0, #1
 80040c8:	d103      	bne.n	80040d2 <sbrk_aligned+0x26>
 80040ca:	f04f 34ff 	mov.w	r4, #4294967295
 80040ce:	4620      	mov	r0, r4
 80040d0:	bd70      	pop	{r4, r5, r6, pc}
 80040d2:	1cc4      	adds	r4, r0, #3
 80040d4:	f024 0403 	bic.w	r4, r4, #3
 80040d8:	42a0      	cmp	r0, r4
 80040da:	d0f8      	beq.n	80040ce <sbrk_aligned+0x22>
 80040dc:	1a21      	subs	r1, r4, r0
 80040de:	4628      	mov	r0, r5
 80040e0:	f000 fb92 	bl	8004808 <_sbrk_r>
 80040e4:	3001      	adds	r0, #1
 80040e6:	d1f2      	bne.n	80040ce <sbrk_aligned+0x22>
 80040e8:	e7ef      	b.n	80040ca <sbrk_aligned+0x1e>
 80040ea:	bf00      	nop
 80040ec:	2000037c 	.word	0x2000037c

080040f0 <_malloc_r>:
 80040f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040f4:	1ccd      	adds	r5, r1, #3
 80040f6:	f025 0503 	bic.w	r5, r5, #3
 80040fa:	3508      	adds	r5, #8
 80040fc:	2d0c      	cmp	r5, #12
 80040fe:	bf38      	it	cc
 8004100:	250c      	movcc	r5, #12
 8004102:	2d00      	cmp	r5, #0
 8004104:	4606      	mov	r6, r0
 8004106:	db01      	blt.n	800410c <_malloc_r+0x1c>
 8004108:	42a9      	cmp	r1, r5
 800410a:	d904      	bls.n	8004116 <_malloc_r+0x26>
 800410c:	230c      	movs	r3, #12
 800410e:	6033      	str	r3, [r6, #0]
 8004110:	2000      	movs	r0, #0
 8004112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004116:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80041ec <_malloc_r+0xfc>
 800411a:	f000 f869 	bl	80041f0 <__malloc_lock>
 800411e:	f8d8 3000 	ldr.w	r3, [r8]
 8004122:	461c      	mov	r4, r3
 8004124:	bb44      	cbnz	r4, 8004178 <_malloc_r+0x88>
 8004126:	4629      	mov	r1, r5
 8004128:	4630      	mov	r0, r6
 800412a:	f7ff ffbf 	bl	80040ac <sbrk_aligned>
 800412e:	1c43      	adds	r3, r0, #1
 8004130:	4604      	mov	r4, r0
 8004132:	d158      	bne.n	80041e6 <_malloc_r+0xf6>
 8004134:	f8d8 4000 	ldr.w	r4, [r8]
 8004138:	4627      	mov	r7, r4
 800413a:	2f00      	cmp	r7, #0
 800413c:	d143      	bne.n	80041c6 <_malloc_r+0xd6>
 800413e:	2c00      	cmp	r4, #0
 8004140:	d04b      	beq.n	80041da <_malloc_r+0xea>
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	4639      	mov	r1, r7
 8004146:	4630      	mov	r0, r6
 8004148:	eb04 0903 	add.w	r9, r4, r3
 800414c:	f000 fb5c 	bl	8004808 <_sbrk_r>
 8004150:	4581      	cmp	r9, r0
 8004152:	d142      	bne.n	80041da <_malloc_r+0xea>
 8004154:	6821      	ldr	r1, [r4, #0]
 8004156:	1a6d      	subs	r5, r5, r1
 8004158:	4629      	mov	r1, r5
 800415a:	4630      	mov	r0, r6
 800415c:	f7ff ffa6 	bl	80040ac <sbrk_aligned>
 8004160:	3001      	adds	r0, #1
 8004162:	d03a      	beq.n	80041da <_malloc_r+0xea>
 8004164:	6823      	ldr	r3, [r4, #0]
 8004166:	442b      	add	r3, r5
 8004168:	6023      	str	r3, [r4, #0]
 800416a:	f8d8 3000 	ldr.w	r3, [r8]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	bb62      	cbnz	r2, 80041cc <_malloc_r+0xdc>
 8004172:	f8c8 7000 	str.w	r7, [r8]
 8004176:	e00f      	b.n	8004198 <_malloc_r+0xa8>
 8004178:	6822      	ldr	r2, [r4, #0]
 800417a:	1b52      	subs	r2, r2, r5
 800417c:	d420      	bmi.n	80041c0 <_malloc_r+0xd0>
 800417e:	2a0b      	cmp	r2, #11
 8004180:	d917      	bls.n	80041b2 <_malloc_r+0xc2>
 8004182:	1961      	adds	r1, r4, r5
 8004184:	42a3      	cmp	r3, r4
 8004186:	6025      	str	r5, [r4, #0]
 8004188:	bf18      	it	ne
 800418a:	6059      	strne	r1, [r3, #4]
 800418c:	6863      	ldr	r3, [r4, #4]
 800418e:	bf08      	it	eq
 8004190:	f8c8 1000 	streq.w	r1, [r8]
 8004194:	5162      	str	r2, [r4, r5]
 8004196:	604b      	str	r3, [r1, #4]
 8004198:	4630      	mov	r0, r6
 800419a:	f000 f82f 	bl	80041fc <__malloc_unlock>
 800419e:	f104 000b 	add.w	r0, r4, #11
 80041a2:	1d23      	adds	r3, r4, #4
 80041a4:	f020 0007 	bic.w	r0, r0, #7
 80041a8:	1ac2      	subs	r2, r0, r3
 80041aa:	bf1c      	itt	ne
 80041ac:	1a1b      	subne	r3, r3, r0
 80041ae:	50a3      	strne	r3, [r4, r2]
 80041b0:	e7af      	b.n	8004112 <_malloc_r+0x22>
 80041b2:	6862      	ldr	r2, [r4, #4]
 80041b4:	42a3      	cmp	r3, r4
 80041b6:	bf0c      	ite	eq
 80041b8:	f8c8 2000 	streq.w	r2, [r8]
 80041bc:	605a      	strne	r2, [r3, #4]
 80041be:	e7eb      	b.n	8004198 <_malloc_r+0xa8>
 80041c0:	4623      	mov	r3, r4
 80041c2:	6864      	ldr	r4, [r4, #4]
 80041c4:	e7ae      	b.n	8004124 <_malloc_r+0x34>
 80041c6:	463c      	mov	r4, r7
 80041c8:	687f      	ldr	r7, [r7, #4]
 80041ca:	e7b6      	b.n	800413a <_malloc_r+0x4a>
 80041cc:	461a      	mov	r2, r3
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	42a3      	cmp	r3, r4
 80041d2:	d1fb      	bne.n	80041cc <_malloc_r+0xdc>
 80041d4:	2300      	movs	r3, #0
 80041d6:	6053      	str	r3, [r2, #4]
 80041d8:	e7de      	b.n	8004198 <_malloc_r+0xa8>
 80041da:	230c      	movs	r3, #12
 80041dc:	6033      	str	r3, [r6, #0]
 80041de:	4630      	mov	r0, r6
 80041e0:	f000 f80c 	bl	80041fc <__malloc_unlock>
 80041e4:	e794      	b.n	8004110 <_malloc_r+0x20>
 80041e6:	6005      	str	r5, [r0, #0]
 80041e8:	e7d6      	b.n	8004198 <_malloc_r+0xa8>
 80041ea:	bf00      	nop
 80041ec:	20000380 	.word	0x20000380

080041f0 <__malloc_lock>:
 80041f0:	4801      	ldr	r0, [pc, #4]	@ (80041f8 <__malloc_lock+0x8>)
 80041f2:	f7ff bf0f 	b.w	8004014 <__retarget_lock_acquire_recursive>
 80041f6:	bf00      	nop
 80041f8:	20000378 	.word	0x20000378

080041fc <__malloc_unlock>:
 80041fc:	4801      	ldr	r0, [pc, #4]	@ (8004204 <__malloc_unlock+0x8>)
 80041fe:	f7ff bf0a 	b.w	8004016 <__retarget_lock_release_recursive>
 8004202:	bf00      	nop
 8004204:	20000378 	.word	0x20000378

08004208 <__ssputs_r>:
 8004208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800420c:	688e      	ldr	r6, [r1, #8]
 800420e:	461f      	mov	r7, r3
 8004210:	42be      	cmp	r6, r7
 8004212:	680b      	ldr	r3, [r1, #0]
 8004214:	4682      	mov	sl, r0
 8004216:	460c      	mov	r4, r1
 8004218:	4690      	mov	r8, r2
 800421a:	d82d      	bhi.n	8004278 <__ssputs_r+0x70>
 800421c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004220:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004224:	d026      	beq.n	8004274 <__ssputs_r+0x6c>
 8004226:	6965      	ldr	r5, [r4, #20]
 8004228:	6909      	ldr	r1, [r1, #16]
 800422a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800422e:	eba3 0901 	sub.w	r9, r3, r1
 8004232:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004236:	1c7b      	adds	r3, r7, #1
 8004238:	444b      	add	r3, r9
 800423a:	106d      	asrs	r5, r5, #1
 800423c:	429d      	cmp	r5, r3
 800423e:	bf38      	it	cc
 8004240:	461d      	movcc	r5, r3
 8004242:	0553      	lsls	r3, r2, #21
 8004244:	d527      	bpl.n	8004296 <__ssputs_r+0x8e>
 8004246:	4629      	mov	r1, r5
 8004248:	f7ff ff52 	bl	80040f0 <_malloc_r>
 800424c:	4606      	mov	r6, r0
 800424e:	b360      	cbz	r0, 80042aa <__ssputs_r+0xa2>
 8004250:	6921      	ldr	r1, [r4, #16]
 8004252:	464a      	mov	r2, r9
 8004254:	f000 fae8 	bl	8004828 <memcpy>
 8004258:	89a3      	ldrh	r3, [r4, #12]
 800425a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800425e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004262:	81a3      	strh	r3, [r4, #12]
 8004264:	6126      	str	r6, [r4, #16]
 8004266:	6165      	str	r5, [r4, #20]
 8004268:	444e      	add	r6, r9
 800426a:	eba5 0509 	sub.w	r5, r5, r9
 800426e:	6026      	str	r6, [r4, #0]
 8004270:	60a5      	str	r5, [r4, #8]
 8004272:	463e      	mov	r6, r7
 8004274:	42be      	cmp	r6, r7
 8004276:	d900      	bls.n	800427a <__ssputs_r+0x72>
 8004278:	463e      	mov	r6, r7
 800427a:	6820      	ldr	r0, [r4, #0]
 800427c:	4632      	mov	r2, r6
 800427e:	4641      	mov	r1, r8
 8004280:	f000 faa8 	bl	80047d4 <memmove>
 8004284:	68a3      	ldr	r3, [r4, #8]
 8004286:	1b9b      	subs	r3, r3, r6
 8004288:	60a3      	str	r3, [r4, #8]
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	4433      	add	r3, r6
 800428e:	6023      	str	r3, [r4, #0]
 8004290:	2000      	movs	r0, #0
 8004292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004296:	462a      	mov	r2, r5
 8004298:	f000 fad4 	bl	8004844 <_realloc_r>
 800429c:	4606      	mov	r6, r0
 800429e:	2800      	cmp	r0, #0
 80042a0:	d1e0      	bne.n	8004264 <__ssputs_r+0x5c>
 80042a2:	6921      	ldr	r1, [r4, #16]
 80042a4:	4650      	mov	r0, sl
 80042a6:	f7ff feb7 	bl	8004018 <_free_r>
 80042aa:	230c      	movs	r3, #12
 80042ac:	f8ca 3000 	str.w	r3, [sl]
 80042b0:	89a3      	ldrh	r3, [r4, #12]
 80042b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042b6:	81a3      	strh	r3, [r4, #12]
 80042b8:	f04f 30ff 	mov.w	r0, #4294967295
 80042bc:	e7e9      	b.n	8004292 <__ssputs_r+0x8a>
	...

080042c0 <_svfiprintf_r>:
 80042c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c4:	4698      	mov	r8, r3
 80042c6:	898b      	ldrh	r3, [r1, #12]
 80042c8:	061b      	lsls	r3, r3, #24
 80042ca:	b09d      	sub	sp, #116	@ 0x74
 80042cc:	4607      	mov	r7, r0
 80042ce:	460d      	mov	r5, r1
 80042d0:	4614      	mov	r4, r2
 80042d2:	d510      	bpl.n	80042f6 <_svfiprintf_r+0x36>
 80042d4:	690b      	ldr	r3, [r1, #16]
 80042d6:	b973      	cbnz	r3, 80042f6 <_svfiprintf_r+0x36>
 80042d8:	2140      	movs	r1, #64	@ 0x40
 80042da:	f7ff ff09 	bl	80040f0 <_malloc_r>
 80042de:	6028      	str	r0, [r5, #0]
 80042e0:	6128      	str	r0, [r5, #16]
 80042e2:	b930      	cbnz	r0, 80042f2 <_svfiprintf_r+0x32>
 80042e4:	230c      	movs	r3, #12
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ec:	b01d      	add	sp, #116	@ 0x74
 80042ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042f2:	2340      	movs	r3, #64	@ 0x40
 80042f4:	616b      	str	r3, [r5, #20]
 80042f6:	2300      	movs	r3, #0
 80042f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80042fa:	2320      	movs	r3, #32
 80042fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004300:	f8cd 800c 	str.w	r8, [sp, #12]
 8004304:	2330      	movs	r3, #48	@ 0x30
 8004306:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80044a4 <_svfiprintf_r+0x1e4>
 800430a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800430e:	f04f 0901 	mov.w	r9, #1
 8004312:	4623      	mov	r3, r4
 8004314:	469a      	mov	sl, r3
 8004316:	f813 2b01 	ldrb.w	r2, [r3], #1
 800431a:	b10a      	cbz	r2, 8004320 <_svfiprintf_r+0x60>
 800431c:	2a25      	cmp	r2, #37	@ 0x25
 800431e:	d1f9      	bne.n	8004314 <_svfiprintf_r+0x54>
 8004320:	ebba 0b04 	subs.w	fp, sl, r4
 8004324:	d00b      	beq.n	800433e <_svfiprintf_r+0x7e>
 8004326:	465b      	mov	r3, fp
 8004328:	4622      	mov	r2, r4
 800432a:	4629      	mov	r1, r5
 800432c:	4638      	mov	r0, r7
 800432e:	f7ff ff6b 	bl	8004208 <__ssputs_r>
 8004332:	3001      	adds	r0, #1
 8004334:	f000 80a7 	beq.w	8004486 <_svfiprintf_r+0x1c6>
 8004338:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800433a:	445a      	add	r2, fp
 800433c:	9209      	str	r2, [sp, #36]	@ 0x24
 800433e:	f89a 3000 	ldrb.w	r3, [sl]
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 809f 	beq.w	8004486 <_svfiprintf_r+0x1c6>
 8004348:	2300      	movs	r3, #0
 800434a:	f04f 32ff 	mov.w	r2, #4294967295
 800434e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004352:	f10a 0a01 	add.w	sl, sl, #1
 8004356:	9304      	str	r3, [sp, #16]
 8004358:	9307      	str	r3, [sp, #28]
 800435a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800435e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004360:	4654      	mov	r4, sl
 8004362:	2205      	movs	r2, #5
 8004364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004368:	484e      	ldr	r0, [pc, #312]	@ (80044a4 <_svfiprintf_r+0x1e4>)
 800436a:	f7fb ff59 	bl	8000220 <memchr>
 800436e:	9a04      	ldr	r2, [sp, #16]
 8004370:	b9d8      	cbnz	r0, 80043aa <_svfiprintf_r+0xea>
 8004372:	06d0      	lsls	r0, r2, #27
 8004374:	bf44      	itt	mi
 8004376:	2320      	movmi	r3, #32
 8004378:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800437c:	0711      	lsls	r1, r2, #28
 800437e:	bf44      	itt	mi
 8004380:	232b      	movmi	r3, #43	@ 0x2b
 8004382:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004386:	f89a 3000 	ldrb.w	r3, [sl]
 800438a:	2b2a      	cmp	r3, #42	@ 0x2a
 800438c:	d015      	beq.n	80043ba <_svfiprintf_r+0xfa>
 800438e:	9a07      	ldr	r2, [sp, #28]
 8004390:	4654      	mov	r4, sl
 8004392:	2000      	movs	r0, #0
 8004394:	f04f 0c0a 	mov.w	ip, #10
 8004398:	4621      	mov	r1, r4
 800439a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800439e:	3b30      	subs	r3, #48	@ 0x30
 80043a0:	2b09      	cmp	r3, #9
 80043a2:	d94b      	bls.n	800443c <_svfiprintf_r+0x17c>
 80043a4:	b1b0      	cbz	r0, 80043d4 <_svfiprintf_r+0x114>
 80043a6:	9207      	str	r2, [sp, #28]
 80043a8:	e014      	b.n	80043d4 <_svfiprintf_r+0x114>
 80043aa:	eba0 0308 	sub.w	r3, r0, r8
 80043ae:	fa09 f303 	lsl.w	r3, r9, r3
 80043b2:	4313      	orrs	r3, r2
 80043b4:	9304      	str	r3, [sp, #16]
 80043b6:	46a2      	mov	sl, r4
 80043b8:	e7d2      	b.n	8004360 <_svfiprintf_r+0xa0>
 80043ba:	9b03      	ldr	r3, [sp, #12]
 80043bc:	1d19      	adds	r1, r3, #4
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	9103      	str	r1, [sp, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	bfbb      	ittet	lt
 80043c6:	425b      	neglt	r3, r3
 80043c8:	f042 0202 	orrlt.w	r2, r2, #2
 80043cc:	9307      	strge	r3, [sp, #28]
 80043ce:	9307      	strlt	r3, [sp, #28]
 80043d0:	bfb8      	it	lt
 80043d2:	9204      	strlt	r2, [sp, #16]
 80043d4:	7823      	ldrb	r3, [r4, #0]
 80043d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80043d8:	d10a      	bne.n	80043f0 <_svfiprintf_r+0x130>
 80043da:	7863      	ldrb	r3, [r4, #1]
 80043dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80043de:	d132      	bne.n	8004446 <_svfiprintf_r+0x186>
 80043e0:	9b03      	ldr	r3, [sp, #12]
 80043e2:	1d1a      	adds	r2, r3, #4
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	9203      	str	r2, [sp, #12]
 80043e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80043ec:	3402      	adds	r4, #2
 80043ee:	9305      	str	r3, [sp, #20]
 80043f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80044b4 <_svfiprintf_r+0x1f4>
 80043f4:	7821      	ldrb	r1, [r4, #0]
 80043f6:	2203      	movs	r2, #3
 80043f8:	4650      	mov	r0, sl
 80043fa:	f7fb ff11 	bl	8000220 <memchr>
 80043fe:	b138      	cbz	r0, 8004410 <_svfiprintf_r+0x150>
 8004400:	9b04      	ldr	r3, [sp, #16]
 8004402:	eba0 000a 	sub.w	r0, r0, sl
 8004406:	2240      	movs	r2, #64	@ 0x40
 8004408:	4082      	lsls	r2, r0
 800440a:	4313      	orrs	r3, r2
 800440c:	3401      	adds	r4, #1
 800440e:	9304      	str	r3, [sp, #16]
 8004410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004414:	4824      	ldr	r0, [pc, #144]	@ (80044a8 <_svfiprintf_r+0x1e8>)
 8004416:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800441a:	2206      	movs	r2, #6
 800441c:	f7fb ff00 	bl	8000220 <memchr>
 8004420:	2800      	cmp	r0, #0
 8004422:	d036      	beq.n	8004492 <_svfiprintf_r+0x1d2>
 8004424:	4b21      	ldr	r3, [pc, #132]	@ (80044ac <_svfiprintf_r+0x1ec>)
 8004426:	bb1b      	cbnz	r3, 8004470 <_svfiprintf_r+0x1b0>
 8004428:	9b03      	ldr	r3, [sp, #12]
 800442a:	3307      	adds	r3, #7
 800442c:	f023 0307 	bic.w	r3, r3, #7
 8004430:	3308      	adds	r3, #8
 8004432:	9303      	str	r3, [sp, #12]
 8004434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004436:	4433      	add	r3, r6
 8004438:	9309      	str	r3, [sp, #36]	@ 0x24
 800443a:	e76a      	b.n	8004312 <_svfiprintf_r+0x52>
 800443c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004440:	460c      	mov	r4, r1
 8004442:	2001      	movs	r0, #1
 8004444:	e7a8      	b.n	8004398 <_svfiprintf_r+0xd8>
 8004446:	2300      	movs	r3, #0
 8004448:	3401      	adds	r4, #1
 800444a:	9305      	str	r3, [sp, #20]
 800444c:	4619      	mov	r1, r3
 800444e:	f04f 0c0a 	mov.w	ip, #10
 8004452:	4620      	mov	r0, r4
 8004454:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004458:	3a30      	subs	r2, #48	@ 0x30
 800445a:	2a09      	cmp	r2, #9
 800445c:	d903      	bls.n	8004466 <_svfiprintf_r+0x1a6>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0c6      	beq.n	80043f0 <_svfiprintf_r+0x130>
 8004462:	9105      	str	r1, [sp, #20]
 8004464:	e7c4      	b.n	80043f0 <_svfiprintf_r+0x130>
 8004466:	fb0c 2101 	mla	r1, ip, r1, r2
 800446a:	4604      	mov	r4, r0
 800446c:	2301      	movs	r3, #1
 800446e:	e7f0      	b.n	8004452 <_svfiprintf_r+0x192>
 8004470:	ab03      	add	r3, sp, #12
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	462a      	mov	r2, r5
 8004476:	4b0e      	ldr	r3, [pc, #56]	@ (80044b0 <_svfiprintf_r+0x1f0>)
 8004478:	a904      	add	r1, sp, #16
 800447a:	4638      	mov	r0, r7
 800447c:	f3af 8000 	nop.w
 8004480:	1c42      	adds	r2, r0, #1
 8004482:	4606      	mov	r6, r0
 8004484:	d1d6      	bne.n	8004434 <_svfiprintf_r+0x174>
 8004486:	89ab      	ldrh	r3, [r5, #12]
 8004488:	065b      	lsls	r3, r3, #25
 800448a:	f53f af2d 	bmi.w	80042e8 <_svfiprintf_r+0x28>
 800448e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004490:	e72c      	b.n	80042ec <_svfiprintf_r+0x2c>
 8004492:	ab03      	add	r3, sp, #12
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	462a      	mov	r2, r5
 8004498:	4b05      	ldr	r3, [pc, #20]	@ (80044b0 <_svfiprintf_r+0x1f0>)
 800449a:	a904      	add	r1, sp, #16
 800449c:	4638      	mov	r0, r7
 800449e:	f000 f879 	bl	8004594 <_printf_i>
 80044a2:	e7ed      	b.n	8004480 <_svfiprintf_r+0x1c0>
 80044a4:	08004918 	.word	0x08004918
 80044a8:	08004922 	.word	0x08004922
 80044ac:	00000000 	.word	0x00000000
 80044b0:	08004209 	.word	0x08004209
 80044b4:	0800491e 	.word	0x0800491e

080044b8 <_printf_common>:
 80044b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044bc:	4616      	mov	r6, r2
 80044be:	4698      	mov	r8, r3
 80044c0:	688a      	ldr	r2, [r1, #8]
 80044c2:	690b      	ldr	r3, [r1, #16]
 80044c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044c8:	4293      	cmp	r3, r2
 80044ca:	bfb8      	it	lt
 80044cc:	4613      	movlt	r3, r2
 80044ce:	6033      	str	r3, [r6, #0]
 80044d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044d4:	4607      	mov	r7, r0
 80044d6:	460c      	mov	r4, r1
 80044d8:	b10a      	cbz	r2, 80044de <_printf_common+0x26>
 80044da:	3301      	adds	r3, #1
 80044dc:	6033      	str	r3, [r6, #0]
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	0699      	lsls	r1, r3, #26
 80044e2:	bf42      	ittt	mi
 80044e4:	6833      	ldrmi	r3, [r6, #0]
 80044e6:	3302      	addmi	r3, #2
 80044e8:	6033      	strmi	r3, [r6, #0]
 80044ea:	6825      	ldr	r5, [r4, #0]
 80044ec:	f015 0506 	ands.w	r5, r5, #6
 80044f0:	d106      	bne.n	8004500 <_printf_common+0x48>
 80044f2:	f104 0a19 	add.w	sl, r4, #25
 80044f6:	68e3      	ldr	r3, [r4, #12]
 80044f8:	6832      	ldr	r2, [r6, #0]
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	42ab      	cmp	r3, r5
 80044fe:	dc26      	bgt.n	800454e <_printf_common+0x96>
 8004500:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004504:	6822      	ldr	r2, [r4, #0]
 8004506:	3b00      	subs	r3, #0
 8004508:	bf18      	it	ne
 800450a:	2301      	movne	r3, #1
 800450c:	0692      	lsls	r2, r2, #26
 800450e:	d42b      	bmi.n	8004568 <_printf_common+0xb0>
 8004510:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004514:	4641      	mov	r1, r8
 8004516:	4638      	mov	r0, r7
 8004518:	47c8      	blx	r9
 800451a:	3001      	adds	r0, #1
 800451c:	d01e      	beq.n	800455c <_printf_common+0xa4>
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	6922      	ldr	r2, [r4, #16]
 8004522:	f003 0306 	and.w	r3, r3, #6
 8004526:	2b04      	cmp	r3, #4
 8004528:	bf02      	ittt	eq
 800452a:	68e5      	ldreq	r5, [r4, #12]
 800452c:	6833      	ldreq	r3, [r6, #0]
 800452e:	1aed      	subeq	r5, r5, r3
 8004530:	68a3      	ldr	r3, [r4, #8]
 8004532:	bf0c      	ite	eq
 8004534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004538:	2500      	movne	r5, #0
 800453a:	4293      	cmp	r3, r2
 800453c:	bfc4      	itt	gt
 800453e:	1a9b      	subgt	r3, r3, r2
 8004540:	18ed      	addgt	r5, r5, r3
 8004542:	2600      	movs	r6, #0
 8004544:	341a      	adds	r4, #26
 8004546:	42b5      	cmp	r5, r6
 8004548:	d11a      	bne.n	8004580 <_printf_common+0xc8>
 800454a:	2000      	movs	r0, #0
 800454c:	e008      	b.n	8004560 <_printf_common+0xa8>
 800454e:	2301      	movs	r3, #1
 8004550:	4652      	mov	r2, sl
 8004552:	4641      	mov	r1, r8
 8004554:	4638      	mov	r0, r7
 8004556:	47c8      	blx	r9
 8004558:	3001      	adds	r0, #1
 800455a:	d103      	bne.n	8004564 <_printf_common+0xac>
 800455c:	f04f 30ff 	mov.w	r0, #4294967295
 8004560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004564:	3501      	adds	r5, #1
 8004566:	e7c6      	b.n	80044f6 <_printf_common+0x3e>
 8004568:	18e1      	adds	r1, r4, r3
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	2030      	movs	r0, #48	@ 0x30
 800456e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004572:	4422      	add	r2, r4
 8004574:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004578:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800457c:	3302      	adds	r3, #2
 800457e:	e7c7      	b.n	8004510 <_printf_common+0x58>
 8004580:	2301      	movs	r3, #1
 8004582:	4622      	mov	r2, r4
 8004584:	4641      	mov	r1, r8
 8004586:	4638      	mov	r0, r7
 8004588:	47c8      	blx	r9
 800458a:	3001      	adds	r0, #1
 800458c:	d0e6      	beq.n	800455c <_printf_common+0xa4>
 800458e:	3601      	adds	r6, #1
 8004590:	e7d9      	b.n	8004546 <_printf_common+0x8e>
	...

08004594 <_printf_i>:
 8004594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004598:	7e0f      	ldrb	r7, [r1, #24]
 800459a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800459c:	2f78      	cmp	r7, #120	@ 0x78
 800459e:	4691      	mov	r9, r2
 80045a0:	4680      	mov	r8, r0
 80045a2:	460c      	mov	r4, r1
 80045a4:	469a      	mov	sl, r3
 80045a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80045aa:	d807      	bhi.n	80045bc <_printf_i+0x28>
 80045ac:	2f62      	cmp	r7, #98	@ 0x62
 80045ae:	d80a      	bhi.n	80045c6 <_printf_i+0x32>
 80045b0:	2f00      	cmp	r7, #0
 80045b2:	f000 80d2 	beq.w	800475a <_printf_i+0x1c6>
 80045b6:	2f58      	cmp	r7, #88	@ 0x58
 80045b8:	f000 80b9 	beq.w	800472e <_printf_i+0x19a>
 80045bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80045c4:	e03a      	b.n	800463c <_printf_i+0xa8>
 80045c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80045ca:	2b15      	cmp	r3, #21
 80045cc:	d8f6      	bhi.n	80045bc <_printf_i+0x28>
 80045ce:	a101      	add	r1, pc, #4	@ (adr r1, 80045d4 <_printf_i+0x40>)
 80045d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045d4:	0800462d 	.word	0x0800462d
 80045d8:	08004641 	.word	0x08004641
 80045dc:	080045bd 	.word	0x080045bd
 80045e0:	080045bd 	.word	0x080045bd
 80045e4:	080045bd 	.word	0x080045bd
 80045e8:	080045bd 	.word	0x080045bd
 80045ec:	08004641 	.word	0x08004641
 80045f0:	080045bd 	.word	0x080045bd
 80045f4:	080045bd 	.word	0x080045bd
 80045f8:	080045bd 	.word	0x080045bd
 80045fc:	080045bd 	.word	0x080045bd
 8004600:	08004741 	.word	0x08004741
 8004604:	0800466b 	.word	0x0800466b
 8004608:	080046fb 	.word	0x080046fb
 800460c:	080045bd 	.word	0x080045bd
 8004610:	080045bd 	.word	0x080045bd
 8004614:	08004763 	.word	0x08004763
 8004618:	080045bd 	.word	0x080045bd
 800461c:	0800466b 	.word	0x0800466b
 8004620:	080045bd 	.word	0x080045bd
 8004624:	080045bd 	.word	0x080045bd
 8004628:	08004703 	.word	0x08004703
 800462c:	6833      	ldr	r3, [r6, #0]
 800462e:	1d1a      	adds	r2, r3, #4
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6032      	str	r2, [r6, #0]
 8004634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004638:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800463c:	2301      	movs	r3, #1
 800463e:	e09d      	b.n	800477c <_printf_i+0x1e8>
 8004640:	6833      	ldr	r3, [r6, #0]
 8004642:	6820      	ldr	r0, [r4, #0]
 8004644:	1d19      	adds	r1, r3, #4
 8004646:	6031      	str	r1, [r6, #0]
 8004648:	0606      	lsls	r6, r0, #24
 800464a:	d501      	bpl.n	8004650 <_printf_i+0xbc>
 800464c:	681d      	ldr	r5, [r3, #0]
 800464e:	e003      	b.n	8004658 <_printf_i+0xc4>
 8004650:	0645      	lsls	r5, r0, #25
 8004652:	d5fb      	bpl.n	800464c <_printf_i+0xb8>
 8004654:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004658:	2d00      	cmp	r5, #0
 800465a:	da03      	bge.n	8004664 <_printf_i+0xd0>
 800465c:	232d      	movs	r3, #45	@ 0x2d
 800465e:	426d      	negs	r5, r5
 8004660:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004664:	4859      	ldr	r0, [pc, #356]	@ (80047cc <_printf_i+0x238>)
 8004666:	230a      	movs	r3, #10
 8004668:	e011      	b.n	800468e <_printf_i+0xfa>
 800466a:	6821      	ldr	r1, [r4, #0]
 800466c:	6833      	ldr	r3, [r6, #0]
 800466e:	0608      	lsls	r0, r1, #24
 8004670:	f853 5b04 	ldr.w	r5, [r3], #4
 8004674:	d402      	bmi.n	800467c <_printf_i+0xe8>
 8004676:	0649      	lsls	r1, r1, #25
 8004678:	bf48      	it	mi
 800467a:	b2ad      	uxthmi	r5, r5
 800467c:	2f6f      	cmp	r7, #111	@ 0x6f
 800467e:	4853      	ldr	r0, [pc, #332]	@ (80047cc <_printf_i+0x238>)
 8004680:	6033      	str	r3, [r6, #0]
 8004682:	bf14      	ite	ne
 8004684:	230a      	movne	r3, #10
 8004686:	2308      	moveq	r3, #8
 8004688:	2100      	movs	r1, #0
 800468a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800468e:	6866      	ldr	r6, [r4, #4]
 8004690:	60a6      	str	r6, [r4, #8]
 8004692:	2e00      	cmp	r6, #0
 8004694:	bfa2      	ittt	ge
 8004696:	6821      	ldrge	r1, [r4, #0]
 8004698:	f021 0104 	bicge.w	r1, r1, #4
 800469c:	6021      	strge	r1, [r4, #0]
 800469e:	b90d      	cbnz	r5, 80046a4 <_printf_i+0x110>
 80046a0:	2e00      	cmp	r6, #0
 80046a2:	d04b      	beq.n	800473c <_printf_i+0x1a8>
 80046a4:	4616      	mov	r6, r2
 80046a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80046aa:	fb03 5711 	mls	r7, r3, r1, r5
 80046ae:	5dc7      	ldrb	r7, [r0, r7]
 80046b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046b4:	462f      	mov	r7, r5
 80046b6:	42bb      	cmp	r3, r7
 80046b8:	460d      	mov	r5, r1
 80046ba:	d9f4      	bls.n	80046a6 <_printf_i+0x112>
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d10b      	bne.n	80046d8 <_printf_i+0x144>
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	07df      	lsls	r7, r3, #31
 80046c4:	d508      	bpl.n	80046d8 <_printf_i+0x144>
 80046c6:	6923      	ldr	r3, [r4, #16]
 80046c8:	6861      	ldr	r1, [r4, #4]
 80046ca:	4299      	cmp	r1, r3
 80046cc:	bfde      	ittt	le
 80046ce:	2330      	movle	r3, #48	@ 0x30
 80046d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046d8:	1b92      	subs	r2, r2, r6
 80046da:	6122      	str	r2, [r4, #16]
 80046dc:	f8cd a000 	str.w	sl, [sp]
 80046e0:	464b      	mov	r3, r9
 80046e2:	aa03      	add	r2, sp, #12
 80046e4:	4621      	mov	r1, r4
 80046e6:	4640      	mov	r0, r8
 80046e8:	f7ff fee6 	bl	80044b8 <_printf_common>
 80046ec:	3001      	adds	r0, #1
 80046ee:	d14a      	bne.n	8004786 <_printf_i+0x1f2>
 80046f0:	f04f 30ff 	mov.w	r0, #4294967295
 80046f4:	b004      	add	sp, #16
 80046f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	f043 0320 	orr.w	r3, r3, #32
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	4833      	ldr	r0, [pc, #204]	@ (80047d0 <_printf_i+0x23c>)
 8004704:	2778      	movs	r7, #120	@ 0x78
 8004706:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	6831      	ldr	r1, [r6, #0]
 800470e:	061f      	lsls	r7, r3, #24
 8004710:	f851 5b04 	ldr.w	r5, [r1], #4
 8004714:	d402      	bmi.n	800471c <_printf_i+0x188>
 8004716:	065f      	lsls	r7, r3, #25
 8004718:	bf48      	it	mi
 800471a:	b2ad      	uxthmi	r5, r5
 800471c:	6031      	str	r1, [r6, #0]
 800471e:	07d9      	lsls	r1, r3, #31
 8004720:	bf44      	itt	mi
 8004722:	f043 0320 	orrmi.w	r3, r3, #32
 8004726:	6023      	strmi	r3, [r4, #0]
 8004728:	b11d      	cbz	r5, 8004732 <_printf_i+0x19e>
 800472a:	2310      	movs	r3, #16
 800472c:	e7ac      	b.n	8004688 <_printf_i+0xf4>
 800472e:	4827      	ldr	r0, [pc, #156]	@ (80047cc <_printf_i+0x238>)
 8004730:	e7e9      	b.n	8004706 <_printf_i+0x172>
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	f023 0320 	bic.w	r3, r3, #32
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	e7f6      	b.n	800472a <_printf_i+0x196>
 800473c:	4616      	mov	r6, r2
 800473e:	e7bd      	b.n	80046bc <_printf_i+0x128>
 8004740:	6833      	ldr	r3, [r6, #0]
 8004742:	6825      	ldr	r5, [r4, #0]
 8004744:	6961      	ldr	r1, [r4, #20]
 8004746:	1d18      	adds	r0, r3, #4
 8004748:	6030      	str	r0, [r6, #0]
 800474a:	062e      	lsls	r6, r5, #24
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	d501      	bpl.n	8004754 <_printf_i+0x1c0>
 8004750:	6019      	str	r1, [r3, #0]
 8004752:	e002      	b.n	800475a <_printf_i+0x1c6>
 8004754:	0668      	lsls	r0, r5, #25
 8004756:	d5fb      	bpl.n	8004750 <_printf_i+0x1bc>
 8004758:	8019      	strh	r1, [r3, #0]
 800475a:	2300      	movs	r3, #0
 800475c:	6123      	str	r3, [r4, #16]
 800475e:	4616      	mov	r6, r2
 8004760:	e7bc      	b.n	80046dc <_printf_i+0x148>
 8004762:	6833      	ldr	r3, [r6, #0]
 8004764:	1d1a      	adds	r2, r3, #4
 8004766:	6032      	str	r2, [r6, #0]
 8004768:	681e      	ldr	r6, [r3, #0]
 800476a:	6862      	ldr	r2, [r4, #4]
 800476c:	2100      	movs	r1, #0
 800476e:	4630      	mov	r0, r6
 8004770:	f7fb fd56 	bl	8000220 <memchr>
 8004774:	b108      	cbz	r0, 800477a <_printf_i+0x1e6>
 8004776:	1b80      	subs	r0, r0, r6
 8004778:	6060      	str	r0, [r4, #4]
 800477a:	6863      	ldr	r3, [r4, #4]
 800477c:	6123      	str	r3, [r4, #16]
 800477e:	2300      	movs	r3, #0
 8004780:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004784:	e7aa      	b.n	80046dc <_printf_i+0x148>
 8004786:	6923      	ldr	r3, [r4, #16]
 8004788:	4632      	mov	r2, r6
 800478a:	4649      	mov	r1, r9
 800478c:	4640      	mov	r0, r8
 800478e:	47d0      	blx	sl
 8004790:	3001      	adds	r0, #1
 8004792:	d0ad      	beq.n	80046f0 <_printf_i+0x15c>
 8004794:	6823      	ldr	r3, [r4, #0]
 8004796:	079b      	lsls	r3, r3, #30
 8004798:	d413      	bmi.n	80047c2 <_printf_i+0x22e>
 800479a:	68e0      	ldr	r0, [r4, #12]
 800479c:	9b03      	ldr	r3, [sp, #12]
 800479e:	4298      	cmp	r0, r3
 80047a0:	bfb8      	it	lt
 80047a2:	4618      	movlt	r0, r3
 80047a4:	e7a6      	b.n	80046f4 <_printf_i+0x160>
 80047a6:	2301      	movs	r3, #1
 80047a8:	4632      	mov	r2, r6
 80047aa:	4649      	mov	r1, r9
 80047ac:	4640      	mov	r0, r8
 80047ae:	47d0      	blx	sl
 80047b0:	3001      	adds	r0, #1
 80047b2:	d09d      	beq.n	80046f0 <_printf_i+0x15c>
 80047b4:	3501      	adds	r5, #1
 80047b6:	68e3      	ldr	r3, [r4, #12]
 80047b8:	9903      	ldr	r1, [sp, #12]
 80047ba:	1a5b      	subs	r3, r3, r1
 80047bc:	42ab      	cmp	r3, r5
 80047be:	dcf2      	bgt.n	80047a6 <_printf_i+0x212>
 80047c0:	e7eb      	b.n	800479a <_printf_i+0x206>
 80047c2:	2500      	movs	r5, #0
 80047c4:	f104 0619 	add.w	r6, r4, #25
 80047c8:	e7f5      	b.n	80047b6 <_printf_i+0x222>
 80047ca:	bf00      	nop
 80047cc:	08004929 	.word	0x08004929
 80047d0:	0800493a 	.word	0x0800493a

080047d4 <memmove>:
 80047d4:	4288      	cmp	r0, r1
 80047d6:	b510      	push	{r4, lr}
 80047d8:	eb01 0402 	add.w	r4, r1, r2
 80047dc:	d902      	bls.n	80047e4 <memmove+0x10>
 80047de:	4284      	cmp	r4, r0
 80047e0:	4623      	mov	r3, r4
 80047e2:	d807      	bhi.n	80047f4 <memmove+0x20>
 80047e4:	1e43      	subs	r3, r0, #1
 80047e6:	42a1      	cmp	r1, r4
 80047e8:	d008      	beq.n	80047fc <memmove+0x28>
 80047ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047f2:	e7f8      	b.n	80047e6 <memmove+0x12>
 80047f4:	4402      	add	r2, r0
 80047f6:	4601      	mov	r1, r0
 80047f8:	428a      	cmp	r2, r1
 80047fa:	d100      	bne.n	80047fe <memmove+0x2a>
 80047fc:	bd10      	pop	{r4, pc}
 80047fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004802:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004806:	e7f7      	b.n	80047f8 <memmove+0x24>

08004808 <_sbrk_r>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	4d06      	ldr	r5, [pc, #24]	@ (8004824 <_sbrk_r+0x1c>)
 800480c:	2300      	movs	r3, #0
 800480e:	4604      	mov	r4, r0
 8004810:	4608      	mov	r0, r1
 8004812:	602b      	str	r3, [r5, #0]
 8004814:	f7fc fcf4 	bl	8001200 <_sbrk>
 8004818:	1c43      	adds	r3, r0, #1
 800481a:	d102      	bne.n	8004822 <_sbrk_r+0x1a>
 800481c:	682b      	ldr	r3, [r5, #0]
 800481e:	b103      	cbz	r3, 8004822 <_sbrk_r+0x1a>
 8004820:	6023      	str	r3, [r4, #0]
 8004822:	bd38      	pop	{r3, r4, r5, pc}
 8004824:	20000374 	.word	0x20000374

08004828 <memcpy>:
 8004828:	440a      	add	r2, r1
 800482a:	4291      	cmp	r1, r2
 800482c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004830:	d100      	bne.n	8004834 <memcpy+0xc>
 8004832:	4770      	bx	lr
 8004834:	b510      	push	{r4, lr}
 8004836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800483a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800483e:	4291      	cmp	r1, r2
 8004840:	d1f9      	bne.n	8004836 <memcpy+0xe>
 8004842:	bd10      	pop	{r4, pc}

08004844 <_realloc_r>:
 8004844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004848:	4680      	mov	r8, r0
 800484a:	4615      	mov	r5, r2
 800484c:	460c      	mov	r4, r1
 800484e:	b921      	cbnz	r1, 800485a <_realloc_r+0x16>
 8004850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004854:	4611      	mov	r1, r2
 8004856:	f7ff bc4b 	b.w	80040f0 <_malloc_r>
 800485a:	b92a      	cbnz	r2, 8004868 <_realloc_r+0x24>
 800485c:	f7ff fbdc 	bl	8004018 <_free_r>
 8004860:	2400      	movs	r4, #0
 8004862:	4620      	mov	r0, r4
 8004864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004868:	f000 f81a 	bl	80048a0 <_malloc_usable_size_r>
 800486c:	4285      	cmp	r5, r0
 800486e:	4606      	mov	r6, r0
 8004870:	d802      	bhi.n	8004878 <_realloc_r+0x34>
 8004872:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004876:	d8f4      	bhi.n	8004862 <_realloc_r+0x1e>
 8004878:	4629      	mov	r1, r5
 800487a:	4640      	mov	r0, r8
 800487c:	f7ff fc38 	bl	80040f0 <_malloc_r>
 8004880:	4607      	mov	r7, r0
 8004882:	2800      	cmp	r0, #0
 8004884:	d0ec      	beq.n	8004860 <_realloc_r+0x1c>
 8004886:	42b5      	cmp	r5, r6
 8004888:	462a      	mov	r2, r5
 800488a:	4621      	mov	r1, r4
 800488c:	bf28      	it	cs
 800488e:	4632      	movcs	r2, r6
 8004890:	f7ff ffca 	bl	8004828 <memcpy>
 8004894:	4621      	mov	r1, r4
 8004896:	4640      	mov	r0, r8
 8004898:	f7ff fbbe 	bl	8004018 <_free_r>
 800489c:	463c      	mov	r4, r7
 800489e:	e7e0      	b.n	8004862 <_realloc_r+0x1e>

080048a0 <_malloc_usable_size_r>:
 80048a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048a4:	1f18      	subs	r0, r3, #4
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	bfbc      	itt	lt
 80048aa:	580b      	ldrlt	r3, [r1, r0]
 80048ac:	18c0      	addlt	r0, r0, r3
 80048ae:	4770      	bx	lr

080048b0 <_init>:
 80048b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b2:	bf00      	nop
 80048b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b6:	bc08      	pop	{r3}
 80048b8:	469e      	mov	lr, r3
 80048ba:	4770      	bx	lr

080048bc <_fini>:
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	bf00      	nop
 80048c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c2:	bc08      	pop	{r3}
 80048c4:	469e      	mov	lr, r3
 80048c6:	4770      	bx	lr
