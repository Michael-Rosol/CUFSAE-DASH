
446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e38  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005008  08005008  00006008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005088  08005088  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005088  08005088  00006088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005090  08005090  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005090  08005090  00006090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005094  08005094  00006094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005098  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  2000005c  080050f4  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  080050f4  00007438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106c7  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025f9  00000000  00000000  00017753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00019d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc4  00000000  00000000  0001ac68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000024f6  00000000  00000000  0001b82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122ed  00000000  00000000  0001dd22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3eb4  00000000  00000000  0003000f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103ec3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044a4  00000000  00000000  00103f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001083ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004ff0 	.word	0x08004ff0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004ff0 	.word	0x08004ff0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b08a      	sub	sp, #40	@ 0x28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
 80005bc:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80005be:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80005c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	lcd.en_pin = en_pin;
 80005c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80005ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
	lcd.en_port = en_port;
 80005cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80005ce:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80005d0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80005d2:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f80e 	bl	8000606 <Lcd_init>

	return lcd;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	461d      	mov	r5, r3
 80005ee:	f107 0410 	add.w	r4, r7, #16
 80005f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005fa:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80005fe:	68f8      	ldr	r0, [r7, #12]
 8000600:	3728      	adds	r7, #40	@ 0x28
 8000602:	46bd      	mov	sp, r7
 8000604:	bdb0      	pop	{r4, r5, r7, pc}

08000606 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	7d9b      	ldrb	r3, [r3, #22]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d10c      	bne.n	8000630 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000616:	2133      	movs	r1, #51	@ 0x33
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f000 f848 	bl	80006ae <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 800061e:	2132      	movs	r1, #50	@ 0x32
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f000 f844 	bl	80006ae <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000626:	2128      	movs	r1, #40	@ 0x28
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f000 f840 	bl	80006ae <lcd_write_command>
 800062e:	e003      	b.n	8000638 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000630:	2138      	movs	r1, #56	@ 0x38
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f000 f83b 	bl	80006ae <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000638:	2101      	movs	r1, #1
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f000 f837 	bl	80006ae <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000640:	210c      	movs	r1, #12
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 f833 	bl	80006ae <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000648:	2106      	movs	r1, #6
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f000 f82f 	bl	80006ae <lcd_write_command>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000662:	2300      	movs	r3, #0
 8000664:	73fb      	strb	r3, [r7, #15]
 8000666:	e00a      	b.n	800067e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f000 f849 	bl	800070a <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	3301      	adds	r3, #1
 800067c:	73fb      	strb	r3, [r7, #15]
 800067e:	7bfc      	ldrb	r4, [r7, #15]
 8000680:	6838      	ldr	r0, [r7, #0]
 8000682:	f7ff fdc5 	bl	8000210 <strlen>
 8000686:	4603      	mov	r3, r0
 8000688:	429c      	cmp	r4, r3
 800068a:	d3ed      	bcc.n	8000668 <Lcd_string+0x10>
	}
}
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	bd90      	pop	{r4, r7, pc}

08000696 <Lcd_clear>:
}

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 800069e:	2101      	movs	r1, #1
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 f804 	bl	80006ae <lcd_write_command>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
 80006b6:	460b      	mov	r3, r1
 80006b8:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6898      	ldr	r0, [r3, #8]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	899b      	ldrh	r3, [r3, #12]
 80006c2:	2200      	movs	r2, #0
 80006c4:	4619      	mov	r1, r3
 80006c6:	f002 fa67 	bl	8002b98 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	7d9b      	ldrb	r3, [r3, #22]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d111      	bne.n	80006f6 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80006d2:	78fb      	ldrb	r3, [r7, #3]
 80006d4:	091b      	lsrs	r3, r3, #4
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	2204      	movs	r2, #4
 80006da:	4619      	mov	r1, r3
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f000 f842 	bl	8000766 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	f003 030f 	and.w	r3, r3, #15
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2204      	movs	r2, #4
 80006ec:	4619      	mov	r1, r3
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f000 f839 	bl	8000766 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80006f4:	e005      	b.n	8000702 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80006f6:	78fb      	ldrb	r3, [r7, #3]
 80006f8:	2208      	movs	r2, #8
 80006fa:	4619      	mov	r1, r3
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f000 f832 	bl	8000766 <lcd_write>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
 8000712:	460b      	mov	r3, r1
 8000714:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6898      	ldr	r0, [r3, #8]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	899b      	ldrh	r3, [r3, #12]
 800071e:	2201      	movs	r2, #1
 8000720:	4619      	mov	r1, r3
 8000722:	f002 fa39 	bl	8002b98 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	7d9b      	ldrb	r3, [r3, #22]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d111      	bne.n	8000752 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	091b      	lsrs	r3, r3, #4
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2204      	movs	r2, #4
 8000736:	4619      	mov	r1, r3
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f000 f814 	bl	8000766 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800073e:	78fb      	ldrb	r3, [r7, #3]
 8000740:	f003 030f 	and.w	r3, r3, #15
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2204      	movs	r2, #4
 8000748:	4619      	mov	r1, r3
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f000 f80b 	bl	8000766 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000750:	e005      	b.n	800075e <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000752:	78fb      	ldrb	r3, [r7, #3]
 8000754:	2208      	movs	r2, #8
 8000756:	4619      	mov	r1, r3
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f000 f804 	bl	8000766 <lcd_write>
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b084      	sub	sp, #16
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
 800076e:	460b      	mov	r3, r1
 8000770:	70fb      	strb	r3, [r7, #3]
 8000772:	4613      	mov	r3, r2
 8000774:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000776:	2300      	movs	r3, #0
 8000778:	73fb      	strb	r3, [r7, #15]
 800077a:	e019      	b.n	80007b0 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	6818      	ldr	r0, [r3, #0]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685a      	ldr	r2, [r3, #4]
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	4413      	add	r3, r2
 8000792:	8819      	ldrh	r1, [r3, #0]
 8000794:	78fa      	ldrb	r2, [r7, #3]
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	fa42 f303 	asr.w	r3, r2, r3
 800079c:	b2db      	uxtb	r3, r3
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	461a      	mov	r2, r3
 80007a6:	f002 f9f7 	bl	8002b98 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	3301      	adds	r3, #1
 80007ae:	73fb      	strb	r3, [r7, #15]
 80007b0:	7bfa      	ldrb	r2, [r7, #15]
 80007b2:	78bb      	ldrb	r3, [r7, #2]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d3e1      	bcc.n	800077c <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6918      	ldr	r0, [r3, #16]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	8a9b      	ldrh	r3, [r3, #20]
 80007c0:	2201      	movs	r2, #1
 80007c2:	4619      	mov	r1, r3
 80007c4:	f002 f9e8 	bl	8002b98 <HAL_GPIO_WritePin>
	//DelayTime(1);
	HAL_Delay(1);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f000 fe99 	bl	8001500 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6918      	ldr	r0, [r3, #16]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	8a9b      	ldrh	r3, [r3, #20]
 80007d6:	2200      	movs	r2, #0
 80007d8:	4619      	mov	r1, r3
 80007da:	f002 f9dd 	bl	8002b98 <HAL_GPIO_WritePin>
}
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <DelayTime>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void DelayTime(uint16_t time){
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	80fb      	strh	r3, [r7, #6]
		//uint16_t time_passed = 0;


		uint32_t start_time = __HAL_TIM_GET_COUNTER(&htim11);
 80007f2:	4b0a      	ldr	r3, [pc, #40]	@ (800081c <DelayTime+0x34>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007f8:	60fb      	str	r3, [r7, #12]

		while ((__HAL_TIM_GET_COUNTER(&htim11) - start_time) < time);
 80007fa:	bf00      	nop
 80007fc:	4b07      	ldr	r3, [pc, #28]	@ (800081c <DelayTime+0x34>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	1ad2      	subs	r2, r2, r3
 8000806:	88fb      	ldrh	r3, [r7, #6]
 8000808:	429a      	cmp	r2, r3
 800080a:	d3f7      	bcc.n	80007fc <DelayTime+0x14>

}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	20000110 	.word	0x20000110

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b5b0      	push	{r4, r5, r7, lr}
 8000822:	b092      	sub	sp, #72	@ 0x48
 8000824:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000826:	f000 fdf9 	bl	800141c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082a:	f000 f88b 	bl	8000944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082e:	f000 fa89 	bl	8000d44 <MX_GPIO_Init>
  MX_DMA_Init();
 8000832:	f000 fa67 	bl	8000d04 <MX_DMA_Init>
  MX_TIM14_Init();
 8000836:	f000 fa17 	bl	8000c68 <MX_TIM14_Init>
  MX_TIM11_Init();
 800083a:	f000 f9f1 	bl	8000c20 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 800083e:	f000 fa37 	bl	8000cb0 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8000842:	f000 f9b7 	bl	8000bb4 <MX_TIM7_Init>
  MX_CAN2_Init();
 8000846:	f000 f949 	bl	8000adc <MX_CAN2_Init>
  MX_CAN1_Init();
 800084a:	f000 f8ed 	bl	8000a28 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  // timer is started
  HAL_TIM_Base_Start_IT(&htim14); // starts the timer interrupt
 800084e:	482f      	ldr	r0, [pc, #188]	@ (800090c <main+0xec>)
 8000850:	f003 f85e 	bl	8003910 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000854:	482e      	ldr	r0, [pc, #184]	@ (8000910 <main+0xf0>)
 8000856:	f003 f85b 	bl	8003910 <HAL_TIM_Base_Start_IT>


//
  Lcd_PortType ports[] = {
 800085a:	4b2e      	ldr	r3, [pc, #184]	@ (8000914 <main+0xf4>)
 800085c:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8000860:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000862:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port
  };

  Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 8000866:	4a2c      	ldr	r2, [pc, #176]	@ (8000918 <main+0xf8>)
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000870:	e883 0003 	stmia.w	r3, {r0, r1}

 lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8000874:	4c29      	ldr	r4, [pc, #164]	@ (800091c <main+0xfc>)
 8000876:	4638      	mov	r0, r7
 8000878:	f107 021c 	add.w	r2, r7, #28
 800087c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000880:	2300      	movs	r3, #0
 8000882:	9303      	str	r3, [sp, #12]
 8000884:	2308      	movs	r3, #8
 8000886:	9302      	str	r3, [sp, #8]
 8000888:	4b25      	ldr	r3, [pc, #148]	@ (8000920 <main+0x100>)
 800088a:	9301      	str	r3, [sp, #4]
 800088c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	4b23      	ldr	r3, [pc, #140]	@ (8000920 <main+0x100>)
 8000894:	f7ff fe8c 	bl	80005b0 <Lcd_create>
 8000898:	4625      	mov	r5, r4
 800089a:	463c      	mov	r4, r7
 800089c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800089e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008a4:	e885 0003 	stmia.w	r5, {r0, r1}
 Lcd_clear(&lcd);
 80008a8:	481c      	ldr	r0, [pc, #112]	@ (800091c <main+0xfc>)
 80008aa:	f7ff fef4 	bl	8000696 <Lcd_clear>
batt_volt = 5;
 80008ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000924 <main+0x104>)
 80008b0:	2205      	movs	r2, #5
 80008b2:	601a      	str	r2, [r3, #0]


  while (1)
  {

	 if (rxflag){
 80008b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000928 <main+0x108>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d022      	beq.n	8000902 <main+0xe2>


		 if (RxData[5] > 0){
 80008bc:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <main+0x10c>)
 80008be:	795b      	ldrb	r3, [r3, #5]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d01e      	beq.n	8000902 <main+0xe2>
		        //Lcd_clear(&lcd);
		        sprintf(lcdbuffer, "Volt: %d",RxData[5]);
 80008c4:	4b19      	ldr	r3, [pc, #100]	@ (800092c <main+0x10c>)
 80008c6:	795b      	ldrb	r3, [r3, #5]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4919      	ldr	r1, [pc, #100]	@ (8000930 <main+0x110>)
 80008cc:	4819      	ldr	r0, [pc, #100]	@ (8000934 <main+0x114>)
 80008ce:	f003 feef 	bl	80046b0 <siprintf>
		    	Lcd_string(&lcd, lcdbuffer);
 80008d2:	4918      	ldr	r1, [pc, #96]	@ (8000934 <main+0x114>)
 80008d4:	4811      	ldr	r0, [pc, #68]	@ (800091c <main+0xfc>)
 80008d6:	f7ff febf 	bl	8000658 <Lcd_string>
//		         rxflag = 0;  // Reset flag
//		         HAL_Delay(1);
		    	Lcd_clear(&lcd);
 80008da:	4810      	ldr	r0, [pc, #64]	@ (800091c <main+0xfc>)
 80008dc:	f7ff fedb 	bl	8000696 <Lcd_clear>
//		 	    	//  rxflag = 0;
		           unsigned int uart_buffer_expression = sprintf(lcdbuffer2, "%u\r\n", RxData[5]);
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <main+0x10c>)
 80008e2:	795b      	ldrb	r3, [r3, #5]
 80008e4:	461a      	mov	r2, r3
 80008e6:	4914      	ldr	r1, [pc, #80]	@ (8000938 <main+0x118>)
 80008e8:	4814      	ldr	r0, [pc, #80]	@ (800093c <main+0x11c>)
 80008ea:	f003 fee1 	bl	80046b0 <siprintf>
 80008ee:	4603      	mov	r3, r0
 80008f0:	637b      	str	r3, [r7, #52]	@ 0x34


		         	  HAL_UART_Transmit(&huart2, (uint8_t *)lcdbuffer2, uart_buffer_expression, HAL_MAX_DELAY);
 80008f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	4910      	ldr	r1, [pc, #64]	@ (800093c <main+0x11c>)
 80008fc:	4810      	ldr	r0, [pc, #64]	@ (8000940 <main+0x120>)
 80008fe:	f003 fb1b 	bl	8003f38 <HAL_UART_Transmit>

		 }
	 }


DelayTime(100);
 8000902:	2064      	movs	r0, #100	@ 0x64
 8000904:	f7ff ff70 	bl	80007e8 <DelayTime>
	 if (rxflag){
 8000908:	e7d4      	b.n	80008b4 <main+0x94>
 800090a:	bf00      	nop
 800090c:	20000158 	.word	0x20000158
 8000910:	200000c8 	.word	0x200000c8
 8000914:	0800501c 	.word	0x0800501c
 8000918:	0800502c 	.word	0x0800502c
 800091c:	20000284 	.word	0x20000284
 8000920:	40020400 	.word	0x40020400
 8000924:	200002dc 	.word	0x200002dc
 8000928:	200002e0 	.word	0x200002e0
 800092c:	2000027c 	.word	0x2000027c
 8000930:	08005008 	.word	0x08005008
 8000934:	2000029c 	.word	0x2000029c
 8000938:	08005014 	.word	0x08005014
 800093c:	200002bc 	.word	0x200002bc
 8000940:	20000200 	.word	0x20000200

08000944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b094      	sub	sp, #80	@ 0x50
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	2234      	movs	r2, #52	@ 0x34
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f003 fecc 	bl	80046f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a20 <SystemClock_Config+0xdc>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000970:	4a2b      	ldr	r2, [pc, #172]	@ (8000a20 <SystemClock_Config+0xdc>)
 8000972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000976:	6413      	str	r3, [r2, #64]	@ 0x40
 8000978:	4b29      	ldr	r3, [pc, #164]	@ (8000a20 <SystemClock_Config+0xdc>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000984:	2300      	movs	r3, #0
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	4b26      	ldr	r3, [pc, #152]	@ (8000a24 <SystemClock_Config+0xe0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a25      	ldr	r2, [pc, #148]	@ (8000a24 <SystemClock_Config+0xe0>)
 800098e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000992:	6013      	str	r3, [r2, #0]
 8000994:	4b23      	ldr	r3, [pc, #140]	@ (8000a24 <SystemClock_Config+0xe0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a0:	2302      	movs	r3, #2
 80009a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a4:	2301      	movs	r3, #1
 80009a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a8:	2310      	movs	r3, #16
 80009aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ac:	2302      	movs	r3, #2
 80009ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b0:	2300      	movs	r3, #0
 80009b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009b4:	2308      	movs	r3, #8
 80009b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009b8:	23b4      	movs	r3, #180	@ 0xb4
 80009ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009bc:	2302      	movs	r3, #2
 80009be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 fcb1 	bl	8003334 <HAL_RCC_OscConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009d8:	f000 fa92 	bl	8000f00 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009dc:	f002 f910 	bl	8002c00 <HAL_PWREx_EnableOverDrive>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009e6:	f000 fa8b 	bl	8000f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ea:	230f      	movs	r3, #15
 80009ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ee:	2302      	movs	r3, #2
 80009f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80009fc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a00:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	2105      	movs	r1, #5
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f002 f949 	bl	8002ca0 <HAL_RCC_ClockConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a14:	f000 fa74 	bl	8000f00 <Error_Handler>
  }
}
 8000a18:	bf00      	nop
 8000a1a:	3750      	adds	r7, #80	@ 0x50
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40007000 	.word	0x40007000

08000a28 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	@ 0x28
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a2e:	4b29      	ldr	r3, [pc, #164]	@ (8000ad4 <MX_CAN1_Init+0xac>)
 8000a30:	4a29      	ldr	r2, [pc, #164]	@ (8000ad8 <MX_CAN1_Init+0xb0>)
 8000a32:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000a34:	4b27      	ldr	r3, [pc, #156]	@ (8000ad4 <MX_CAN1_Init+0xac>)
 8000a36:	2209      	movs	r2, #9
 8000a38:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a3a:	4b26      	ldr	r3, [pc, #152]	@ (8000ad4 <MX_CAN1_Init+0xac>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a40:	4b24      	ldr	r3, [pc, #144]	@ (8000ad4 <MX_CAN1_Init+0xac>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000a46:	4b23      	ldr	r3, [pc, #140]	@ (8000ad4 <MX_CAN1_Init+0xac>)
 8000a48:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a4c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000a4e:	4b21      	ldr	r3, [pc, #132]	@ (8000ad4 <MX_CAN1_Init+0xac>)
 8000a50:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000a54:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a56:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad4 <MX_CAN1_Init+0xac>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad4 <MX_CAN1_Init+0xac>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad4 <MX_CAN1_Init+0xac>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a68:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad4 <MX_CAN1_Init+0xac>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a6e:	4b19      	ldr	r3, [pc, #100]	@ (8000ad4 <MX_CAN1_Init+0xac>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a74:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <MX_CAN1_Init+0xac>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a7a:	4816      	ldr	r0, [pc, #88]	@ (8000ad4 <MX_CAN1_Init+0xac>)
 8000a7c:	f000 fd64 	bl	8001548 <HAL_CAN_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000a86:	f000 fa3b 	bl	8000f00 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */

  	  	  	  CAN_FilterTypeDef  canonefilter;


    		  canonefilter.FilterBank = 1; //change to 1 if CAN stops working
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	617b      	str	r3, [r7, #20]
    		  canonefilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
    		  canonefilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61fb      	str	r3, [r7, #28]
    		  canonefilter.FilterIdHigh = 0x0000;
 8000a96:	2300      	movs	r3, #0
 8000a98:	603b      	str	r3, [r7, #0]
    		  canonefilter.FilterIdLow = 0x0000;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
    		  canonefilter.FilterMaskIdHigh = 0x0000;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
    		  canonefilter.FilterMaskIdLow = 0x0000;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
    		  canonefilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
    		  canonefilter.FilterActivation = CAN_FILTER_ENABLE;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
    		  canonefilter.SlaveStartFilterBank = 1; // meaningless in our context
 8000aae:	2301      	movs	r3, #1
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24


    		  	  HAL_CAN_ConfigFilter(&hcan1, &canonefilter);
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4807      	ldr	r0, [pc, #28]	@ (8000ad4 <MX_CAN1_Init+0xac>)
 8000ab8:	f000 fe42 	bl	8001740 <HAL_CAN_ConfigFilter>
    		  	  HAL_CAN_Start(&hcan1);
 8000abc:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_CAN1_Init+0xac>)
 8000abe:	f000 ff1f 	bl	8001900 <HAL_CAN_Start>

    		  	  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // potentially not needed
 8000ac2:	2102      	movs	r1, #2
 8000ac4:	4803      	ldr	r0, [pc, #12]	@ (8000ad4 <MX_CAN1_Init+0xac>)
 8000ac6:	f001 f881 	bl	8001bcc <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN1_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	3728      	adds	r7, #40	@ 0x28
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000078 	.word	0x20000078
 8000ad8:	40006400 	.word	0x40006400

08000adc <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	@ 0x28
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_Init 1 */



  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000ae2:	4b31      	ldr	r3, [pc, #196]	@ (8000ba8 <MX_CAN2_Init+0xcc>)
 8000ae4:	4a31      	ldr	r2, [pc, #196]	@ (8000bac <MX_CAN2_Init+0xd0>)
 8000ae6:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8000ae8:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba8 <MX_CAN2_Init+0xcc>)
 8000aea:	2209      	movs	r2, #9
 8000aec:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000aee:	4b2e      	ldr	r3, [pc, #184]	@ (8000ba8 <MX_CAN2_Init+0xcc>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000af4:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba8 <MX_CAN2_Init+0xcc>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000afa:	4b2b      	ldr	r3, [pc, #172]	@ (8000ba8 <MX_CAN2_Init+0xcc>)
 8000afc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000b00:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000b02:	4b29      	ldr	r3, [pc, #164]	@ (8000ba8 <MX_CAN2_Init+0xcc>)
 8000b04:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000b08:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000b0a:	4b27      	ldr	r3, [pc, #156]	@ (8000ba8 <MX_CAN2_Init+0xcc>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000b10:	4b25      	ldr	r3, [pc, #148]	@ (8000ba8 <MX_CAN2_Init+0xcc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000b16:	4b24      	ldr	r3, [pc, #144]	@ (8000ba8 <MX_CAN2_Init+0xcc>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000b1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ba8 <MX_CAN2_Init+0xcc>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000b22:	4b21      	ldr	r3, [pc, #132]	@ (8000ba8 <MX_CAN2_Init+0xcc>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba8 <MX_CAN2_Init+0xcc>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000b2e:	481e      	ldr	r0, [pc, #120]	@ (8000ba8 <MX_CAN2_Init+0xcc>)
 8000b30:	f000 fd0a 	bl	8001548 <HAL_CAN_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000b3a:	f000 f9e1 	bl	8000f00 <Error_Handler>
  /* USER CODE BEGIN CAN2_Init 2 */

  CAN_FilterTypeDef  canfilterconfig;


  		  canfilterconfig.FilterBank = 1; //change to 1 if CAN stops working
 8000b3e:	2301      	movs	r3, #1
 8000b40:	617b      	str	r3, [r7, #20]
  		  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
  		  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61fb      	str	r3, [r7, #28]
  		  canfilterconfig.FilterIdHigh = 0x0000;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	603b      	str	r3, [r7, #0]
  		  canfilterconfig.FilterIdLow = 0x0000;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
  		  canfilterconfig.FilterMaskIdHigh = 0x0000;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
  		  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
  		  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
  		  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	623b      	str	r3, [r7, #32]
  		  canfilterconfig.SlaveStartFilterBank = 14; // meaningless in our context
 8000b62:	230e      	movs	r3, #14
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24


  		  	  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8000b66:	463b      	mov	r3, r7
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480f      	ldr	r0, [pc, #60]	@ (8000ba8 <MX_CAN2_Init+0xcc>)
 8000b6c:	f000 fde8 	bl	8001740 <HAL_CAN_ConfigFilter>
  		  	  HAL_CAN_Start(&hcan2);
 8000b70:	480d      	ldr	r0, [pc, #52]	@ (8000ba8 <MX_CAN2_Init+0xcc>)
 8000b72:	f000 fec5 	bl	8001900 <HAL_CAN_Start>

  		  	  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000b76:	2102      	movs	r1, #2
 8000b78:	480b      	ldr	r0, [pc, #44]	@ (8000ba8 <MX_CAN2_Init+0xcc>)
 8000b7a:	f001 f827 	bl	8001bcc <HAL_CAN_ActivateNotification>



  	  	    TxHeader.StdId = 0x0446;  // ID 2 (to match H7's filter)
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <MX_CAN2_Init+0xd4>)
 8000b80:	f240 4246 	movw	r2, #1094	@ 0x446
 8000b84:	601a      	str	r2, [r3, #0]
 	        TxHeader.IDE = CAN_ID_STD;  // Standard ID
 8000b86:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <MX_CAN2_Init+0xd4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
 	        TxHeader.RTR = CAN_RTR_DATA;  // Data frame
 8000b8c:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <MX_CAN2_Init+0xd4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
 	        TxHeader.DLC = 8;  // Length of data (3 bytes)
 8000b92:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <MX_CAN2_Init+0xd4>)
 8000b94:	2208      	movs	r2, #8
 8000b96:	611a      	str	r2, [r3, #16]
 	        TxHeader.TransmitGlobalTime = DISABLE;
 8000b98:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <MX_CAN2_Init+0xd4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	751a      	strb	r2, [r3, #20]

  /* USER CODE END CAN2_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	@ 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200000a0 	.word	0x200000a0
 8000bac:	40006800 	.word	0x40006800
 8000bb0:	20000248 	.word	0x20000248

08000bb4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bba:	463b      	mov	r3, r7
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000bc2:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <MX_TIM7_Init+0x64>)
 8000bc4:	4a15      	ldr	r2, [pc, #84]	@ (8000c1c <MX_TIM7_Init+0x68>)
 8000bc6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000 - 1;
 8000bc8:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <MX_TIM7_Init+0x64>)
 8000bca:	f242 3227 	movw	r2, #8999	@ 0x2327
 8000bce:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <MX_TIM7_Init+0x64>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100 - 1;
 8000bd6:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <MX_TIM7_Init+0x64>)
 8000bd8:	2263      	movs	r2, #99	@ 0x63
 8000bda:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <MX_TIM7_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000be2:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <MX_TIM7_Init+0x64>)
 8000be4:	f002 fe44 	bl	8003870 <HAL_TIM_Base_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000bee:	f000 f987 	bl	8000f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bf2:	2320      	movs	r3, #32
 8000bf4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4806      	ldr	r0, [pc, #24]	@ (8000c18 <MX_TIM7_Init+0x64>)
 8000c00:	f003 f8ba 	bl	8003d78 <HAL_TIMEx_MasterConfigSynchronization>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000c0a:	f000 f979 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200000c8 	.word	0x200000c8
 8000c1c:	40001400 	.word	0x40001400

08000c20 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000c24:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <MX_TIM11_Init+0x40>)
 8000c26:	4a0f      	ldr	r2, [pc, #60]	@ (8000c64 <MX_TIM11_Init+0x44>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 9000 - 1;
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c60 <MX_TIM11_Init+0x40>)
 8000c2c:	f242 3227 	movw	r2, #8999	@ 0x2327
 8000c30:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <MX_TIM11_Init+0x40>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535 - 1;
 8000c38:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <MX_TIM11_Init+0x40>)
 8000c3a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000c3e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c40:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <MX_TIM11_Init+0x40>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c46:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <MX_TIM11_Init+0x40>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000c4c:	4804      	ldr	r0, [pc, #16]	@ (8000c60 <MX_TIM11_Init+0x40>)
 8000c4e:	f002 fe0f 	bl	8003870 <HAL_TIM_Base_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8000c58:	f000 f952 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000110 	.word	0x20000110
 8000c64:	40014800 	.word	0x40014800

08000c68 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <MX_TIM14_Init+0x40>)
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000cac <MX_TIM14_Init+0x44>)
 8000c70:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 9000 - 1;
 8000c72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca8 <MX_TIM14_Init+0x40>)
 8000c74:	f242 3227 	movw	r2, #8999	@ 0x2327
 8000c78:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <MX_TIM14_Init+0x40>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000 - 1;
 8000c80:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <MX_TIM14_Init+0x40>)
 8000c82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c86:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c88:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <MX_TIM14_Init+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <MX_TIM14_Init+0x40>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000c94:	4804      	ldr	r0, [pc, #16]	@ (8000ca8 <MX_TIM14_Init+0x40>)
 8000c96:	f002 fdeb 	bl	8003870 <HAL_TIM_Base_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000ca0:	f000 f92e 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000158 	.word	0x20000158
 8000cac:	40002000 	.word	0x40002000

08000cb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	@ (8000d00 <MX_USART2_UART_Init+0x50>)
 8000cb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cbc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000cc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000ce8:	f003 f8d6 	bl	8003e98 <HAL_UART_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cf2:	f000 f905 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000200 	.word	0x20000200
 8000d00:	40004400 	.word	0x40004400

08000d04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <MX_DMA_Init+0x3c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a0b      	ldr	r2, [pc, #44]	@ (8000d40 <MX_DMA_Init+0x3c>)
 8000d14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <MX_DMA_Init+0x3c>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 1, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2101      	movs	r1, #1
 8000d2a:	200d      	movs	r0, #13
 8000d2c:	f001 fa7f 	bl	800222e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d30:	200d      	movs	r0, #13
 8000d32:	f001 fa98 	bl	8002266 <HAL_NVIC_EnableIRQ>

}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40023800 	.word	0x40023800

08000d44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	4b44      	ldr	r3, [pc, #272]	@ (8000e70 <MX_GPIO_Init+0x12c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a43      	ldr	r2, [pc, #268]	@ (8000e70 <MX_GPIO_Init+0x12c>)
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b41      	ldr	r3, [pc, #260]	@ (8000e70 <MX_GPIO_Init+0x12c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0304 	and.w	r3, r3, #4
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e70 <MX_GPIO_Init+0x12c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	4a3c      	ldr	r2, [pc, #240]	@ (8000e70 <MX_GPIO_Init+0x12c>)
 8000d80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d86:	4b3a      	ldr	r3, [pc, #232]	@ (8000e70 <MX_GPIO_Init+0x12c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	4b36      	ldr	r3, [pc, #216]	@ (8000e70 <MX_GPIO_Init+0x12c>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	4a35      	ldr	r2, [pc, #212]	@ (8000e70 <MX_GPIO_Init+0x12c>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da2:	4b33      	ldr	r3, [pc, #204]	@ (8000e70 <MX_GPIO_Init+0x12c>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e70 <MX_GPIO_Init+0x12c>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a2e      	ldr	r2, [pc, #184]	@ (8000e70 <MX_GPIO_Init+0x12c>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8000e70 <MX_GPIO_Init+0x12c>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f646 116f 	movw	r1, #26991	@ 0x696f
 8000dd0:	4828      	ldr	r0, [pc, #160]	@ (8000e74 <MX_GPIO_Init+0x130>)
 8000dd2:	f001 fee1 	bl	8002b98 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f240 7122 	movw	r1, #1826	@ 0x722
 8000ddc:	4826      	ldr	r0, [pc, #152]	@ (8000e78 <MX_GPIO_Init+0x134>)
 8000dde:	f001 fedb 	bl	8002b98 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_13
 8000de2:	2200      	movs	r2, #0
 8000de4:	f24e 713d 	movw	r1, #59197	@ 0xe73d
 8000de8:	4824      	ldr	r0, [pc, #144]	@ (8000e7c <MX_GPIO_Init+0x138>)
 8000dea:	f001 fed5 	bl	8002b98 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC0 PC1
                           PC2 PC3 PC5 PC6
                           PC8 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1
 8000dee:	f646 136f 	movw	r3, #26991	@ 0x696f
 8000df2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	481b      	ldr	r0, [pc, #108]	@ (8000e74 <MX_GPIO_Init+0x130>)
 8000e08:	f001 fd32 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
 8000e0c:	f240 7322 	movw	r3, #1826	@ 0x722
 8000e10:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4814      	ldr	r0, [pc, #80]	@ (8000e78 <MX_GPIO_Init+0x134>)
 8000e26:	f001 fd23 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e2a:	2310      	movs	r3, #16
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e3a:	2305      	movs	r3, #5
 8000e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	480c      	ldr	r0, [pc, #48]	@ (8000e78 <MX_GPIO_Init+0x134>)
 8000e46:	f001 fd13 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB13
                           PB14 PB15 PB3 PB4
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_13
 8000e4a:	f24e 733d 	movw	r3, #59197	@ 0xe73d
 8000e4e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	4806      	ldr	r0, [pc, #24]	@ (8000e7c <MX_GPIO_Init+0x138>)
 8000e64:	f001 fd04 	bl	8002870 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e68:	bf00      	nop
 8000e6a:	3728      	adds	r7, #40	@ 0x28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020800 	.word	0x40020800
 8000e78:	40020000 	.word	0x40020000
 8000e7c:	40020400 	.word	0x40020400

08000e80 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

	// changed values hcan->Instance = CAN2 and inside get hcan -> &hcan2

	if (hcan->Instance == CAN2) {
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d112      	bne.n	8000eb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000e92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000e94:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec8 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000e96:	2100      	movs	r1, #0
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f000 fd75 	bl	8001988 <HAL_CAN_GetRxMessage>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
  {

    /* Reception Error */
    Error_Handler();
 8000ea4:	f000 f82c 	bl	8000f00 <Error_Handler>
  	  }


  	  batt_volt = RxData[5];
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000eaa:	795b      	ldrb	r3, [r3, #5]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000eb0:	601a      	str	r2, [r3, #0]
    	rxflag = 1;
 8000eb2:	4b07      	ldr	r3, [pc, #28]	@ (8000ed0 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	701a      	strb	r2, [r3, #0]
  //}


	}

}
 8000eb8:	bf00      	nop
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40006800 	.word	0x40006800
 8000ec4:	2000027c 	.word	0x2000027c
 8000ec8:	20000260 	.word	0x20000260
 8000ecc:	200002dc 	.word	0x200002dc
 8000ed0:	200002e0 	.word	0x200002e0

08000ed4 <HAL_TIM_PeriodElapsedCallback>:


// The function below this is the timer interrupt callback (Code within the specific timers constantly executes)

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
//            }
////        }
////    }
////
////    // set a priority between the interrupts since the time at which they refresh doesn't matter as they will eventually run into each other
    if (htim->Instance == TIM7) {
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a05      	ldr	r2, [pc, #20]	@ (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d103      	bne.n	8000eee <HAL_TIM_PeriodElapsedCallback+0x1a>
//    	DisplayRxData(oil_temp);

    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	4804      	ldr	r0, [pc, #16]	@ (8000efc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000eea:	f001 fe6e 	bl	8002bca <HAL_GPIO_TogglePin>

    }
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40001400 	.word	0x40001400
 8000efc:	40020000 	.word	0x40020000

08000f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
}
 8000f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <Error_Handler+0x8>

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f22:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	4a08      	ldr	r2, [pc, #32]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f3e:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800

08000f5c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	@ 0x30
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a4b      	ldr	r2, [pc, #300]	@ (80010a8 <HAL_CAN_MspInit+0x14c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d13e      	bne.n	8000ffc <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000f7e:	4b4b      	ldr	r3, [pc, #300]	@ (80010ac <HAL_CAN_MspInit+0x150>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	3301      	adds	r3, #1
 8000f84:	4a49      	ldr	r2, [pc, #292]	@ (80010ac <HAL_CAN_MspInit+0x150>)
 8000f86:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000f88:	4b48      	ldr	r3, [pc, #288]	@ (80010ac <HAL_CAN_MspInit+0x150>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d10d      	bne.n	8000fac <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]
 8000f94:	4b46      	ldr	r3, [pc, #280]	@ (80010b0 <HAL_CAN_MspInit+0x154>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	4a45      	ldr	r2, [pc, #276]	@ (80010b0 <HAL_CAN_MspInit+0x154>)
 8000f9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa0:	4b43      	ldr	r3, [pc, #268]	@ (80010b0 <HAL_CAN_MspInit+0x154>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fa8:	61bb      	str	r3, [r7, #24]
 8000faa:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	4b3f      	ldr	r3, [pc, #252]	@ (80010b0 <HAL_CAN_MspInit+0x154>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb4:	4a3e      	ldr	r2, [pc, #248]	@ (80010b0 <HAL_CAN_MspInit+0x154>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbc:	4b3c      	ldr	r3, [pc, #240]	@ (80010b0 <HAL_CAN_MspInit+0x154>)
 8000fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fc8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fda:	2309      	movs	r3, #9
 8000fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4833      	ldr	r0, [pc, #204]	@ (80010b4 <HAL_CAN_MspInit+0x158>)
 8000fe6:	f001 fc43 	bl	8002870 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2102      	movs	r1, #2
 8000fee:	2014      	movs	r0, #20
 8000ff0:	f001 f91d 	bl	800222e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ff4:	2014      	movs	r0, #20
 8000ff6:	f001 f936 	bl	8002266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000ffa:	e050      	b.n	800109e <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a2d      	ldr	r2, [pc, #180]	@ (80010b8 <HAL_CAN_MspInit+0x15c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d14b      	bne.n	800109e <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	4b29      	ldr	r3, [pc, #164]	@ (80010b0 <HAL_CAN_MspInit+0x154>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	4a28      	ldr	r2, [pc, #160]	@ (80010b0 <HAL_CAN_MspInit+0x154>)
 8001010:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001014:	6413      	str	r3, [r2, #64]	@ 0x40
 8001016:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <HAL_CAN_MspInit+0x154>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001022:	4b22      	ldr	r3, [pc, #136]	@ (80010ac <HAL_CAN_MspInit+0x150>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	4a20      	ldr	r2, [pc, #128]	@ (80010ac <HAL_CAN_MspInit+0x150>)
 800102a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800102c:	4b1f      	ldr	r3, [pc, #124]	@ (80010ac <HAL_CAN_MspInit+0x150>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d10d      	bne.n	8001050 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	4b1d      	ldr	r3, [pc, #116]	@ (80010b0 <HAL_CAN_MspInit+0x154>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103c:	4a1c      	ldr	r2, [pc, #112]	@ (80010b0 <HAL_CAN_MspInit+0x154>)
 800103e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001042:	6413      	str	r3, [r2, #64]	@ 0x40
 8001044:	4b1a      	ldr	r3, [pc, #104]	@ (80010b0 <HAL_CAN_MspInit+0x154>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	4b16      	ldr	r3, [pc, #88]	@ (80010b0 <HAL_CAN_MspInit+0x154>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001058:	4a15      	ldr	r2, [pc, #84]	@ (80010b0 <HAL_CAN_MspInit+0x154>)
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001060:	4b13      	ldr	r3, [pc, #76]	@ (80010b0 <HAL_CAN_MspInit+0x154>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 800106c:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8001070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800107e:	2309      	movs	r3, #9
 8001080:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	480c      	ldr	r0, [pc, #48]	@ (80010bc <HAL_CAN_MspInit+0x160>)
 800108a:	f001 fbf1 	bl	8002870 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 2, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2102      	movs	r1, #2
 8001092:	2040      	movs	r0, #64	@ 0x40
 8001094:	f001 f8cb 	bl	800222e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001098:	2040      	movs	r0, #64	@ 0x40
 800109a:	f001 f8e4 	bl	8002266 <HAL_NVIC_EnableIRQ>
}
 800109e:	bf00      	nop
 80010a0:	3730      	adds	r7, #48	@ 0x30
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40006400 	.word	0x40006400
 80010ac:	200002e4 	.word	0x200002e4
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40020000 	.word	0x40020000
 80010b8:	40006800 	.word	0x40006800
 80010bc:	40020400 	.word	0x40020400

080010c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a3f      	ldr	r2, [pc, #252]	@ (80011cc <HAL_TIM_Base_MspInit+0x10c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d148      	bne.n	8001164 <HAL_TIM_Base_MspInit+0xa4>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	4b3e      	ldr	r3, [pc, #248]	@ (80011d0 <HAL_TIM_Base_MspInit+0x110>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	4a3d      	ldr	r2, [pc, #244]	@ (80011d0 <HAL_TIM_Base_MspInit+0x110>)
 80010dc:	f043 0320 	orr.w	r3, r3, #32
 80010e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e2:	4b3b      	ldr	r3, [pc, #236]	@ (80011d0 <HAL_TIM_Base_MspInit+0x110>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	f003 0320 	and.w	r3, r3, #32
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697b      	ldr	r3, [r7, #20]

    /* TIM7 DMA Init */
    /* TIM7_UP Init */
    hdma_tim7_up.Instance = DMA1_Stream2;
 80010ee:	4b39      	ldr	r3, [pc, #228]	@ (80011d4 <HAL_TIM_Base_MspInit+0x114>)
 80010f0:	4a39      	ldr	r2, [pc, #228]	@ (80011d8 <HAL_TIM_Base_MspInit+0x118>)
 80010f2:	601a      	str	r2, [r3, #0]
    hdma_tim7_up.Init.Channel = DMA_CHANNEL_1;
 80010f4:	4b37      	ldr	r3, [pc, #220]	@ (80011d4 <HAL_TIM_Base_MspInit+0x114>)
 80010f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010fa:	605a      	str	r2, [r3, #4]
    hdma_tim7_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010fc:	4b35      	ldr	r3, [pc, #212]	@ (80011d4 <HAL_TIM_Base_MspInit+0x114>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
    hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001102:	4b34      	ldr	r3, [pc, #208]	@ (80011d4 <HAL_TIM_Base_MspInit+0x114>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
    hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 8001108:	4b32      	ldr	r3, [pc, #200]	@ (80011d4 <HAL_TIM_Base_MspInit+0x114>)
 800110a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800110e:	611a      	str	r2, [r3, #16]
    hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001110:	4b30      	ldr	r3, [pc, #192]	@ (80011d4 <HAL_TIM_Base_MspInit+0x114>)
 8001112:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001116:	615a      	str	r2, [r3, #20]
    hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001118:	4b2e      	ldr	r3, [pc, #184]	@ (80011d4 <HAL_TIM_Base_MspInit+0x114>)
 800111a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800111e:	619a      	str	r2, [r3, #24]
    hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 8001120:	4b2c      	ldr	r3, [pc, #176]	@ (80011d4 <HAL_TIM_Base_MspInit+0x114>)
 8001122:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001126:	61da      	str	r2, [r3, #28]
    hdma_tim7_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001128:	4b2a      	ldr	r3, [pc, #168]	@ (80011d4 <HAL_TIM_Base_MspInit+0x114>)
 800112a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800112e:	621a      	str	r2, [r3, #32]
    hdma_tim7_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001130:	4b28      	ldr	r3, [pc, #160]	@ (80011d4 <HAL_TIM_Base_MspInit+0x114>)
 8001132:	2200      	movs	r2, #0
 8001134:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim7_up) != HAL_OK)
 8001136:	4827      	ldr	r0, [pc, #156]	@ (80011d4 <HAL_TIM_Base_MspInit+0x114>)
 8001138:	f001 f8b0 	bl	800229c <HAL_DMA_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8001142:	f7ff fedd 	bl	8000f00 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a22      	ldr	r2, [pc, #136]	@ (80011d4 <HAL_TIM_Base_MspInit+0x114>)
 800114a:	621a      	str	r2, [r3, #32]
 800114c:	4a21      	ldr	r2, [pc, #132]	@ (80011d4 <HAL_TIM_Base_MspInit+0x114>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2101      	movs	r1, #1
 8001156:	2037      	movs	r0, #55	@ 0x37
 8001158:	f001 f869 	bl	800222e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800115c:	2037      	movs	r0, #55	@ 0x37
 800115e:	f001 f882 	bl	8002266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001162:	e02e      	b.n	80011c2 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM11)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a1c      	ldr	r2, [pc, #112]	@ (80011dc <HAL_TIM_Base_MspInit+0x11c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d10e      	bne.n	800118c <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b17      	ldr	r3, [pc, #92]	@ (80011d0 <HAL_TIM_Base_MspInit+0x110>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001176:	4a16      	ldr	r2, [pc, #88]	@ (80011d0 <HAL_TIM_Base_MspInit+0x110>)
 8001178:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800117c:	6453      	str	r3, [r2, #68]	@ 0x44
 800117e:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <HAL_TIM_Base_MspInit+0x110>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001182:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
}
 800118a:	e01a      	b.n	80011c2 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM14)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a13      	ldr	r2, [pc, #76]	@ (80011e0 <HAL_TIM_Base_MspInit+0x120>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d115      	bne.n	80011c2 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b0d      	ldr	r3, [pc, #52]	@ (80011d0 <HAL_TIM_Base_MspInit+0x110>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	4a0c      	ldr	r2, [pc, #48]	@ (80011d0 <HAL_TIM_Base_MspInit+0x110>)
 80011a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a6:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <HAL_TIM_Base_MspInit+0x110>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 2, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2102      	movs	r1, #2
 80011b6:	202d      	movs	r0, #45	@ 0x2d
 80011b8:	f001 f839 	bl	800222e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80011bc:	202d      	movs	r0, #45	@ 0x2d
 80011be:	f001 f852 	bl	8002266 <HAL_NVIC_EnableIRQ>
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40001400 	.word	0x40001400
 80011d0:	40023800 	.word	0x40023800
 80011d4:	200001a0 	.word	0x200001a0
 80011d8:	40026040 	.word	0x40026040
 80011dc:	40014800 	.word	0x40014800
 80011e0:	40002000 	.word	0x40002000

080011e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	@ 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a19      	ldr	r2, [pc, #100]	@ (8001268 <HAL_UART_MspInit+0x84>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d12b      	bne.n	800125e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	4b18      	ldr	r3, [pc, #96]	@ (800126c <HAL_UART_MspInit+0x88>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	4a17      	ldr	r2, [pc, #92]	@ (800126c <HAL_UART_MspInit+0x88>)
 8001210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001214:	6413      	str	r3, [r2, #64]	@ 0x40
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <HAL_UART_MspInit+0x88>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b11      	ldr	r3, [pc, #68]	@ (800126c <HAL_UART_MspInit+0x88>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a10      	ldr	r2, [pc, #64]	@ (800126c <HAL_UART_MspInit+0x88>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <HAL_UART_MspInit+0x88>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800123e:	230c      	movs	r3, #12
 8001240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124a:	2303      	movs	r3, #3
 800124c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800124e:	2307      	movs	r3, #7
 8001250:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	@ (8001270 <HAL_UART_MspInit+0x8c>)
 800125a:	f001 fb09 	bl	8002870 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800125e:	bf00      	nop
 8001260:	3728      	adds	r7, #40	@ 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40004400 	.word	0x40004400
 800126c:	40023800 	.word	0x40023800
 8001270:	40020000 	.word	0x40020000

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <NMI_Handler+0x4>

0800127c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <MemManage_Handler+0x4>

0800128c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <UsageFault_Handler+0x4>

0800129c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ca:	f000 f8f9 	bl	80014c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim7_up);
 80012d8:	4802      	ldr	r0, [pc, #8]	@ (80012e4 <DMA1_Stream2_IRQHandler+0x10>)
 80012da:	f001 f88d 	bl	80023f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200001a0 	.word	0x200001a0

080012e8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012ec:	4802      	ldr	r0, [pc, #8]	@ (80012f8 <CAN1_RX0_IRQHandler+0x10>)
 80012ee:	f000 fc93 	bl	8001c18 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000078 	.word	0x20000078

080012fc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001300:	4802      	ldr	r0, [pc, #8]	@ (800130c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001302:	f002 fb75 	bl	80039f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000158 	.word	0x20000158

08001310 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001314:	4802      	ldr	r0, [pc, #8]	@ (8001320 <TIM7_IRQHandler+0x10>)
 8001316:	f002 fb6b 	bl	80039f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200000c8 	.word	0x200000c8

08001324 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001328:	4802      	ldr	r0, [pc, #8]	@ (8001334 <CAN2_RX0_IRQHandler+0x10>)
 800132a:	f000 fc75 	bl	8001c18 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200000a0 	.word	0x200000a0

08001338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001340:	4a14      	ldr	r2, [pc, #80]	@ (8001394 <_sbrk+0x5c>)
 8001342:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <_sbrk+0x60>)
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800134c:	4b13      	ldr	r3, [pc, #76]	@ (800139c <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001354:	4b11      	ldr	r3, [pc, #68]	@ (800139c <_sbrk+0x64>)
 8001356:	4a12      	ldr	r2, [pc, #72]	@ (80013a0 <_sbrk+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135a:	4b10      	ldr	r3, [pc, #64]	@ (800139c <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	429a      	cmp	r2, r3
 8001366:	d207      	bcs.n	8001378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001368:	f003 f9ca 	bl	8004700 <__errno>
 800136c:	4603      	mov	r3, r0
 800136e:	220c      	movs	r2, #12
 8001370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	e009      	b.n	800138c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001378:	4b08      	ldr	r3, [pc, #32]	@ (800139c <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137e:	4b07      	ldr	r3, [pc, #28]	@ (800139c <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	4a05      	ldr	r2, [pc, #20]	@ (800139c <_sbrk+0x64>)
 8001388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20020000 	.word	0x20020000
 8001398:	00000400 	.word	0x00000400
 800139c:	200002e8 	.word	0x200002e8
 80013a0:	20000438 	.word	0x20000438

080013a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <SystemInit+0x20>)
 80013aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ae:	4a05      	ldr	r2, [pc, #20]	@ (80013c4 <SystemInit+0x20>)
 80013b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001400 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013cc:	f7ff ffea 	bl	80013a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d0:	480c      	ldr	r0, [pc, #48]	@ (8001404 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013d2:	490d      	ldr	r1, [pc, #52]	@ (8001408 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013d4:	4a0d      	ldr	r2, [pc, #52]	@ (800140c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d8:	e002      	b.n	80013e0 <LoopCopyDataInit>

080013da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013de:	3304      	adds	r3, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e4:	d3f9      	bcc.n	80013da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001414 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ec:	e001      	b.n	80013f2 <LoopFillZerobss>

080013ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f0:	3204      	adds	r2, #4

080013f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f4:	d3fb      	bcc.n	80013ee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013f6:	f003 f989 	bl	800470c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fa:	f7ff fa11 	bl	8000820 <main>
  bx  lr    
 80013fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001400:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001408:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800140c:	08005098 	.word	0x08005098
  ldr r2, =_sbss
 8001410:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001414:	20000438 	.word	0x20000438

08001418 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC_IRQHandler>
	...

0800141c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001420:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0d      	ldr	r2, [pc, #52]	@ (800145c <HAL_Init+0x40>)
 8001426:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800142a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800142c:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0a      	ldr	r2, [pc, #40]	@ (800145c <HAL_Init+0x40>)
 8001432:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001436:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001438:	4b08      	ldr	r3, [pc, #32]	@ (800145c <HAL_Init+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a07      	ldr	r2, [pc, #28]	@ (800145c <HAL_Init+0x40>)
 800143e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001442:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001444:	2003      	movs	r0, #3
 8001446:	f000 fee7 	bl	8002218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800144a:	200f      	movs	r0, #15
 800144c:	f000 f808 	bl	8001460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001450:	f7ff fd5c 	bl	8000f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023c00 	.word	0x40023c00

08001460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001468:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <HAL_InitTick+0x54>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <HAL_InitTick+0x58>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4619      	mov	r1, r3
 8001472:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001476:	fbb3 f3f1 	udiv	r3, r3, r1
 800147a:	fbb2 f3f3 	udiv	r3, r2, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f000 feff 	bl	8002282 <HAL_SYSTICK_Config>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e00e      	b.n	80014ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b0f      	cmp	r3, #15
 8001492:	d80a      	bhi.n	80014aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001494:	2200      	movs	r2, #0
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f000 fec7 	bl	800222e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a0:	4a06      	ldr	r2, [pc, #24]	@ (80014bc <HAL_InitTick+0x5c>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e000      	b.n	80014ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000000 	.word	0x20000000
 80014b8:	20000008 	.word	0x20000008
 80014bc:	20000004 	.word	0x20000004

080014c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c4:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <HAL_IncTick+0x20>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <HAL_IncTick+0x24>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4413      	add	r3, r2
 80014d0:	4a04      	ldr	r2, [pc, #16]	@ (80014e4 <HAL_IncTick+0x24>)
 80014d2:	6013      	str	r3, [r2, #0]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000008 	.word	0x20000008
 80014e4:	200002ec 	.word	0x200002ec

080014e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return uwTick;
 80014ec:	4b03      	ldr	r3, [pc, #12]	@ (80014fc <HAL_GetTick+0x14>)
 80014ee:	681b      	ldr	r3, [r3, #0]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	200002ec 	.word	0x200002ec

08001500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001508:	f7ff ffee 	bl	80014e8 <HAL_GetTick>
 800150c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001518:	d005      	beq.n	8001526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151a:	4b0a      	ldr	r3, [pc, #40]	@ (8001544 <HAL_Delay+0x44>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4413      	add	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001526:	bf00      	nop
 8001528:	f7ff ffde 	bl	80014e8 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	429a      	cmp	r2, r3
 8001536:	d8f7      	bhi.n	8001528 <HAL_Delay+0x28>
  {
  }
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000008 	.word	0x20000008

08001548 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e0ed      	b.n	8001736 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff fcf8 	bl	8000f5c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0201 	orr.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800157c:	f7ff ffb4 	bl	80014e8 <HAL_GetTick>
 8001580:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001582:	e012      	b.n	80015aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001584:	f7ff ffb0 	bl	80014e8 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b0a      	cmp	r3, #10
 8001590:	d90b      	bls.n	80015aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001596:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2205      	movs	r2, #5
 80015a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0c5      	b.n	8001736 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0e5      	beq.n	8001584 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0202 	bic.w	r2, r2, #2
 80015c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015c8:	f7ff ff8e 	bl	80014e8 <HAL_GetTick>
 80015cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015ce:	e012      	b.n	80015f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015d0:	f7ff ff8a 	bl	80014e8 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b0a      	cmp	r3, #10
 80015dc:	d90b      	bls.n	80015f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2205      	movs	r2, #5
 80015ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e09f      	b.n	8001736 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1e5      	bne.n	80015d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7e1b      	ldrb	r3, [r3, #24]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d108      	bne.n	800161e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	e007      	b.n	800162e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800162c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	7e5b      	ldrb	r3, [r3, #25]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d108      	bne.n	8001648 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	e007      	b.n	8001658 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001656:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7e9b      	ldrb	r3, [r3, #26]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d108      	bne.n	8001672 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0220 	orr.w	r2, r2, #32
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	e007      	b.n	8001682 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0220 	bic.w	r2, r2, #32
 8001680:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	7edb      	ldrb	r3, [r3, #27]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d108      	bne.n	800169c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0210 	bic.w	r2, r2, #16
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e007      	b.n	80016ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0210 	orr.w	r2, r2, #16
 80016aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	7f1b      	ldrb	r3, [r3, #28]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d108      	bne.n	80016c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0208 	orr.w	r2, r2, #8
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	e007      	b.n	80016d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0208 	bic.w	r2, r2, #8
 80016d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7f5b      	ldrb	r3, [r3, #29]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d108      	bne.n	80016f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f042 0204 	orr.w	r2, r2, #4
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	e007      	b.n	8001700 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0204 	bic.w	r2, r2, #4
 80016fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	431a      	orrs	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	ea42 0103 	orr.w	r1, r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	1e5a      	subs	r2, r3, #1
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001740:	b480      	push	{r7}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001756:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001758:	7cfb      	ldrb	r3, [r7, #19]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d003      	beq.n	8001766 <HAL_CAN_ConfigFilter+0x26>
 800175e:	7cfb      	ldrb	r3, [r7, #19]
 8001760:	2b02      	cmp	r3, #2
 8001762:	f040 80be 	bne.w	80018e2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001766:	4b65      	ldr	r3, [pc, #404]	@ (80018fc <HAL_CAN_ConfigFilter+0x1bc>)
 8001768:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001770:	f043 0201 	orr.w	r2, r3, #1
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001780:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001794:	021b      	lsls	r3, r3, #8
 8001796:	431a      	orrs	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	f003 031f 	and.w	r3, r3, #31
 80017a6:	2201      	movs	r2, #1
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	401a      	ands	r2, r3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d123      	bne.n	8001810 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	401a      	ands	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017ea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3248      	adds	r2, #72	@ 0x48
 80017f0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001804:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001806:	6979      	ldr	r1, [r7, #20]
 8001808:	3348      	adds	r3, #72	@ 0x48
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	440b      	add	r3, r1
 800180e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d122      	bne.n	800185e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	431a      	orrs	r2, r3
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001838:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	3248      	adds	r2, #72	@ 0x48
 800183e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001852:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001854:	6979      	ldr	r1, [r7, #20]
 8001856:	3348      	adds	r3, #72	@ 0x48
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	440b      	add	r3, r1
 800185c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d109      	bne.n	800187a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	43db      	mvns	r3, r3
 8001870:	401a      	ands	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001878:	e007      	b.n	800188a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	431a      	orrs	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d109      	bne.n	80018a6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	43db      	mvns	r3, r3
 800189c:	401a      	ands	r2, r3
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80018a4:	e007      	b.n	80018b6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d107      	bne.n	80018ce <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018d4:	f023 0201 	bic.w	r2, r3, #1
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	e006      	b.n	80018f0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
  }
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	371c      	adds	r7, #28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	40006400 	.word	0x40006400

08001900 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b01      	cmp	r3, #1
 8001912:	d12e      	bne.n	8001972 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2202      	movs	r2, #2
 8001918:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0201 	bic.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800192c:	f7ff fddc 	bl	80014e8 <HAL_GetTick>
 8001930:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001932:	e012      	b.n	800195a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001934:	f7ff fdd8 	bl	80014e8 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b0a      	cmp	r3, #10
 8001940:	d90b      	bls.n	800195a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001946:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2205      	movs	r2, #5
 8001952:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e012      	b.n	8001980 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1e5      	bne.n	8001934 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	e006      	b.n	8001980 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001976:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
  }
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800199c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800199e:	7dfb      	ldrb	r3, [r7, #23]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d003      	beq.n	80019ac <HAL_CAN_GetRxMessage+0x24>
 80019a4:	7dfb      	ldrb	r3, [r7, #23]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	f040 8103 	bne.w	8001bb2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10e      	bne.n	80019d0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d116      	bne.n	80019ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0f7      	b.n	8001bc0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d107      	bne.n	80019ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e0e8      	b.n	8001bc0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	331b      	adds	r3, #27
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4413      	add	r3, r2
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0204 	and.w	r2, r3, #4
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10c      	bne.n	8001a26 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	331b      	adds	r3, #27
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	4413      	add	r3, r2
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	0d5b      	lsrs	r3, r3, #21
 8001a1c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	e00b      	b.n	8001a3e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	331b      	adds	r3, #27
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	4413      	add	r3, r2
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	08db      	lsrs	r3, r3, #3
 8001a36:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	331b      	adds	r3, #27
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	4413      	add	r3, r2
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0202 	and.w	r2, r3, #2
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	331b      	adds	r3, #27
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	4413      	add	r3, r2
 8001a60:	3304      	adds	r3, #4
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0308 	and.w	r3, r3, #8
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2208      	movs	r2, #8
 8001a70:	611a      	str	r2, [r3, #16]
 8001a72:	e00b      	b.n	8001a8c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	331b      	adds	r3, #27
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	4413      	add	r3, r2
 8001a80:	3304      	adds	r3, #4
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 020f 	and.w	r2, r3, #15
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	331b      	adds	r3, #27
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	4413      	add	r3, r2
 8001a98:	3304      	adds	r3, #4
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	331b      	adds	r3, #27
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	4413      	add	r3, r2
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	0c1b      	lsrs	r3, r3, #16
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	4413      	add	r3, r2
 8001adc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	0a1a      	lsrs	r2, r3, #8
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	4413      	add	r3, r2
 8001af6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	0c1a      	lsrs	r2, r3, #16
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	3302      	adds	r3, #2
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	011b      	lsls	r3, r3, #4
 8001b0e:	4413      	add	r3, r2
 8001b10:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	0e1a      	lsrs	r2, r3, #24
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	3303      	adds	r3, #3
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	011b      	lsls	r3, r3, #4
 8001b28:	4413      	add	r3, r2
 8001b2a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	3304      	adds	r3, #4
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	4413      	add	r3, r2
 8001b42:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	0a1a      	lsrs	r2, r3, #8
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	3305      	adds	r3, #5
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	011b      	lsls	r3, r3, #4
 8001b5a:	4413      	add	r3, r2
 8001b5c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	0c1a      	lsrs	r2, r3, #16
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	3306      	adds	r3, #6
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	4413      	add	r3, r2
 8001b76:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0e1a      	lsrs	r2, r3, #24
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	3307      	adds	r3, #7
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d108      	bne.n	8001b9e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0220 	orr.w	r2, r2, #32
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	e007      	b.n	8001bae <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	691a      	ldr	r2, [r3, #16]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f042 0220 	orr.w	r2, r2, #32
 8001bac:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e006      	b.n	8001bc0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
  }
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	371c      	adds	r7, #28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bdc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d002      	beq.n	8001bea <HAL_CAN_ActivateNotification+0x1e>
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d109      	bne.n	8001bfe <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6959      	ldr	r1, [r3, #20]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	e006      	b.n	8001c0c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c02:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
  }
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	@ 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d07c      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d023      	beq.n	8001cb0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f983 	bl	8001f86 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c80:	e016      	b.n	8001cb0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d004      	beq.n	8001c96 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c94:	e00c      	b.n	8001cb0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d004      	beq.n	8001caa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ca6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ca8:	e002      	b.n	8001cb0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f989 	bl	8001fc2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d024      	beq.n	8001d04 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cc2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f963 	bl	8001f9a <HAL_CAN_TxMailbox1CompleteCallback>
 8001cd4:	e016      	b.n	8001d04 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d004      	beq.n	8001cea <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ce8:	e00c      	b.n	8001d04 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d004      	beq.n	8001cfe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cfc:	e002      	b.n	8001d04 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f969 	bl	8001fd6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d024      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f943 	bl	8001fae <HAL_CAN_TxMailbox2CompleteCallback>
 8001d28:	e016      	b.n	8001d58 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d004      	beq.n	8001d3e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d3c:	e00c      	b.n	8001d58 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d004      	beq.n	8001d52 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d50:	e002      	b.n	8001d58 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f949 	bl	8001fea <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00c      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d007      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d72:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2210      	movs	r2, #16
 8001d7a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d006      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2208      	movs	r2, #8
 8001d96:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f930 	bl	8001ffe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d009      	beq.n	8001dbc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d002      	beq.n	8001dbc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff f862 	bl	8000e80 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00c      	beq.n	8001de0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d007      	beq.n	8001de0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2210      	movs	r2, #16
 8001dde:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00b      	beq.n	8001e02 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2208      	movs	r2, #8
 8001dfa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f912 	bl	8002026 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d009      	beq.n	8001e20 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f8f9 	bl	8002012 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00b      	beq.n	8001e42 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f003 0310 	and.w	r3, r3, #16
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d006      	beq.n	8001e42 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2210      	movs	r2, #16
 8001e3a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f8fc 	bl	800203a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00b      	beq.n	8001e64 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d006      	beq.n	8001e64 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2208      	movs	r2, #8
 8001e5c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f8f5 	bl	800204e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d07b      	beq.n	8001f66 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d072      	beq.n	8001f5e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d008      	beq.n	8001e94 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d008      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eaa:	f043 0302 	orr.w	r3, r3, #2
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d008      	beq.n	8001ecc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec6:	f043 0304 	orr.w	r3, r3, #4
 8001eca:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d043      	beq.n	8001f5e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d03e      	beq.n	8001f5e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ee6:	2b60      	cmp	r3, #96	@ 0x60
 8001ee8:	d02b      	beq.n	8001f42 <HAL_CAN_IRQHandler+0x32a>
 8001eea:	2b60      	cmp	r3, #96	@ 0x60
 8001eec:	d82e      	bhi.n	8001f4c <HAL_CAN_IRQHandler+0x334>
 8001eee:	2b50      	cmp	r3, #80	@ 0x50
 8001ef0:	d022      	beq.n	8001f38 <HAL_CAN_IRQHandler+0x320>
 8001ef2:	2b50      	cmp	r3, #80	@ 0x50
 8001ef4:	d82a      	bhi.n	8001f4c <HAL_CAN_IRQHandler+0x334>
 8001ef6:	2b40      	cmp	r3, #64	@ 0x40
 8001ef8:	d019      	beq.n	8001f2e <HAL_CAN_IRQHandler+0x316>
 8001efa:	2b40      	cmp	r3, #64	@ 0x40
 8001efc:	d826      	bhi.n	8001f4c <HAL_CAN_IRQHandler+0x334>
 8001efe:	2b30      	cmp	r3, #48	@ 0x30
 8001f00:	d010      	beq.n	8001f24 <HAL_CAN_IRQHandler+0x30c>
 8001f02:	2b30      	cmp	r3, #48	@ 0x30
 8001f04:	d822      	bhi.n	8001f4c <HAL_CAN_IRQHandler+0x334>
 8001f06:	2b10      	cmp	r3, #16
 8001f08:	d002      	beq.n	8001f10 <HAL_CAN_IRQHandler+0x2f8>
 8001f0a:	2b20      	cmp	r3, #32
 8001f0c:	d005      	beq.n	8001f1a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f0e:	e01d      	b.n	8001f4c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f12:	f043 0308 	orr.w	r3, r3, #8
 8001f16:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f18:	e019      	b.n	8001f4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	f043 0310 	orr.w	r3, r3, #16
 8001f20:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f22:	e014      	b.n	8001f4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f26:	f043 0320 	orr.w	r3, r3, #32
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f2c:	e00f      	b.n	8001f4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f34:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f36:	e00a      	b.n	8001f4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f40:	e005      	b.n	8001f4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f4a:	e000      	b.n	8001f4e <HAL_CAN_IRQHandler+0x336>
            break;
 8001f4c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	699a      	ldr	r2, [r3, #24]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001f5c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2204      	movs	r2, #4
 8001f64:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f872 	bl	8002062 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f7e:	bf00      	nop
 8001f80:	3728      	adds	r7, #40	@ 0x28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002088:	4b0c      	ldr	r3, [pc, #48]	@ (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002094:	4013      	ands	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020aa:	4a04      	ldr	r2, [pc, #16]	@ (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	60d3      	str	r3, [r2, #12]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c4:	4b04      	ldr	r3, [pc, #16]	@ (80020d8 <__NVIC_GetPriorityGrouping+0x18>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	f003 0307 	and.w	r3, r3, #7
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	db0b      	blt.n	8002106 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	f003 021f 	and.w	r2, r3, #31
 80020f4:	4907      	ldr	r1, [pc, #28]	@ (8002114 <__NVIC_EnableIRQ+0x38>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	2001      	movs	r0, #1
 80020fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000e100 	.word	0xe000e100

08002118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	6039      	str	r1, [r7, #0]
 8002122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	2b00      	cmp	r3, #0
 800212a:	db0a      	blt.n	8002142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	b2da      	uxtb	r2, r3
 8002130:	490c      	ldr	r1, [pc, #48]	@ (8002164 <__NVIC_SetPriority+0x4c>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	0112      	lsls	r2, r2, #4
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	440b      	add	r3, r1
 800213c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002140:	e00a      	b.n	8002158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4908      	ldr	r1, [pc, #32]	@ (8002168 <__NVIC_SetPriority+0x50>)
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	3b04      	subs	r3, #4
 8002150:	0112      	lsls	r2, r2, #4
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	440b      	add	r3, r1
 8002156:	761a      	strb	r2, [r3, #24]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000e100 	.word	0xe000e100
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	@ 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f1c3 0307 	rsb	r3, r3, #7
 8002186:	2b04      	cmp	r3, #4
 8002188:	bf28      	it	cs
 800218a:	2304      	movcs	r3, #4
 800218c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3304      	adds	r3, #4
 8002192:	2b06      	cmp	r3, #6
 8002194:	d902      	bls.n	800219c <NVIC_EncodePriority+0x30>
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3b03      	subs	r3, #3
 800219a:	e000      	b.n	800219e <NVIC_EncodePriority+0x32>
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a0:	f04f 32ff 	mov.w	r2, #4294967295
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43da      	mvns	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	401a      	ands	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b4:	f04f 31ff 	mov.w	r1, #4294967295
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fa01 f303 	lsl.w	r3, r1, r3
 80021be:	43d9      	mvns	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	4313      	orrs	r3, r2
         );
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3724      	adds	r7, #36	@ 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
	...

080021d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021e4:	d301      	bcc.n	80021ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00f      	b.n	800220a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002214 <SysTick_Config+0x40>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f2:	210f      	movs	r1, #15
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295
 80021f8:	f7ff ff8e 	bl	8002118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021fc:	4b05      	ldr	r3, [pc, #20]	@ (8002214 <SysTick_Config+0x40>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002202:	4b04      	ldr	r3, [pc, #16]	@ (8002214 <SysTick_Config+0x40>)
 8002204:	2207      	movs	r2, #7
 8002206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	e000e010 	.word	0xe000e010

08002218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff29 	bl	8002078 <__NVIC_SetPriorityGrouping>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800222e:	b580      	push	{r7, lr}
 8002230:	b086      	sub	sp, #24
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002240:	f7ff ff3e 	bl	80020c0 <__NVIC_GetPriorityGrouping>
 8002244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	6978      	ldr	r0, [r7, #20]
 800224c:	f7ff ff8e 	bl	800216c <NVIC_EncodePriority>
 8002250:	4602      	mov	r2, r0
 8002252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff5d 	bl	8002118 <__NVIC_SetPriority>
}
 800225e:	bf00      	nop
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff31 	bl	80020dc <__NVIC_EnableIRQ>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ffa2 	bl	80021d4 <SysTick_Config>
 8002290:	4603      	mov	r3, r0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022a8:	f7ff f91e 	bl	80014e8 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e099      	b.n	80023ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0201 	bic.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d8:	e00f      	b.n	80022fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022da:	f7ff f905 	bl	80014e8 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	d908      	bls.n	80022fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2203      	movs	r2, #3
 80022f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e078      	b.n	80023ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1e8      	bne.n	80022da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	4b38      	ldr	r3, [pc, #224]	@ (80023f4 <HAL_DMA_Init+0x158>)
 8002314:	4013      	ands	r3, r2
 8002316:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002326:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800233e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	4313      	orrs	r3, r2
 800234a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002350:	2b04      	cmp	r3, #4
 8002352:	d107      	bne.n	8002364 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235c:	4313      	orrs	r3, r2
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4313      	orrs	r3, r2
 8002362:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f023 0307 	bic.w	r3, r3, #7
 800237a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	4313      	orrs	r3, r2
 8002384:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	2b04      	cmp	r3, #4
 800238c:	d117      	bne.n	80023be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	4313      	orrs	r3, r2
 8002396:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00e      	beq.n	80023be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f9e9 	bl	8002778 <DMA_CheckFifoParam>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2240      	movs	r2, #64	@ 0x40
 80023b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80023ba:	2301      	movs	r3, #1
 80023bc:	e016      	b.n	80023ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f9a0 	bl	800270c <DMA_CalcBaseAndBitshift>
 80023cc:	4603      	mov	r3, r0
 80023ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d4:	223f      	movs	r2, #63	@ 0x3f
 80023d6:	409a      	lsls	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	f010803f 	.word	0xf010803f

080023f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002404:	4b8e      	ldr	r3, [pc, #568]	@ (8002640 <HAL_DMA_IRQHandler+0x248>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a8e      	ldr	r2, [pc, #568]	@ (8002644 <HAL_DMA_IRQHandler+0x24c>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	0a9b      	lsrs	r3, r3, #10
 8002410:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002416:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002422:	2208      	movs	r2, #8
 8002424:	409a      	lsls	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4013      	ands	r3, r2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d01a      	beq.n	8002464 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d013      	beq.n	8002464 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0204 	bic.w	r2, r2, #4
 800244a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002450:	2208      	movs	r2, #8
 8002452:	409a      	lsls	r2, r3
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245c:	f043 0201 	orr.w	r2, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002468:	2201      	movs	r2, #1
 800246a:	409a      	lsls	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d012      	beq.n	800249a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002486:	2201      	movs	r2, #1
 8002488:	409a      	lsls	r2, r3
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002492:	f043 0202 	orr.w	r2, r3, #2
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249e:	2204      	movs	r2, #4
 80024a0:	409a      	lsls	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4013      	ands	r3, r2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d012      	beq.n	80024d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00b      	beq.n	80024d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024bc:	2204      	movs	r2, #4
 80024be:	409a      	lsls	r2, r3
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c8:	f043 0204 	orr.w	r2, r3, #4
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d4:	2210      	movs	r2, #16
 80024d6:	409a      	lsls	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d043      	beq.n	8002568 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d03c      	beq.n	8002568 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f2:	2210      	movs	r2, #16
 80024f4:	409a      	lsls	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d018      	beq.n	800253a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d108      	bne.n	8002528 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d024      	beq.n	8002568 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	4798      	blx	r3
 8002526:	e01f      	b.n	8002568 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800252c:	2b00      	cmp	r3, #0
 800252e:	d01b      	beq.n	8002568 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	4798      	blx	r3
 8002538:	e016      	b.n	8002568 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d107      	bne.n	8002558 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0208 	bic.w	r2, r2, #8
 8002556:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256c:	2220      	movs	r2, #32
 800256e:	409a      	lsls	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 808f 	beq.w	8002698 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 8087 	beq.w	8002698 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258e:	2220      	movs	r2, #32
 8002590:	409a      	lsls	r2, r3
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b05      	cmp	r3, #5
 80025a0:	d136      	bne.n	8002610 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0216 	bic.w	r2, r2, #22
 80025b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d103      	bne.n	80025d2 <HAL_DMA_IRQHandler+0x1da>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d007      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0208 	bic.w	r2, r2, #8
 80025e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e6:	223f      	movs	r2, #63	@ 0x3f
 80025e8:	409a      	lsls	r2, r3
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002602:	2b00      	cmp	r3, #0
 8002604:	d07e      	beq.n	8002704 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	4798      	blx	r3
        }
        return;
 800260e:	e079      	b.n	8002704 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d01d      	beq.n	800265a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10d      	bne.n	8002648 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002630:	2b00      	cmp	r3, #0
 8002632:	d031      	beq.n	8002698 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	4798      	blx	r3
 800263c:	e02c      	b.n	8002698 <HAL_DMA_IRQHandler+0x2a0>
 800263e:	bf00      	nop
 8002640:	20000000 	.word	0x20000000
 8002644:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800264c:	2b00      	cmp	r3, #0
 800264e:	d023      	beq.n	8002698 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	4798      	blx	r3
 8002658:	e01e      	b.n	8002698 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10f      	bne.n	8002688 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0210 	bic.w	r2, r2, #16
 8002676:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269c:	2b00      	cmp	r3, #0
 800269e:	d032      	beq.n	8002706 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d022      	beq.n	80026f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2205      	movs	r2, #5
 80026b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0201 	bic.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	3301      	adds	r3, #1
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d307      	bcc.n	80026e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f2      	bne.n	80026c4 <HAL_DMA_IRQHandler+0x2cc>
 80026de:	e000      	b.n	80026e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d005      	beq.n	8002706 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	4798      	blx	r3
 8002702:	e000      	b.n	8002706 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002704:	bf00      	nop
    }
  }
}
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	3b10      	subs	r3, #16
 800271c:	4a14      	ldr	r2, [pc, #80]	@ (8002770 <DMA_CalcBaseAndBitshift+0x64>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	091b      	lsrs	r3, r3, #4
 8002724:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002726:	4a13      	ldr	r2, [pc, #76]	@ (8002774 <DMA_CalcBaseAndBitshift+0x68>)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4413      	add	r3, r2
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b03      	cmp	r3, #3
 8002738:	d909      	bls.n	800274e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002742:	f023 0303 	bic.w	r3, r3, #3
 8002746:	1d1a      	adds	r2, r3, #4
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	659a      	str	r2, [r3, #88]	@ 0x58
 800274c:	e007      	b.n	800275e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002756:	f023 0303 	bic.w	r3, r3, #3
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002762:	4618      	mov	r0, r3
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	aaaaaaab 	.word	0xaaaaaaab
 8002774:	0800504c 	.word	0x0800504c

08002778 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002788:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d11f      	bne.n	80027d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d856      	bhi.n	8002846 <DMA_CheckFifoParam+0xce>
 8002798:	a201      	add	r2, pc, #4	@ (adr r2, 80027a0 <DMA_CheckFifoParam+0x28>)
 800279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279e:	bf00      	nop
 80027a0:	080027b1 	.word	0x080027b1
 80027a4:	080027c3 	.word	0x080027c3
 80027a8:	080027b1 	.word	0x080027b1
 80027ac:	08002847 	.word	0x08002847
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d046      	beq.n	800284a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c0:	e043      	b.n	800284a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027ca:	d140      	bne.n	800284e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d0:	e03d      	b.n	800284e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027da:	d121      	bne.n	8002820 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d837      	bhi.n	8002852 <DMA_CheckFifoParam+0xda>
 80027e2:	a201      	add	r2, pc, #4	@ (adr r2, 80027e8 <DMA_CheckFifoParam+0x70>)
 80027e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e8:	080027f9 	.word	0x080027f9
 80027ec:	080027ff 	.word	0x080027ff
 80027f0:	080027f9 	.word	0x080027f9
 80027f4:	08002811 	.word	0x08002811
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
      break;
 80027fc:	e030      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002802:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d025      	beq.n	8002856 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800280e:	e022      	b.n	8002856 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002814:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002818:	d11f      	bne.n	800285a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800281e:	e01c      	b.n	800285a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d903      	bls.n	800282e <DMA_CheckFifoParam+0xb6>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d003      	beq.n	8002834 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800282c:	e018      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
      break;
 8002832:	e015      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002838:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00e      	beq.n	800285e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
      break;
 8002844:	e00b      	b.n	800285e <DMA_CheckFifoParam+0xe6>
      break;
 8002846:	bf00      	nop
 8002848:	e00a      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      break;
 800284a:	bf00      	nop
 800284c:	e008      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      break;
 800284e:	bf00      	nop
 8002850:	e006      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      break;
 8002852:	bf00      	nop
 8002854:	e004      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      break;
 8002856:	bf00      	nop
 8002858:	e002      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      break;   
 800285a:	bf00      	nop
 800285c:	e000      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      break;
 800285e:	bf00      	nop
    }
  } 
  
  return status; 
 8002860:	7bfb      	ldrb	r3, [r7, #15]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop

08002870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002870:	b480      	push	{r7}
 8002872:	b089      	sub	sp, #36	@ 0x24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	e165      	b.n	8002b58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800288c:	2201      	movs	r2, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	f040 8154 	bne.w	8002b52 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d005      	beq.n	80028c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d130      	bne.n	8002924 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	2203      	movs	r2, #3
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028f8:	2201      	movs	r2, #1
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 0201 	and.w	r2, r3, #1
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	2b03      	cmp	r3, #3
 800292e:	d017      	beq.n	8002960 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	2203      	movs	r2, #3
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d123      	bne.n	80029b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	08da      	lsrs	r2, r3, #3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3208      	adds	r2, #8
 8002974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002978:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	220f      	movs	r2, #15
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	08da      	lsrs	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3208      	adds	r2, #8
 80029ae:	69b9      	ldr	r1, [r7, #24]
 80029b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	2203      	movs	r2, #3
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 0203 	and.w	r2, r3, #3
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80ae 	beq.w	8002b52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002b70 <HAL_GPIO_Init+0x300>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fe:	4a5c      	ldr	r2, [pc, #368]	@ (8002b70 <HAL_GPIO_Init+0x300>)
 8002a00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a06:	4b5a      	ldr	r3, [pc, #360]	@ (8002b70 <HAL_GPIO_Init+0x300>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a12:	4a58      	ldr	r2, [pc, #352]	@ (8002b74 <HAL_GPIO_Init+0x304>)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	089b      	lsrs	r3, r3, #2
 8002a18:	3302      	adds	r3, #2
 8002a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	220f      	movs	r2, #15
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a4f      	ldr	r2, [pc, #316]	@ (8002b78 <HAL_GPIO_Init+0x308>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d025      	beq.n	8002a8a <HAL_GPIO_Init+0x21a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a4e      	ldr	r2, [pc, #312]	@ (8002b7c <HAL_GPIO_Init+0x30c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01f      	beq.n	8002a86 <HAL_GPIO_Init+0x216>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a4d      	ldr	r2, [pc, #308]	@ (8002b80 <HAL_GPIO_Init+0x310>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d019      	beq.n	8002a82 <HAL_GPIO_Init+0x212>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a4c      	ldr	r2, [pc, #304]	@ (8002b84 <HAL_GPIO_Init+0x314>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d013      	beq.n	8002a7e <HAL_GPIO_Init+0x20e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a4b      	ldr	r2, [pc, #300]	@ (8002b88 <HAL_GPIO_Init+0x318>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00d      	beq.n	8002a7a <HAL_GPIO_Init+0x20a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a4a      	ldr	r2, [pc, #296]	@ (8002b8c <HAL_GPIO_Init+0x31c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d007      	beq.n	8002a76 <HAL_GPIO_Init+0x206>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a49      	ldr	r2, [pc, #292]	@ (8002b90 <HAL_GPIO_Init+0x320>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d101      	bne.n	8002a72 <HAL_GPIO_Init+0x202>
 8002a6e:	2306      	movs	r3, #6
 8002a70:	e00c      	b.n	8002a8c <HAL_GPIO_Init+0x21c>
 8002a72:	2307      	movs	r3, #7
 8002a74:	e00a      	b.n	8002a8c <HAL_GPIO_Init+0x21c>
 8002a76:	2305      	movs	r3, #5
 8002a78:	e008      	b.n	8002a8c <HAL_GPIO_Init+0x21c>
 8002a7a:	2304      	movs	r3, #4
 8002a7c:	e006      	b.n	8002a8c <HAL_GPIO_Init+0x21c>
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e004      	b.n	8002a8c <HAL_GPIO_Init+0x21c>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e002      	b.n	8002a8c <HAL_GPIO_Init+0x21c>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <HAL_GPIO_Init+0x21c>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	f002 0203 	and.w	r2, r2, #3
 8002a92:	0092      	lsls	r2, r2, #2
 8002a94:	4093      	lsls	r3, r2
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a9c:	4935      	ldr	r1, [pc, #212]	@ (8002b74 <HAL_GPIO_Init+0x304>)
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	089b      	lsrs	r3, r3, #2
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aaa:	4b3a      	ldr	r3, [pc, #232]	@ (8002b94 <HAL_GPIO_Init+0x324>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ace:	4a31      	ldr	r2, [pc, #196]	@ (8002b94 <HAL_GPIO_Init+0x324>)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad4:	4b2f      	ldr	r3, [pc, #188]	@ (8002b94 <HAL_GPIO_Init+0x324>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002af8:	4a26      	ldr	r2, [pc, #152]	@ (8002b94 <HAL_GPIO_Init+0x324>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002afe:	4b25      	ldr	r3, [pc, #148]	@ (8002b94 <HAL_GPIO_Init+0x324>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	43db      	mvns	r3, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b22:	4a1c      	ldr	r2, [pc, #112]	@ (8002b94 <HAL_GPIO_Init+0x324>)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b28:	4b1a      	ldr	r3, [pc, #104]	@ (8002b94 <HAL_GPIO_Init+0x324>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b4c:	4a11      	ldr	r2, [pc, #68]	@ (8002b94 <HAL_GPIO_Init+0x324>)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3301      	adds	r3, #1
 8002b56:	61fb      	str	r3, [r7, #28]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	2b0f      	cmp	r3, #15
 8002b5c:	f67f ae96 	bls.w	800288c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	3724      	adds	r7, #36	@ 0x24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40013800 	.word	0x40013800
 8002b78:	40020000 	.word	0x40020000
 8002b7c:	40020400 	.word	0x40020400
 8002b80:	40020800 	.word	0x40020800
 8002b84:	40020c00 	.word	0x40020c00
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40021400 	.word	0x40021400
 8002b90:	40021800 	.word	0x40021800
 8002b94:	40013c00 	.word	0x40013c00

08002b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	807b      	strh	r3, [r7, #2]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ba8:	787b      	ldrb	r3, [r7, #1]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bae:	887a      	ldrh	r2, [r7, #2]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bb4:	e003      	b.n	8002bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bb6:	887b      	ldrh	r3, [r7, #2]
 8002bb8:	041a      	lsls	r2, r3, #16
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	619a      	str	r2, [r3, #24]
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b085      	sub	sp, #20
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bdc:	887a      	ldrh	r2, [r7, #2]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4013      	ands	r3, r2
 8002be2:	041a      	lsls	r2, r3, #16
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	43d9      	mvns	r1, r3
 8002be8:	887b      	ldrh	r3, [r7, #2]
 8002bea:	400b      	ands	r3, r1
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	619a      	str	r2, [r3, #24]
}
 8002bf2:	bf00      	nop
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	603b      	str	r3, [r7, #0]
 8002c0e:	4b20      	ldr	r3, [pc, #128]	@ (8002c90 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	4a1f      	ldr	r2, [pc, #124]	@ (8002c90 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c90 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c26:	4b1b      	ldr	r3, [pc, #108]	@ (8002c94 <HAL_PWREx_EnableOverDrive+0x94>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c2c:	f7fe fc5c 	bl	80014e8 <HAL_GetTick>
 8002c30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c32:	e009      	b.n	8002c48 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c34:	f7fe fc58 	bl	80014e8 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c42:	d901      	bls.n	8002c48 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e01f      	b.n	8002c88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c48:	4b13      	ldr	r3, [pc, #76]	@ (8002c98 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c54:	d1ee      	bne.n	8002c34 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c56:	4b11      	ldr	r3, [pc, #68]	@ (8002c9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c5c:	f7fe fc44 	bl	80014e8 <HAL_GetTick>
 8002c60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c62:	e009      	b.n	8002c78 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c64:	f7fe fc40 	bl	80014e8 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c72:	d901      	bls.n	8002c78 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e007      	b.n	8002c88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c78:	4b07      	ldr	r3, [pc, #28]	@ (8002c98 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c84:	d1ee      	bne.n	8002c64 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40023800 	.word	0x40023800
 8002c94:	420e0040 	.word	0x420e0040
 8002c98:	40007000 	.word	0x40007000
 8002c9c:	420e0044 	.word	0x420e0044

08002ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0cc      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb4:	4b68      	ldr	r3, [pc, #416]	@ (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d90c      	bls.n	8002cdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc2:	4b65      	ldr	r3, [pc, #404]	@ (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cca:	4b63      	ldr	r3, [pc, #396]	@ (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0b8      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d020      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cf4:	4b59      	ldr	r3, [pc, #356]	@ (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	4a58      	ldr	r2, [pc, #352]	@ (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cfe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d0c:	4b53      	ldr	r3, [pc, #332]	@ (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	4a52      	ldr	r2, [pc, #328]	@ (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d18:	4b50      	ldr	r3, [pc, #320]	@ (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	494d      	ldr	r1, [pc, #308]	@ (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d044      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d107      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3e:	4b47      	ldr	r3, [pc, #284]	@ (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d119      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e07f      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d003      	beq.n	8002d5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	d107      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d109      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e06f      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e067      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d7e:	4b37      	ldr	r3, [pc, #220]	@ (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f023 0203 	bic.w	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4934      	ldr	r1, [pc, #208]	@ (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d90:	f7fe fbaa 	bl	80014e8 <HAL_GetTick>
 8002d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d96:	e00a      	b.n	8002dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d98:	f7fe fba6 	bl	80014e8 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e04f      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dae:	4b2b      	ldr	r3, [pc, #172]	@ (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 020c 	and.w	r2, r3, #12
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d1eb      	bne.n	8002d98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc0:	4b25      	ldr	r3, [pc, #148]	@ (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d20c      	bcs.n	8002de8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dce:	4b22      	ldr	r3, [pc, #136]	@ (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd6:	4b20      	ldr	r3, [pc, #128]	@ (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e032      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df4:	4b19      	ldr	r3, [pc, #100]	@ (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4916      	ldr	r1, [pc, #88]	@ (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d009      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e12:	4b12      	ldr	r3, [pc, #72]	@ (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	490e      	ldr	r1, [pc, #56]	@ (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e26:	f000 f855 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	490a      	ldr	r1, [pc, #40]	@ (8002e60 <HAL_RCC_ClockConfig+0x1c0>)
 8002e38:	5ccb      	ldrb	r3, [r1, r3]
 8002e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3e:	4a09      	ldr	r2, [pc, #36]	@ (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e42:	4b09      	ldr	r3, [pc, #36]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe fb0a 	bl	8001460 <HAL_InitTick>

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40023c00 	.word	0x40023c00
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	08005034 	.word	0x08005034
 8002e64:	20000000 	.word	0x20000000
 8002e68:	20000004 	.word	0x20000004

08002e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e70:	4b03      	ldr	r3, [pc, #12]	@ (8002e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e72:	681b      	ldr	r3, [r3, #0]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	20000000 	.word	0x20000000

08002e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e88:	f7ff fff0 	bl	8002e6c <HAL_RCC_GetHCLKFreq>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	0a9b      	lsrs	r3, r3, #10
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	4903      	ldr	r1, [pc, #12]	@ (8002ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e9a:	5ccb      	ldrb	r3, [r1, r3]
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	08005044 	.word	0x08005044

08002eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002eb0:	f7ff ffdc 	bl	8002e6c <HAL_RCC_GetHCLKFreq>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4b05      	ldr	r3, [pc, #20]	@ (8002ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	0b5b      	lsrs	r3, r3, #13
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	4903      	ldr	r1, [pc, #12]	@ (8002ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ec2:	5ccb      	ldrb	r3, [r1, r3]
 8002ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	08005044 	.word	0x08005044

08002ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ed8:	b0ae      	sub	sp, #184	@ 0xb8
 8002eda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002efa:	4bcb      	ldr	r3, [pc, #812]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x354>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b0c      	cmp	r3, #12
 8002f04:	f200 8206 	bhi.w	8003314 <HAL_RCC_GetSysClockFreq+0x440>
 8002f08:	a201      	add	r2, pc, #4	@ (adr r2, 8002f10 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0e:	bf00      	nop
 8002f10:	08002f45 	.word	0x08002f45
 8002f14:	08003315 	.word	0x08003315
 8002f18:	08003315 	.word	0x08003315
 8002f1c:	08003315 	.word	0x08003315
 8002f20:	08002f4d 	.word	0x08002f4d
 8002f24:	08003315 	.word	0x08003315
 8002f28:	08003315 	.word	0x08003315
 8002f2c:	08003315 	.word	0x08003315
 8002f30:	08002f55 	.word	0x08002f55
 8002f34:	08003315 	.word	0x08003315
 8002f38:	08003315 	.word	0x08003315
 8002f3c:	08003315 	.word	0x08003315
 8002f40:	08003145 	.word	0x08003145
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f44:	4bb9      	ldr	r3, [pc, #740]	@ (800322c <HAL_RCC_GetSysClockFreq+0x358>)
 8002f46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f4a:	e1e7      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f4c:	4bb8      	ldr	r3, [pc, #736]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f52:	e1e3      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f54:	4bb4      	ldr	r3, [pc, #720]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f60:	4bb1      	ldr	r3, [pc, #708]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d071      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f6c:	4bae      	ldr	r3, [pc, #696]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	099b      	lsrs	r3, r3, #6
 8002f72:	2200      	movs	r2, #0
 8002f74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f78:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f92:	4622      	mov	r2, r4
 8002f94:	462b      	mov	r3, r5
 8002f96:	f04f 0000 	mov.w	r0, #0
 8002f9a:	f04f 0100 	mov.w	r1, #0
 8002f9e:	0159      	lsls	r1, r3, #5
 8002fa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fa4:	0150      	lsls	r0, r2, #5
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4621      	mov	r1, r4
 8002fac:	1a51      	subs	r1, r2, r1
 8002fae:	6439      	str	r1, [r7, #64]	@ 0x40
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002fc4:	4649      	mov	r1, r9
 8002fc6:	018b      	lsls	r3, r1, #6
 8002fc8:	4641      	mov	r1, r8
 8002fca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fce:	4641      	mov	r1, r8
 8002fd0:	018a      	lsls	r2, r1, #6
 8002fd2:	4641      	mov	r1, r8
 8002fd4:	1a51      	subs	r1, r2, r1
 8002fd6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002fd8:	4649      	mov	r1, r9
 8002fda:	eb63 0301 	sbc.w	r3, r3, r1
 8002fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002fec:	4649      	mov	r1, r9
 8002fee:	00cb      	lsls	r3, r1, #3
 8002ff0:	4641      	mov	r1, r8
 8002ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ff6:	4641      	mov	r1, r8
 8002ff8:	00ca      	lsls	r2, r1, #3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4603      	mov	r3, r0
 8003000:	4622      	mov	r2, r4
 8003002:	189b      	adds	r3, r3, r2
 8003004:	633b      	str	r3, [r7, #48]	@ 0x30
 8003006:	462b      	mov	r3, r5
 8003008:	460a      	mov	r2, r1
 800300a:	eb42 0303 	adc.w	r3, r2, r3
 800300e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800301c:	4629      	mov	r1, r5
 800301e:	024b      	lsls	r3, r1, #9
 8003020:	4621      	mov	r1, r4
 8003022:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003026:	4621      	mov	r1, r4
 8003028:	024a      	lsls	r2, r1, #9
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003032:	2200      	movs	r2, #0
 8003034:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003038:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800303c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003040:	f7fd f93e 	bl	80002c0 <__aeabi_uldivmod>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4613      	mov	r3, r2
 800304a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800304e:	e067      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003050:	4b75      	ldr	r3, [pc, #468]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x354>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	099b      	lsrs	r3, r3, #6
 8003056:	2200      	movs	r2, #0
 8003058:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800305c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003060:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003068:	67bb      	str	r3, [r7, #120]	@ 0x78
 800306a:	2300      	movs	r3, #0
 800306c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800306e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003072:	4622      	mov	r2, r4
 8003074:	462b      	mov	r3, r5
 8003076:	f04f 0000 	mov.w	r0, #0
 800307a:	f04f 0100 	mov.w	r1, #0
 800307e:	0159      	lsls	r1, r3, #5
 8003080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003084:	0150      	lsls	r0, r2, #5
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4621      	mov	r1, r4
 800308c:	1a51      	subs	r1, r2, r1
 800308e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003090:	4629      	mov	r1, r5
 8003092:	eb63 0301 	sbc.w	r3, r3, r1
 8003096:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80030a4:	4649      	mov	r1, r9
 80030a6:	018b      	lsls	r3, r1, #6
 80030a8:	4641      	mov	r1, r8
 80030aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030ae:	4641      	mov	r1, r8
 80030b0:	018a      	lsls	r2, r1, #6
 80030b2:	4641      	mov	r1, r8
 80030b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80030b8:	4649      	mov	r1, r9
 80030ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030d2:	4692      	mov	sl, r2
 80030d4:	469b      	mov	fp, r3
 80030d6:	4623      	mov	r3, r4
 80030d8:	eb1a 0303 	adds.w	r3, sl, r3
 80030dc:	623b      	str	r3, [r7, #32]
 80030de:	462b      	mov	r3, r5
 80030e0:	eb4b 0303 	adc.w	r3, fp, r3
 80030e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80030f2:	4629      	mov	r1, r5
 80030f4:	028b      	lsls	r3, r1, #10
 80030f6:	4621      	mov	r1, r4
 80030f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030fc:	4621      	mov	r1, r4
 80030fe:	028a      	lsls	r2, r1, #10
 8003100:	4610      	mov	r0, r2
 8003102:	4619      	mov	r1, r3
 8003104:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003108:	2200      	movs	r2, #0
 800310a:	673b      	str	r3, [r7, #112]	@ 0x70
 800310c:	677a      	str	r2, [r7, #116]	@ 0x74
 800310e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003112:	f7fd f8d5 	bl	80002c0 <__aeabi_uldivmod>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4613      	mov	r3, r2
 800311c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003120:	4b41      	ldr	r3, [pc, #260]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x354>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	0c1b      	lsrs	r3, r3, #16
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	3301      	adds	r3, #1
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003132:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003136:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800313a:	fbb2 f3f3 	udiv	r3, r2, r3
 800313e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003142:	e0eb      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003144:	4b38      	ldr	r3, [pc, #224]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x354>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800314c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003150:	4b35      	ldr	r3, [pc, #212]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x354>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d06b      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800315c:	4b32      	ldr	r3, [pc, #200]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x354>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	099b      	lsrs	r3, r3, #6
 8003162:	2200      	movs	r2, #0
 8003164:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003166:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003168:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800316a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800316e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003170:	2300      	movs	r3, #0
 8003172:	667b      	str	r3, [r7, #100]	@ 0x64
 8003174:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003178:	4622      	mov	r2, r4
 800317a:	462b      	mov	r3, r5
 800317c:	f04f 0000 	mov.w	r0, #0
 8003180:	f04f 0100 	mov.w	r1, #0
 8003184:	0159      	lsls	r1, r3, #5
 8003186:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800318a:	0150      	lsls	r0, r2, #5
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4621      	mov	r1, r4
 8003192:	1a51      	subs	r1, r2, r1
 8003194:	61b9      	str	r1, [r7, #24]
 8003196:	4629      	mov	r1, r5
 8003198:	eb63 0301 	sbc.w	r3, r3, r1
 800319c:	61fb      	str	r3, [r7, #28]
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 0300 	mov.w	r3, #0
 80031a6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80031aa:	4659      	mov	r1, fp
 80031ac:	018b      	lsls	r3, r1, #6
 80031ae:	4651      	mov	r1, sl
 80031b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031b4:	4651      	mov	r1, sl
 80031b6:	018a      	lsls	r2, r1, #6
 80031b8:	4651      	mov	r1, sl
 80031ba:	ebb2 0801 	subs.w	r8, r2, r1
 80031be:	4659      	mov	r1, fp
 80031c0:	eb63 0901 	sbc.w	r9, r3, r1
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031d8:	4690      	mov	r8, r2
 80031da:	4699      	mov	r9, r3
 80031dc:	4623      	mov	r3, r4
 80031de:	eb18 0303 	adds.w	r3, r8, r3
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	462b      	mov	r3, r5
 80031e6:	eb49 0303 	adc.w	r3, r9, r3
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80031f8:	4629      	mov	r1, r5
 80031fa:	024b      	lsls	r3, r1, #9
 80031fc:	4621      	mov	r1, r4
 80031fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003202:	4621      	mov	r1, r4
 8003204:	024a      	lsls	r2, r1, #9
 8003206:	4610      	mov	r0, r2
 8003208:	4619      	mov	r1, r3
 800320a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800320e:	2200      	movs	r2, #0
 8003210:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003212:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003214:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003218:	f7fd f852 	bl	80002c0 <__aeabi_uldivmod>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4613      	mov	r3, r2
 8003222:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003226:	e065      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x420>
 8003228:	40023800 	.word	0x40023800
 800322c:	00f42400 	.word	0x00f42400
 8003230:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003234:	4b3d      	ldr	r3, [pc, #244]	@ (800332c <HAL_RCC_GetSysClockFreq+0x458>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	099b      	lsrs	r3, r3, #6
 800323a:	2200      	movs	r2, #0
 800323c:	4618      	mov	r0, r3
 800323e:	4611      	mov	r1, r2
 8003240:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003244:	653b      	str	r3, [r7, #80]	@ 0x50
 8003246:	2300      	movs	r3, #0
 8003248:	657b      	str	r3, [r7, #84]	@ 0x54
 800324a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800324e:	4642      	mov	r2, r8
 8003250:	464b      	mov	r3, r9
 8003252:	f04f 0000 	mov.w	r0, #0
 8003256:	f04f 0100 	mov.w	r1, #0
 800325a:	0159      	lsls	r1, r3, #5
 800325c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003260:	0150      	lsls	r0, r2, #5
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4641      	mov	r1, r8
 8003268:	1a51      	subs	r1, r2, r1
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	4649      	mov	r1, r9
 800326e:	eb63 0301 	sbc.w	r3, r3, r1
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003280:	4659      	mov	r1, fp
 8003282:	018b      	lsls	r3, r1, #6
 8003284:	4651      	mov	r1, sl
 8003286:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800328a:	4651      	mov	r1, sl
 800328c:	018a      	lsls	r2, r1, #6
 800328e:	4651      	mov	r1, sl
 8003290:	1a54      	subs	r4, r2, r1
 8003292:	4659      	mov	r1, fp
 8003294:	eb63 0501 	sbc.w	r5, r3, r1
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	00eb      	lsls	r3, r5, #3
 80032a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032a6:	00e2      	lsls	r2, r4, #3
 80032a8:	4614      	mov	r4, r2
 80032aa:	461d      	mov	r5, r3
 80032ac:	4643      	mov	r3, r8
 80032ae:	18e3      	adds	r3, r4, r3
 80032b0:	603b      	str	r3, [r7, #0]
 80032b2:	464b      	mov	r3, r9
 80032b4:	eb45 0303 	adc.w	r3, r5, r3
 80032b8:	607b      	str	r3, [r7, #4]
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032c6:	4629      	mov	r1, r5
 80032c8:	028b      	lsls	r3, r1, #10
 80032ca:	4621      	mov	r1, r4
 80032cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032d0:	4621      	mov	r1, r4
 80032d2:	028a      	lsls	r2, r1, #10
 80032d4:	4610      	mov	r0, r2
 80032d6:	4619      	mov	r1, r3
 80032d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032dc:	2200      	movs	r2, #0
 80032de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032e0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80032e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032e6:	f7fc ffeb 	bl	80002c0 <__aeabi_uldivmod>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4613      	mov	r3, r2
 80032f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80032f4:	4b0d      	ldr	r3, [pc, #52]	@ (800332c <HAL_RCC_GetSysClockFreq+0x458>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	0f1b      	lsrs	r3, r3, #28
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003302:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003306:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800330a:	fbb2 f3f3 	udiv	r3, r2, r3
 800330e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003312:	e003      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003314:	4b06      	ldr	r3, [pc, #24]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003316:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800331a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800331c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003320:	4618      	mov	r0, r3
 8003322:	37b8      	adds	r7, #184	@ 0xb8
 8003324:	46bd      	mov	sp, r7
 8003326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800332a:	bf00      	nop
 800332c:	40023800 	.word	0x40023800
 8003330:	00f42400 	.word	0x00f42400

08003334 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e28d      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 8083 	beq.w	800345a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003354:	4b94      	ldr	r3, [pc, #592]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 030c 	and.w	r3, r3, #12
 800335c:	2b04      	cmp	r3, #4
 800335e:	d019      	beq.n	8003394 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003360:	4b91      	ldr	r3, [pc, #580]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 030c 	and.w	r3, r3, #12
        || \
 8003368:	2b08      	cmp	r3, #8
 800336a:	d106      	bne.n	800337a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800336c:	4b8e      	ldr	r3, [pc, #568]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003374:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003378:	d00c      	beq.n	8003394 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337a:	4b8b      	ldr	r3, [pc, #556]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003382:	2b0c      	cmp	r3, #12
 8003384:	d112      	bne.n	80033ac <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003386:	4b88      	ldr	r3, [pc, #544]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800338e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003392:	d10b      	bne.n	80033ac <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003394:	4b84      	ldr	r3, [pc, #528]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d05b      	beq.n	8003458 <HAL_RCC_OscConfig+0x124>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d157      	bne.n	8003458 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e25a      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033b4:	d106      	bne.n	80033c4 <HAL_RCC_OscConfig+0x90>
 80033b6:	4b7c      	ldr	r3, [pc, #496]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a7b      	ldr	r2, [pc, #492]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e01d      	b.n	8003400 <HAL_RCC_OscConfig+0xcc>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0xb4>
 80033ce:	4b76      	ldr	r3, [pc, #472]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a75      	ldr	r2, [pc, #468]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 80033d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	4b73      	ldr	r3, [pc, #460]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a72      	ldr	r2, [pc, #456]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e00b      	b.n	8003400 <HAL_RCC_OscConfig+0xcc>
 80033e8:	4b6f      	ldr	r3, [pc, #444]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a6e      	ldr	r2, [pc, #440]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 80033ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	4b6c      	ldr	r3, [pc, #432]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a6b      	ldr	r2, [pc, #428]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 80033fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d013      	beq.n	8003430 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fe f86e 	bl	80014e8 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003410:	f7fe f86a 	bl	80014e8 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	@ 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e21f      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	4b61      	ldr	r3, [pc, #388]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0xdc>
 800342e:	e014      	b.n	800345a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003430:	f7fe f85a 	bl	80014e8 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003438:	f7fe f856 	bl	80014e8 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	@ 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e20b      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344a:	4b57      	ldr	r3, [pc, #348]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0x104>
 8003456:	e000      	b.n	800345a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d06f      	beq.n	8003546 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003466:	4b50      	ldr	r3, [pc, #320]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b00      	cmp	r3, #0
 8003470:	d017      	beq.n	80034a2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003472:	4b4d      	ldr	r3, [pc, #308]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
        || \
 800347a:	2b08      	cmp	r3, #8
 800347c:	d105      	bne.n	800348a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800347e:	4b4a      	ldr	r3, [pc, #296]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00b      	beq.n	80034a2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800348a:	4b47      	ldr	r3, [pc, #284]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003492:	2b0c      	cmp	r3, #12
 8003494:	d11c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003496:	4b44      	ldr	r3, [pc, #272]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d116      	bne.n	80034d0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a2:	4b41      	ldr	r3, [pc, #260]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d005      	beq.n	80034ba <HAL_RCC_OscConfig+0x186>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d001      	beq.n	80034ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e1d3      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ba:	4b3b      	ldr	r3, [pc, #236]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4937      	ldr	r1, [pc, #220]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ce:	e03a      	b.n	8003546 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d020      	beq.n	800351a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d8:	4b34      	ldr	r3, [pc, #208]	@ (80035ac <HAL_RCC_OscConfig+0x278>)
 80034da:	2201      	movs	r2, #1
 80034dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034de:	f7fe f803 	bl	80014e8 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e6:	f7fd ffff 	bl	80014e8 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e1b4      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f8:	4b2b      	ldr	r3, [pc, #172]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003504:	4b28      	ldr	r3, [pc, #160]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4925      	ldr	r1, [pc, #148]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003514:	4313      	orrs	r3, r2
 8003516:	600b      	str	r3, [r1, #0]
 8003518:	e015      	b.n	8003546 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800351a:	4b24      	ldr	r3, [pc, #144]	@ (80035ac <HAL_RCC_OscConfig+0x278>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003520:	f7fd ffe2 	bl	80014e8 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003528:	f7fd ffde 	bl	80014e8 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e193      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353a:	4b1b      	ldr	r3, [pc, #108]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d036      	beq.n	80035c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d016      	beq.n	8003588 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800355a:	4b15      	ldr	r3, [pc, #84]	@ (80035b0 <HAL_RCC_OscConfig+0x27c>)
 800355c:	2201      	movs	r2, #1
 800355e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7fd ffc2 	bl	80014e8 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003568:	f7fd ffbe 	bl	80014e8 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e173      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357a:	4b0b      	ldr	r3, [pc, #44]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 800357c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0x234>
 8003586:	e01b      	b.n	80035c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003588:	4b09      	ldr	r3, [pc, #36]	@ (80035b0 <HAL_RCC_OscConfig+0x27c>)
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358e:	f7fd ffab 	bl	80014e8 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003594:	e00e      	b.n	80035b4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003596:	f7fd ffa7 	bl	80014e8 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d907      	bls.n	80035b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e15c      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
 80035a8:	40023800 	.word	0x40023800
 80035ac:	42470000 	.word	0x42470000
 80035b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b4:	4b8a      	ldr	r3, [pc, #552]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 80035b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1ea      	bne.n	8003596 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 8097 	beq.w	80036fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ce:	2300      	movs	r3, #0
 80035d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d2:	4b83      	ldr	r3, [pc, #524]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10f      	bne.n	80035fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	4b7f      	ldr	r3, [pc, #508]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	4a7e      	ldr	r2, [pc, #504]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 80035e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ee:	4b7c      	ldr	r3, [pc, #496]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035fa:	2301      	movs	r3, #1
 80035fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fe:	4b79      	ldr	r3, [pc, #484]	@ (80037e4 <HAL_RCC_OscConfig+0x4b0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003606:	2b00      	cmp	r3, #0
 8003608:	d118      	bne.n	800363c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800360a:	4b76      	ldr	r3, [pc, #472]	@ (80037e4 <HAL_RCC_OscConfig+0x4b0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a75      	ldr	r2, [pc, #468]	@ (80037e4 <HAL_RCC_OscConfig+0x4b0>)
 8003610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003616:	f7fd ff67 	bl	80014e8 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361e:	f7fd ff63 	bl	80014e8 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e118      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003630:	4b6c      	ldr	r3, [pc, #432]	@ (80037e4 <HAL_RCC_OscConfig+0x4b0>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0f0      	beq.n	800361e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d106      	bne.n	8003652 <HAL_RCC_OscConfig+0x31e>
 8003644:	4b66      	ldr	r3, [pc, #408]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003648:	4a65      	ldr	r2, [pc, #404]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003650:	e01c      	b.n	800368c <HAL_RCC_OscConfig+0x358>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b05      	cmp	r3, #5
 8003658:	d10c      	bne.n	8003674 <HAL_RCC_OscConfig+0x340>
 800365a:	4b61      	ldr	r3, [pc, #388]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365e:	4a60      	ldr	r2, [pc, #384]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 8003660:	f043 0304 	orr.w	r3, r3, #4
 8003664:	6713      	str	r3, [r2, #112]	@ 0x70
 8003666:	4b5e      	ldr	r3, [pc, #376]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366a:	4a5d      	ldr	r2, [pc, #372]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6713      	str	r3, [r2, #112]	@ 0x70
 8003672:	e00b      	b.n	800368c <HAL_RCC_OscConfig+0x358>
 8003674:	4b5a      	ldr	r3, [pc, #360]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003678:	4a59      	ldr	r2, [pc, #356]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003680:	4b57      	ldr	r3, [pc, #348]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003684:	4a56      	ldr	r2, [pc, #344]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 8003686:	f023 0304 	bic.w	r3, r3, #4
 800368a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d015      	beq.n	80036c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003694:	f7fd ff28 	bl	80014e8 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369a:	e00a      	b.n	80036b2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369c:	f7fd ff24 	bl	80014e8 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e0d7      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b2:	4b4b      	ldr	r3, [pc, #300]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0ee      	beq.n	800369c <HAL_RCC_OscConfig+0x368>
 80036be:	e014      	b.n	80036ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c0:	f7fd ff12 	bl	80014e8 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c6:	e00a      	b.n	80036de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c8:	f7fd ff0e 	bl	80014e8 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e0c1      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036de:	4b40      	ldr	r3, [pc, #256]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1ee      	bne.n	80036c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d105      	bne.n	80036fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f0:	4b3b      	ldr	r3, [pc, #236]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 80036f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f4:	4a3a      	ldr	r2, [pc, #232]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 80036f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80ad 	beq.w	8003860 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003706:	4b36      	ldr	r3, [pc, #216]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
 800370e:	2b08      	cmp	r3, #8
 8003710:	d060      	beq.n	80037d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d145      	bne.n	80037a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371a:	4b33      	ldr	r3, [pc, #204]	@ (80037e8 <HAL_RCC_OscConfig+0x4b4>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003720:	f7fd fee2 	bl	80014e8 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003728:	f7fd fede 	bl	80014e8 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e093      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373a:	4b29      	ldr	r3, [pc, #164]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69da      	ldr	r2, [r3, #28]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003754:	019b      	lsls	r3, r3, #6
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375c:	085b      	lsrs	r3, r3, #1
 800375e:	3b01      	subs	r3, #1
 8003760:	041b      	lsls	r3, r3, #16
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003768:	061b      	lsls	r3, r3, #24
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003770:	071b      	lsls	r3, r3, #28
 8003772:	491b      	ldr	r1, [pc, #108]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003778:	4b1b      	ldr	r3, [pc, #108]	@ (80037e8 <HAL_RCC_OscConfig+0x4b4>)
 800377a:	2201      	movs	r2, #1
 800377c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377e:	f7fd feb3 	bl	80014e8 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003786:	f7fd feaf 	bl	80014e8 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e064      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003798:	4b11      	ldr	r3, [pc, #68]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x452>
 80037a4:	e05c      	b.n	8003860 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	4b10      	ldr	r3, [pc, #64]	@ (80037e8 <HAL_RCC_OscConfig+0x4b4>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fd fe9c 	bl	80014e8 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fd fe98 	bl	80014e8 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e04d      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c6:	4b06      	ldr	r3, [pc, #24]	@ (80037e0 <HAL_RCC_OscConfig+0x4ac>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x480>
 80037d2:	e045      	b.n	8003860 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d107      	bne.n	80037ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e040      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40007000 	.word	0x40007000
 80037e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037ec:	4b1f      	ldr	r3, [pc, #124]	@ (800386c <HAL_RCC_OscConfig+0x538>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d030      	beq.n	800385c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003804:	429a      	cmp	r2, r3
 8003806:	d129      	bne.n	800385c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d122      	bne.n	800385c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800381c:	4013      	ands	r3, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003822:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003824:	4293      	cmp	r3, r2
 8003826:	d119      	bne.n	800385c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003832:	085b      	lsrs	r3, r3, #1
 8003834:	3b01      	subs	r3, #1
 8003836:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d10f      	bne.n	800385c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003846:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003848:	429a      	cmp	r2, r3
 800384a:	d107      	bne.n	800385c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800

08003870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e041      	b.n	8003906 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7fd fc12 	bl	80010c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3304      	adds	r3, #4
 80038ac:	4619      	mov	r1, r3
 80038ae:	4610      	mov	r0, r2
 80038b0:	f000 f9b6 	bl	8003c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b01      	cmp	r3, #1
 8003922:	d001      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e04e      	b.n	80039c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a23      	ldr	r2, [pc, #140]	@ (80039d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d022      	beq.n	8003990 <HAL_TIM_Base_Start_IT+0x80>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003952:	d01d      	beq.n	8003990 <HAL_TIM_Base_Start_IT+0x80>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a1f      	ldr	r2, [pc, #124]	@ (80039d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d018      	beq.n	8003990 <HAL_TIM_Base_Start_IT+0x80>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a1e      	ldr	r2, [pc, #120]	@ (80039dc <HAL_TIM_Base_Start_IT+0xcc>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d013      	beq.n	8003990 <HAL_TIM_Base_Start_IT+0x80>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a1c      	ldr	r2, [pc, #112]	@ (80039e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00e      	beq.n	8003990 <HAL_TIM_Base_Start_IT+0x80>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a1b      	ldr	r2, [pc, #108]	@ (80039e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d009      	beq.n	8003990 <HAL_TIM_Base_Start_IT+0x80>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a19      	ldr	r2, [pc, #100]	@ (80039e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d004      	beq.n	8003990 <HAL_TIM_Base_Start_IT+0x80>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a18      	ldr	r2, [pc, #96]	@ (80039ec <HAL_TIM_Base_Start_IT+0xdc>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d111      	bne.n	80039b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b06      	cmp	r3, #6
 80039a0:	d010      	beq.n	80039c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0201 	orr.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b2:	e007      	b.n	80039c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40010000 	.word	0x40010000
 80039d8:	40000400 	.word	0x40000400
 80039dc:	40000800 	.word	0x40000800
 80039e0:	40000c00 	.word	0x40000c00
 80039e4:	40010400 	.word	0x40010400
 80039e8:	40014000 	.word	0x40014000
 80039ec:	40001800 	.word	0x40001800

080039f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d020      	beq.n	8003a54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01b      	beq.n	8003a54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0202 	mvn.w	r2, #2
 8003a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f8d2 	bl	8003be4 <HAL_TIM_IC_CaptureCallback>
 8003a40:	e005      	b.n	8003a4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f8c4 	bl	8003bd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f8d5 	bl	8003bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d020      	beq.n	8003aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d01b      	beq.n	8003aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f06f 0204 	mvn.w	r2, #4
 8003a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2202      	movs	r2, #2
 8003a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f8ac 	bl	8003be4 <HAL_TIM_IC_CaptureCallback>
 8003a8c:	e005      	b.n	8003a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f89e 	bl	8003bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f8af 	bl	8003bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d020      	beq.n	8003aec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d01b      	beq.n	8003aec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0208 	mvn.w	r2, #8
 8003abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f886 	bl	8003be4 <HAL_TIM_IC_CaptureCallback>
 8003ad8:	e005      	b.n	8003ae6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f878 	bl	8003bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f889 	bl	8003bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d020      	beq.n	8003b38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d01b      	beq.n	8003b38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0210 	mvn.w	r2, #16
 8003b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2208      	movs	r2, #8
 8003b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f860 	bl	8003be4 <HAL_TIM_IC_CaptureCallback>
 8003b24:	e005      	b.n	8003b32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f852 	bl	8003bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f863 	bl	8003bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00c      	beq.n	8003b5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d007      	beq.n	8003b5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0201 	mvn.w	r2, #1
 8003b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7fd f9bc 	bl	8000ed4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00c      	beq.n	8003b80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d007      	beq.n	8003b80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f982 	bl	8003e84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00c      	beq.n	8003ba4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d007      	beq.n	8003ba4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f834 	bl	8003c0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00c      	beq.n	8003bc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d007      	beq.n	8003bc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f06f 0220 	mvn.w	r2, #32
 8003bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f954 	bl	8003e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bc8:	bf00      	nop
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a46      	ldr	r2, [pc, #280]	@ (8003d4c <TIM_Base_SetConfig+0x12c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d013      	beq.n	8003c60 <TIM_Base_SetConfig+0x40>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c3e:	d00f      	beq.n	8003c60 <TIM_Base_SetConfig+0x40>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a43      	ldr	r2, [pc, #268]	@ (8003d50 <TIM_Base_SetConfig+0x130>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00b      	beq.n	8003c60 <TIM_Base_SetConfig+0x40>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a42      	ldr	r2, [pc, #264]	@ (8003d54 <TIM_Base_SetConfig+0x134>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d007      	beq.n	8003c60 <TIM_Base_SetConfig+0x40>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a41      	ldr	r2, [pc, #260]	@ (8003d58 <TIM_Base_SetConfig+0x138>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d003      	beq.n	8003c60 <TIM_Base_SetConfig+0x40>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a40      	ldr	r2, [pc, #256]	@ (8003d5c <TIM_Base_SetConfig+0x13c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d108      	bne.n	8003c72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a35      	ldr	r2, [pc, #212]	@ (8003d4c <TIM_Base_SetConfig+0x12c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d02b      	beq.n	8003cd2 <TIM_Base_SetConfig+0xb2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c80:	d027      	beq.n	8003cd2 <TIM_Base_SetConfig+0xb2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a32      	ldr	r2, [pc, #200]	@ (8003d50 <TIM_Base_SetConfig+0x130>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d023      	beq.n	8003cd2 <TIM_Base_SetConfig+0xb2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a31      	ldr	r2, [pc, #196]	@ (8003d54 <TIM_Base_SetConfig+0x134>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d01f      	beq.n	8003cd2 <TIM_Base_SetConfig+0xb2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a30      	ldr	r2, [pc, #192]	@ (8003d58 <TIM_Base_SetConfig+0x138>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d01b      	beq.n	8003cd2 <TIM_Base_SetConfig+0xb2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a2f      	ldr	r2, [pc, #188]	@ (8003d5c <TIM_Base_SetConfig+0x13c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d017      	beq.n	8003cd2 <TIM_Base_SetConfig+0xb2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a2e      	ldr	r2, [pc, #184]	@ (8003d60 <TIM_Base_SetConfig+0x140>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d013      	beq.n	8003cd2 <TIM_Base_SetConfig+0xb2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a2d      	ldr	r2, [pc, #180]	@ (8003d64 <TIM_Base_SetConfig+0x144>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d00f      	beq.n	8003cd2 <TIM_Base_SetConfig+0xb2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a2c      	ldr	r2, [pc, #176]	@ (8003d68 <TIM_Base_SetConfig+0x148>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00b      	beq.n	8003cd2 <TIM_Base_SetConfig+0xb2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a2b      	ldr	r2, [pc, #172]	@ (8003d6c <TIM_Base_SetConfig+0x14c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d007      	beq.n	8003cd2 <TIM_Base_SetConfig+0xb2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a2a      	ldr	r2, [pc, #168]	@ (8003d70 <TIM_Base_SetConfig+0x150>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d003      	beq.n	8003cd2 <TIM_Base_SetConfig+0xb2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a29      	ldr	r2, [pc, #164]	@ (8003d74 <TIM_Base_SetConfig+0x154>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d108      	bne.n	8003ce4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a10      	ldr	r2, [pc, #64]	@ (8003d4c <TIM_Base_SetConfig+0x12c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d003      	beq.n	8003d18 <TIM_Base_SetConfig+0xf8>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a12      	ldr	r2, [pc, #72]	@ (8003d5c <TIM_Base_SetConfig+0x13c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d103      	bne.n	8003d20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d105      	bne.n	8003d3e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f023 0201 	bic.w	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	611a      	str	r2, [r3, #16]
  }
}
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40010000 	.word	0x40010000
 8003d50:	40000400 	.word	0x40000400
 8003d54:	40000800 	.word	0x40000800
 8003d58:	40000c00 	.word	0x40000c00
 8003d5c:	40010400 	.word	0x40010400
 8003d60:	40014000 	.word	0x40014000
 8003d64:	40014400 	.word	0x40014400
 8003d68:	40014800 	.word	0x40014800
 8003d6c:	40001800 	.word	0x40001800
 8003d70:	40001c00 	.word	0x40001c00
 8003d74:	40002000 	.word	0x40002000

08003d78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e05a      	b.n	8003e46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003db6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a21      	ldr	r2, [pc, #132]	@ (8003e54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d022      	beq.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ddc:	d01d      	beq.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a1d      	ldr	r2, [pc, #116]	@ (8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d018      	beq.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1b      	ldr	r2, [pc, #108]	@ (8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a1a      	ldr	r2, [pc, #104]	@ (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00e      	beq.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a18      	ldr	r2, [pc, #96]	@ (8003e64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d009      	beq.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a17      	ldr	r2, [pc, #92]	@ (8003e68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d004      	beq.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a15      	ldr	r2, [pc, #84]	@ (8003e6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d10c      	bne.n	8003e34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40010000 	.word	0x40010000
 8003e58:	40000400 	.word	0x40000400
 8003e5c:	40000800 	.word	0x40000800
 8003e60:	40000c00 	.word	0x40000c00
 8003e64:	40010400 	.word	0x40010400
 8003e68:	40014000 	.word	0x40014000
 8003e6c:	40001800 	.word	0x40001800

08003e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e042      	b.n	8003f30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7fd f990 	bl	80011e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2224      	movs	r2, #36	@ 0x24
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f973 	bl	80041c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	691a      	ldr	r2, [r3, #16]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695a      	ldr	r2, [r3, #20]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08a      	sub	sp, #40	@ 0x28
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	d175      	bne.n	8004044 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_UART_Transmit+0x2c>
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e06e      	b.n	8004046 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2221      	movs	r2, #33	@ 0x21
 8003f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f76:	f7fd fab7 	bl	80014e8 <HAL_GetTick>
 8003f7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	88fa      	ldrh	r2, [r7, #6]
 8003f80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	88fa      	ldrh	r2, [r7, #6]
 8003f86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f90:	d108      	bne.n	8003fa4 <HAL_UART_Transmit+0x6c>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d104      	bne.n	8003fa4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	61bb      	str	r3, [r7, #24]
 8003fa2:	e003      	b.n	8003fac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fac:	e02e      	b.n	800400c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2180      	movs	r1, #128	@ 0x80
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 f848 	bl	800404e <UART_WaitOnFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e03a      	b.n	8004046 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10b      	bne.n	8003fee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fe4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	3302      	adds	r3, #2
 8003fea:	61bb      	str	r3, [r7, #24]
 8003fec:	e007      	b.n	8003ffe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	781a      	ldrb	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1cb      	bne.n	8003fae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2200      	movs	r2, #0
 800401e:	2140      	movs	r1, #64	@ 0x40
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f814 	bl	800404e <UART_WaitOnFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e006      	b.n	8004046 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	e000      	b.n	8004046 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004044:	2302      	movs	r3, #2
  }
}
 8004046:	4618      	mov	r0, r3
 8004048:	3720      	adds	r7, #32
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b086      	sub	sp, #24
 8004052:	af00      	add	r7, sp, #0
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	603b      	str	r3, [r7, #0]
 800405a:	4613      	mov	r3, r2
 800405c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800405e:	e03b      	b.n	80040d8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004066:	d037      	beq.n	80040d8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004068:	f7fd fa3e 	bl	80014e8 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	6a3a      	ldr	r2, [r7, #32]
 8004074:	429a      	cmp	r2, r3
 8004076:	d302      	bcc.n	800407e <UART_WaitOnFlagUntilTimeout+0x30>
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e03a      	b.n	80040f8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d023      	beq.n	80040d8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b80      	cmp	r3, #128	@ 0x80
 8004094:	d020      	beq.n	80040d8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b40      	cmp	r3, #64	@ 0x40
 800409a:	d01d      	beq.n	80040d8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d116      	bne.n	80040d8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f81d 	bl	8004100 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2208      	movs	r2, #8
 80040ca:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e00f      	b.n	80040f8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	4013      	ands	r3, r2
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	bf0c      	ite	eq
 80040e8:	2301      	moveq	r3, #1
 80040ea:	2300      	movne	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	461a      	mov	r2, r3
 80040f0:	79fb      	ldrb	r3, [r7, #7]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d0b4      	beq.n	8004060 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004100:	b480      	push	{r7}
 8004102:	b095      	sub	sp, #84	@ 0x54
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	330c      	adds	r3, #12
 800410e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800411e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	330c      	adds	r3, #12
 8004126:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004128:	643a      	str	r2, [r7, #64]	@ 0x40
 800412a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800412e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004130:	e841 2300 	strex	r3, r2, [r1]
 8004134:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e5      	bne.n	8004108 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3314      	adds	r3, #20
 8004142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	e853 3f00 	ldrex	r3, [r3]
 800414a:	61fb      	str	r3, [r7, #28]
   return(result);
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	f023 0301 	bic.w	r3, r3, #1
 8004152:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3314      	adds	r3, #20
 800415a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800415c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800415e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004160:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004164:	e841 2300 	strex	r3, r2, [r1]
 8004168:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e5      	bne.n	800413c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004174:	2b01      	cmp	r3, #1
 8004176:	d119      	bne.n	80041ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	330c      	adds	r3, #12
 800417e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	e853 3f00 	ldrex	r3, [r3]
 8004186:	60bb      	str	r3, [r7, #8]
   return(result);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f023 0310 	bic.w	r3, r3, #16
 800418e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	330c      	adds	r3, #12
 8004196:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004198:	61ba      	str	r2, [r7, #24]
 800419a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419c:	6979      	ldr	r1, [r7, #20]
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	e841 2300 	strex	r3, r2, [r1]
 80041a4:	613b      	str	r3, [r7, #16]
   return(result);
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e5      	bne.n	8004178 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80041ba:	bf00      	nop
 80041bc:	3754      	adds	r7, #84	@ 0x54
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041cc:	b0c0      	sub	sp, #256	@ 0x100
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80041e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e4:	68d9      	ldr	r1, [r3, #12]
 80041e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	ea40 0301 	orr.w	r3, r0, r1
 80041f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	431a      	orrs	r2, r3
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	431a      	orrs	r2, r3
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004220:	f021 010c 	bic.w	r1, r1, #12
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800422e:	430b      	orrs	r3, r1
 8004230:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800423e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004242:	6999      	ldr	r1, [r3, #24]
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	ea40 0301 	orr.w	r3, r0, r1
 800424e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	4b8f      	ldr	r3, [pc, #572]	@ (8004494 <UART_SetConfig+0x2cc>)
 8004258:	429a      	cmp	r2, r3
 800425a:	d005      	beq.n	8004268 <UART_SetConfig+0xa0>
 800425c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	4b8d      	ldr	r3, [pc, #564]	@ (8004498 <UART_SetConfig+0x2d0>)
 8004264:	429a      	cmp	r2, r3
 8004266:	d104      	bne.n	8004272 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004268:	f7fe fe20 	bl	8002eac <HAL_RCC_GetPCLK2Freq>
 800426c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004270:	e003      	b.n	800427a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004272:	f7fe fe07 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 8004276:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800427a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004284:	f040 810c 	bne.w	80044a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800428c:	2200      	movs	r2, #0
 800428e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004292:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004296:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800429a:	4622      	mov	r2, r4
 800429c:	462b      	mov	r3, r5
 800429e:	1891      	adds	r1, r2, r2
 80042a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80042a2:	415b      	adcs	r3, r3
 80042a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80042aa:	4621      	mov	r1, r4
 80042ac:	eb12 0801 	adds.w	r8, r2, r1
 80042b0:	4629      	mov	r1, r5
 80042b2:	eb43 0901 	adc.w	r9, r3, r1
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ca:	4690      	mov	r8, r2
 80042cc:	4699      	mov	r9, r3
 80042ce:	4623      	mov	r3, r4
 80042d0:	eb18 0303 	adds.w	r3, r8, r3
 80042d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042d8:	462b      	mov	r3, r5
 80042da:	eb49 0303 	adc.w	r3, r9, r3
 80042de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80042f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042f6:	460b      	mov	r3, r1
 80042f8:	18db      	adds	r3, r3, r3
 80042fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80042fc:	4613      	mov	r3, r2
 80042fe:	eb42 0303 	adc.w	r3, r2, r3
 8004302:	657b      	str	r3, [r7, #84]	@ 0x54
 8004304:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004308:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800430c:	f7fb ffd8 	bl	80002c0 <__aeabi_uldivmod>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4b61      	ldr	r3, [pc, #388]	@ (800449c <UART_SetConfig+0x2d4>)
 8004316:	fba3 2302 	umull	r2, r3, r3, r2
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	011c      	lsls	r4, r3, #4
 800431e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004322:	2200      	movs	r2, #0
 8004324:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004328:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800432c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004330:	4642      	mov	r2, r8
 8004332:	464b      	mov	r3, r9
 8004334:	1891      	adds	r1, r2, r2
 8004336:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004338:	415b      	adcs	r3, r3
 800433a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800433c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004340:	4641      	mov	r1, r8
 8004342:	eb12 0a01 	adds.w	sl, r2, r1
 8004346:	4649      	mov	r1, r9
 8004348:	eb43 0b01 	adc.w	fp, r3, r1
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004358:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800435c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004360:	4692      	mov	sl, r2
 8004362:	469b      	mov	fp, r3
 8004364:	4643      	mov	r3, r8
 8004366:	eb1a 0303 	adds.w	r3, sl, r3
 800436a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800436e:	464b      	mov	r3, r9
 8004370:	eb4b 0303 	adc.w	r3, fp, r3
 8004374:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004384:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004388:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800438c:	460b      	mov	r3, r1
 800438e:	18db      	adds	r3, r3, r3
 8004390:	643b      	str	r3, [r7, #64]	@ 0x40
 8004392:	4613      	mov	r3, r2
 8004394:	eb42 0303 	adc.w	r3, r2, r3
 8004398:	647b      	str	r3, [r7, #68]	@ 0x44
 800439a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800439e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80043a2:	f7fb ff8d 	bl	80002c0 <__aeabi_uldivmod>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	4611      	mov	r1, r2
 80043ac:	4b3b      	ldr	r3, [pc, #236]	@ (800449c <UART_SetConfig+0x2d4>)
 80043ae:	fba3 2301 	umull	r2, r3, r3, r1
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	2264      	movs	r2, #100	@ 0x64
 80043b6:	fb02 f303 	mul.w	r3, r2, r3
 80043ba:	1acb      	subs	r3, r1, r3
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80043c2:	4b36      	ldr	r3, [pc, #216]	@ (800449c <UART_SetConfig+0x2d4>)
 80043c4:	fba3 2302 	umull	r2, r3, r3, r2
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80043d0:	441c      	add	r4, r3
 80043d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80043e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80043e4:	4642      	mov	r2, r8
 80043e6:	464b      	mov	r3, r9
 80043e8:	1891      	adds	r1, r2, r2
 80043ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80043ec:	415b      	adcs	r3, r3
 80043ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80043f4:	4641      	mov	r1, r8
 80043f6:	1851      	adds	r1, r2, r1
 80043f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80043fa:	4649      	mov	r1, r9
 80043fc:	414b      	adcs	r3, r1
 80043fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800440c:	4659      	mov	r1, fp
 800440e:	00cb      	lsls	r3, r1, #3
 8004410:	4651      	mov	r1, sl
 8004412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004416:	4651      	mov	r1, sl
 8004418:	00ca      	lsls	r2, r1, #3
 800441a:	4610      	mov	r0, r2
 800441c:	4619      	mov	r1, r3
 800441e:	4603      	mov	r3, r0
 8004420:	4642      	mov	r2, r8
 8004422:	189b      	adds	r3, r3, r2
 8004424:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004428:	464b      	mov	r3, r9
 800442a:	460a      	mov	r2, r1
 800442c:	eb42 0303 	adc.w	r3, r2, r3
 8004430:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004440:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004444:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004448:	460b      	mov	r3, r1
 800444a:	18db      	adds	r3, r3, r3
 800444c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800444e:	4613      	mov	r3, r2
 8004450:	eb42 0303 	adc.w	r3, r2, r3
 8004454:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004456:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800445a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800445e:	f7fb ff2f 	bl	80002c0 <__aeabi_uldivmod>
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	4b0d      	ldr	r3, [pc, #52]	@ (800449c <UART_SetConfig+0x2d4>)
 8004468:	fba3 1302 	umull	r1, r3, r3, r2
 800446c:	095b      	lsrs	r3, r3, #5
 800446e:	2164      	movs	r1, #100	@ 0x64
 8004470:	fb01 f303 	mul.w	r3, r1, r3
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	3332      	adds	r3, #50	@ 0x32
 800447a:	4a08      	ldr	r2, [pc, #32]	@ (800449c <UART_SetConfig+0x2d4>)
 800447c:	fba2 2303 	umull	r2, r3, r2, r3
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	f003 0207 	and.w	r2, r3, #7
 8004486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4422      	add	r2, r4
 800448e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004490:	e106      	b.n	80046a0 <UART_SetConfig+0x4d8>
 8004492:	bf00      	nop
 8004494:	40011000 	.word	0x40011000
 8004498:	40011400 	.word	0x40011400
 800449c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044a4:	2200      	movs	r2, #0
 80044a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80044ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80044b2:	4642      	mov	r2, r8
 80044b4:	464b      	mov	r3, r9
 80044b6:	1891      	adds	r1, r2, r2
 80044b8:	6239      	str	r1, [r7, #32]
 80044ba:	415b      	adcs	r3, r3
 80044bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80044be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044c2:	4641      	mov	r1, r8
 80044c4:	1854      	adds	r4, r2, r1
 80044c6:	4649      	mov	r1, r9
 80044c8:	eb43 0501 	adc.w	r5, r3, r1
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	00eb      	lsls	r3, r5, #3
 80044d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044da:	00e2      	lsls	r2, r4, #3
 80044dc:	4614      	mov	r4, r2
 80044de:	461d      	mov	r5, r3
 80044e0:	4643      	mov	r3, r8
 80044e2:	18e3      	adds	r3, r4, r3
 80044e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044e8:	464b      	mov	r3, r9
 80044ea:	eb45 0303 	adc.w	r3, r5, r3
 80044ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800450e:	4629      	mov	r1, r5
 8004510:	008b      	lsls	r3, r1, #2
 8004512:	4621      	mov	r1, r4
 8004514:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004518:	4621      	mov	r1, r4
 800451a:	008a      	lsls	r2, r1, #2
 800451c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004520:	f7fb fece 	bl	80002c0 <__aeabi_uldivmod>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4b60      	ldr	r3, [pc, #384]	@ (80046ac <UART_SetConfig+0x4e4>)
 800452a:	fba3 2302 	umull	r2, r3, r3, r2
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	011c      	lsls	r4, r3, #4
 8004532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004536:	2200      	movs	r2, #0
 8004538:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800453c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004540:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004544:	4642      	mov	r2, r8
 8004546:	464b      	mov	r3, r9
 8004548:	1891      	adds	r1, r2, r2
 800454a:	61b9      	str	r1, [r7, #24]
 800454c:	415b      	adcs	r3, r3
 800454e:	61fb      	str	r3, [r7, #28]
 8004550:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004554:	4641      	mov	r1, r8
 8004556:	1851      	adds	r1, r2, r1
 8004558:	6139      	str	r1, [r7, #16]
 800455a:	4649      	mov	r1, r9
 800455c:	414b      	adcs	r3, r1
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800456c:	4659      	mov	r1, fp
 800456e:	00cb      	lsls	r3, r1, #3
 8004570:	4651      	mov	r1, sl
 8004572:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004576:	4651      	mov	r1, sl
 8004578:	00ca      	lsls	r2, r1, #3
 800457a:	4610      	mov	r0, r2
 800457c:	4619      	mov	r1, r3
 800457e:	4603      	mov	r3, r0
 8004580:	4642      	mov	r2, r8
 8004582:	189b      	adds	r3, r3, r2
 8004584:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004588:	464b      	mov	r3, r9
 800458a:	460a      	mov	r2, r1
 800458c:	eb42 0303 	adc.w	r3, r2, r3
 8004590:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800459e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80045ac:	4649      	mov	r1, r9
 80045ae:	008b      	lsls	r3, r1, #2
 80045b0:	4641      	mov	r1, r8
 80045b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045b6:	4641      	mov	r1, r8
 80045b8:	008a      	lsls	r2, r1, #2
 80045ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80045be:	f7fb fe7f 	bl	80002c0 <__aeabi_uldivmod>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4611      	mov	r1, r2
 80045c8:	4b38      	ldr	r3, [pc, #224]	@ (80046ac <UART_SetConfig+0x4e4>)
 80045ca:	fba3 2301 	umull	r2, r3, r3, r1
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	2264      	movs	r2, #100	@ 0x64
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	1acb      	subs	r3, r1, r3
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	3332      	adds	r3, #50	@ 0x32
 80045dc:	4a33      	ldr	r2, [pc, #204]	@ (80046ac <UART_SetConfig+0x4e4>)
 80045de:	fba2 2303 	umull	r2, r3, r2, r3
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045e8:	441c      	add	r4, r3
 80045ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ee:	2200      	movs	r2, #0
 80045f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80045f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80045f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80045f8:	4642      	mov	r2, r8
 80045fa:	464b      	mov	r3, r9
 80045fc:	1891      	adds	r1, r2, r2
 80045fe:	60b9      	str	r1, [r7, #8]
 8004600:	415b      	adcs	r3, r3
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004608:	4641      	mov	r1, r8
 800460a:	1851      	adds	r1, r2, r1
 800460c:	6039      	str	r1, [r7, #0]
 800460e:	4649      	mov	r1, r9
 8004610:	414b      	adcs	r3, r1
 8004612:	607b      	str	r3, [r7, #4]
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004620:	4659      	mov	r1, fp
 8004622:	00cb      	lsls	r3, r1, #3
 8004624:	4651      	mov	r1, sl
 8004626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800462a:	4651      	mov	r1, sl
 800462c:	00ca      	lsls	r2, r1, #3
 800462e:	4610      	mov	r0, r2
 8004630:	4619      	mov	r1, r3
 8004632:	4603      	mov	r3, r0
 8004634:	4642      	mov	r2, r8
 8004636:	189b      	adds	r3, r3, r2
 8004638:	66bb      	str	r3, [r7, #104]	@ 0x68
 800463a:	464b      	mov	r3, r9
 800463c:	460a      	mov	r2, r1
 800463e:	eb42 0303 	adc.w	r3, r2, r3
 8004642:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	663b      	str	r3, [r7, #96]	@ 0x60
 800464e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004650:	f04f 0200 	mov.w	r2, #0
 8004654:	f04f 0300 	mov.w	r3, #0
 8004658:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800465c:	4649      	mov	r1, r9
 800465e:	008b      	lsls	r3, r1, #2
 8004660:	4641      	mov	r1, r8
 8004662:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004666:	4641      	mov	r1, r8
 8004668:	008a      	lsls	r2, r1, #2
 800466a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800466e:	f7fb fe27 	bl	80002c0 <__aeabi_uldivmod>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4b0d      	ldr	r3, [pc, #52]	@ (80046ac <UART_SetConfig+0x4e4>)
 8004678:	fba3 1302 	umull	r1, r3, r3, r2
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	2164      	movs	r1, #100	@ 0x64
 8004680:	fb01 f303 	mul.w	r3, r1, r3
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	3332      	adds	r3, #50	@ 0x32
 800468a:	4a08      	ldr	r2, [pc, #32]	@ (80046ac <UART_SetConfig+0x4e4>)
 800468c:	fba2 2303 	umull	r2, r3, r2, r3
 8004690:	095b      	lsrs	r3, r3, #5
 8004692:	f003 020f 	and.w	r2, r3, #15
 8004696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4422      	add	r2, r4
 800469e:	609a      	str	r2, [r3, #8]
}
 80046a0:	bf00      	nop
 80046a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80046a6:	46bd      	mov	sp, r7
 80046a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ac:	51eb851f 	.word	0x51eb851f

080046b0 <siprintf>:
 80046b0:	b40e      	push	{r1, r2, r3}
 80046b2:	b500      	push	{lr}
 80046b4:	b09c      	sub	sp, #112	@ 0x70
 80046b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80046b8:	9002      	str	r0, [sp, #8]
 80046ba:	9006      	str	r0, [sp, #24]
 80046bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80046c0:	4809      	ldr	r0, [pc, #36]	@ (80046e8 <siprintf+0x38>)
 80046c2:	9107      	str	r1, [sp, #28]
 80046c4:	9104      	str	r1, [sp, #16]
 80046c6:	4909      	ldr	r1, [pc, #36]	@ (80046ec <siprintf+0x3c>)
 80046c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80046cc:	9105      	str	r1, [sp, #20]
 80046ce:	6800      	ldr	r0, [r0, #0]
 80046d0:	9301      	str	r3, [sp, #4]
 80046d2:	a902      	add	r1, sp, #8
 80046d4:	f000 f994 	bl	8004a00 <_svfiprintf_r>
 80046d8:	9b02      	ldr	r3, [sp, #8]
 80046da:	2200      	movs	r2, #0
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	b01c      	add	sp, #112	@ 0x70
 80046e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80046e4:	b003      	add	sp, #12
 80046e6:	4770      	bx	lr
 80046e8:	2000000c 	.word	0x2000000c
 80046ec:	ffff0208 	.word	0xffff0208

080046f0 <memset>:
 80046f0:	4402      	add	r2, r0
 80046f2:	4603      	mov	r3, r0
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d100      	bne.n	80046fa <memset+0xa>
 80046f8:	4770      	bx	lr
 80046fa:	f803 1b01 	strb.w	r1, [r3], #1
 80046fe:	e7f9      	b.n	80046f4 <memset+0x4>

08004700 <__errno>:
 8004700:	4b01      	ldr	r3, [pc, #4]	@ (8004708 <__errno+0x8>)
 8004702:	6818      	ldr	r0, [r3, #0]
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	2000000c 	.word	0x2000000c

0800470c <__libc_init_array>:
 800470c:	b570      	push	{r4, r5, r6, lr}
 800470e:	4d0d      	ldr	r5, [pc, #52]	@ (8004744 <__libc_init_array+0x38>)
 8004710:	4c0d      	ldr	r4, [pc, #52]	@ (8004748 <__libc_init_array+0x3c>)
 8004712:	1b64      	subs	r4, r4, r5
 8004714:	10a4      	asrs	r4, r4, #2
 8004716:	2600      	movs	r6, #0
 8004718:	42a6      	cmp	r6, r4
 800471a:	d109      	bne.n	8004730 <__libc_init_array+0x24>
 800471c:	4d0b      	ldr	r5, [pc, #44]	@ (800474c <__libc_init_array+0x40>)
 800471e:	4c0c      	ldr	r4, [pc, #48]	@ (8004750 <__libc_init_array+0x44>)
 8004720:	f000 fc66 	bl	8004ff0 <_init>
 8004724:	1b64      	subs	r4, r4, r5
 8004726:	10a4      	asrs	r4, r4, #2
 8004728:	2600      	movs	r6, #0
 800472a:	42a6      	cmp	r6, r4
 800472c:	d105      	bne.n	800473a <__libc_init_array+0x2e>
 800472e:	bd70      	pop	{r4, r5, r6, pc}
 8004730:	f855 3b04 	ldr.w	r3, [r5], #4
 8004734:	4798      	blx	r3
 8004736:	3601      	adds	r6, #1
 8004738:	e7ee      	b.n	8004718 <__libc_init_array+0xc>
 800473a:	f855 3b04 	ldr.w	r3, [r5], #4
 800473e:	4798      	blx	r3
 8004740:	3601      	adds	r6, #1
 8004742:	e7f2      	b.n	800472a <__libc_init_array+0x1e>
 8004744:	08005090 	.word	0x08005090
 8004748:	08005090 	.word	0x08005090
 800474c:	08005090 	.word	0x08005090
 8004750:	08005094 	.word	0x08005094

08004754 <__retarget_lock_acquire_recursive>:
 8004754:	4770      	bx	lr

08004756 <__retarget_lock_release_recursive>:
 8004756:	4770      	bx	lr

08004758 <_free_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4605      	mov	r5, r0
 800475c:	2900      	cmp	r1, #0
 800475e:	d041      	beq.n	80047e4 <_free_r+0x8c>
 8004760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004764:	1f0c      	subs	r4, r1, #4
 8004766:	2b00      	cmp	r3, #0
 8004768:	bfb8      	it	lt
 800476a:	18e4      	addlt	r4, r4, r3
 800476c:	f000 f8e0 	bl	8004930 <__malloc_lock>
 8004770:	4a1d      	ldr	r2, [pc, #116]	@ (80047e8 <_free_r+0x90>)
 8004772:	6813      	ldr	r3, [r2, #0]
 8004774:	b933      	cbnz	r3, 8004784 <_free_r+0x2c>
 8004776:	6063      	str	r3, [r4, #4]
 8004778:	6014      	str	r4, [r2, #0]
 800477a:	4628      	mov	r0, r5
 800477c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004780:	f000 b8dc 	b.w	800493c <__malloc_unlock>
 8004784:	42a3      	cmp	r3, r4
 8004786:	d908      	bls.n	800479a <_free_r+0x42>
 8004788:	6820      	ldr	r0, [r4, #0]
 800478a:	1821      	adds	r1, r4, r0
 800478c:	428b      	cmp	r3, r1
 800478e:	bf01      	itttt	eq
 8004790:	6819      	ldreq	r1, [r3, #0]
 8004792:	685b      	ldreq	r3, [r3, #4]
 8004794:	1809      	addeq	r1, r1, r0
 8004796:	6021      	streq	r1, [r4, #0]
 8004798:	e7ed      	b.n	8004776 <_free_r+0x1e>
 800479a:	461a      	mov	r2, r3
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	b10b      	cbz	r3, 80047a4 <_free_r+0x4c>
 80047a0:	42a3      	cmp	r3, r4
 80047a2:	d9fa      	bls.n	800479a <_free_r+0x42>
 80047a4:	6811      	ldr	r1, [r2, #0]
 80047a6:	1850      	adds	r0, r2, r1
 80047a8:	42a0      	cmp	r0, r4
 80047aa:	d10b      	bne.n	80047c4 <_free_r+0x6c>
 80047ac:	6820      	ldr	r0, [r4, #0]
 80047ae:	4401      	add	r1, r0
 80047b0:	1850      	adds	r0, r2, r1
 80047b2:	4283      	cmp	r3, r0
 80047b4:	6011      	str	r1, [r2, #0]
 80047b6:	d1e0      	bne.n	800477a <_free_r+0x22>
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	6053      	str	r3, [r2, #4]
 80047be:	4408      	add	r0, r1
 80047c0:	6010      	str	r0, [r2, #0]
 80047c2:	e7da      	b.n	800477a <_free_r+0x22>
 80047c4:	d902      	bls.n	80047cc <_free_r+0x74>
 80047c6:	230c      	movs	r3, #12
 80047c8:	602b      	str	r3, [r5, #0]
 80047ca:	e7d6      	b.n	800477a <_free_r+0x22>
 80047cc:	6820      	ldr	r0, [r4, #0]
 80047ce:	1821      	adds	r1, r4, r0
 80047d0:	428b      	cmp	r3, r1
 80047d2:	bf04      	itt	eq
 80047d4:	6819      	ldreq	r1, [r3, #0]
 80047d6:	685b      	ldreq	r3, [r3, #4]
 80047d8:	6063      	str	r3, [r4, #4]
 80047da:	bf04      	itt	eq
 80047dc:	1809      	addeq	r1, r1, r0
 80047de:	6021      	streq	r1, [r4, #0]
 80047e0:	6054      	str	r4, [r2, #4]
 80047e2:	e7ca      	b.n	800477a <_free_r+0x22>
 80047e4:	bd38      	pop	{r3, r4, r5, pc}
 80047e6:	bf00      	nop
 80047e8:	20000434 	.word	0x20000434

080047ec <sbrk_aligned>:
 80047ec:	b570      	push	{r4, r5, r6, lr}
 80047ee:	4e0f      	ldr	r6, [pc, #60]	@ (800482c <sbrk_aligned+0x40>)
 80047f0:	460c      	mov	r4, r1
 80047f2:	6831      	ldr	r1, [r6, #0]
 80047f4:	4605      	mov	r5, r0
 80047f6:	b911      	cbnz	r1, 80047fe <sbrk_aligned+0x12>
 80047f8:	f000 fba6 	bl	8004f48 <_sbrk_r>
 80047fc:	6030      	str	r0, [r6, #0]
 80047fe:	4621      	mov	r1, r4
 8004800:	4628      	mov	r0, r5
 8004802:	f000 fba1 	bl	8004f48 <_sbrk_r>
 8004806:	1c43      	adds	r3, r0, #1
 8004808:	d103      	bne.n	8004812 <sbrk_aligned+0x26>
 800480a:	f04f 34ff 	mov.w	r4, #4294967295
 800480e:	4620      	mov	r0, r4
 8004810:	bd70      	pop	{r4, r5, r6, pc}
 8004812:	1cc4      	adds	r4, r0, #3
 8004814:	f024 0403 	bic.w	r4, r4, #3
 8004818:	42a0      	cmp	r0, r4
 800481a:	d0f8      	beq.n	800480e <sbrk_aligned+0x22>
 800481c:	1a21      	subs	r1, r4, r0
 800481e:	4628      	mov	r0, r5
 8004820:	f000 fb92 	bl	8004f48 <_sbrk_r>
 8004824:	3001      	adds	r0, #1
 8004826:	d1f2      	bne.n	800480e <sbrk_aligned+0x22>
 8004828:	e7ef      	b.n	800480a <sbrk_aligned+0x1e>
 800482a:	bf00      	nop
 800482c:	20000430 	.word	0x20000430

08004830 <_malloc_r>:
 8004830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004834:	1ccd      	adds	r5, r1, #3
 8004836:	f025 0503 	bic.w	r5, r5, #3
 800483a:	3508      	adds	r5, #8
 800483c:	2d0c      	cmp	r5, #12
 800483e:	bf38      	it	cc
 8004840:	250c      	movcc	r5, #12
 8004842:	2d00      	cmp	r5, #0
 8004844:	4606      	mov	r6, r0
 8004846:	db01      	blt.n	800484c <_malloc_r+0x1c>
 8004848:	42a9      	cmp	r1, r5
 800484a:	d904      	bls.n	8004856 <_malloc_r+0x26>
 800484c:	230c      	movs	r3, #12
 800484e:	6033      	str	r3, [r6, #0]
 8004850:	2000      	movs	r0, #0
 8004852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004856:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800492c <_malloc_r+0xfc>
 800485a:	f000 f869 	bl	8004930 <__malloc_lock>
 800485e:	f8d8 3000 	ldr.w	r3, [r8]
 8004862:	461c      	mov	r4, r3
 8004864:	bb44      	cbnz	r4, 80048b8 <_malloc_r+0x88>
 8004866:	4629      	mov	r1, r5
 8004868:	4630      	mov	r0, r6
 800486a:	f7ff ffbf 	bl	80047ec <sbrk_aligned>
 800486e:	1c43      	adds	r3, r0, #1
 8004870:	4604      	mov	r4, r0
 8004872:	d158      	bne.n	8004926 <_malloc_r+0xf6>
 8004874:	f8d8 4000 	ldr.w	r4, [r8]
 8004878:	4627      	mov	r7, r4
 800487a:	2f00      	cmp	r7, #0
 800487c:	d143      	bne.n	8004906 <_malloc_r+0xd6>
 800487e:	2c00      	cmp	r4, #0
 8004880:	d04b      	beq.n	800491a <_malloc_r+0xea>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	4639      	mov	r1, r7
 8004886:	4630      	mov	r0, r6
 8004888:	eb04 0903 	add.w	r9, r4, r3
 800488c:	f000 fb5c 	bl	8004f48 <_sbrk_r>
 8004890:	4581      	cmp	r9, r0
 8004892:	d142      	bne.n	800491a <_malloc_r+0xea>
 8004894:	6821      	ldr	r1, [r4, #0]
 8004896:	1a6d      	subs	r5, r5, r1
 8004898:	4629      	mov	r1, r5
 800489a:	4630      	mov	r0, r6
 800489c:	f7ff ffa6 	bl	80047ec <sbrk_aligned>
 80048a0:	3001      	adds	r0, #1
 80048a2:	d03a      	beq.n	800491a <_malloc_r+0xea>
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	442b      	add	r3, r5
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	f8d8 3000 	ldr.w	r3, [r8]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	bb62      	cbnz	r2, 800490c <_malloc_r+0xdc>
 80048b2:	f8c8 7000 	str.w	r7, [r8]
 80048b6:	e00f      	b.n	80048d8 <_malloc_r+0xa8>
 80048b8:	6822      	ldr	r2, [r4, #0]
 80048ba:	1b52      	subs	r2, r2, r5
 80048bc:	d420      	bmi.n	8004900 <_malloc_r+0xd0>
 80048be:	2a0b      	cmp	r2, #11
 80048c0:	d917      	bls.n	80048f2 <_malloc_r+0xc2>
 80048c2:	1961      	adds	r1, r4, r5
 80048c4:	42a3      	cmp	r3, r4
 80048c6:	6025      	str	r5, [r4, #0]
 80048c8:	bf18      	it	ne
 80048ca:	6059      	strne	r1, [r3, #4]
 80048cc:	6863      	ldr	r3, [r4, #4]
 80048ce:	bf08      	it	eq
 80048d0:	f8c8 1000 	streq.w	r1, [r8]
 80048d4:	5162      	str	r2, [r4, r5]
 80048d6:	604b      	str	r3, [r1, #4]
 80048d8:	4630      	mov	r0, r6
 80048da:	f000 f82f 	bl	800493c <__malloc_unlock>
 80048de:	f104 000b 	add.w	r0, r4, #11
 80048e2:	1d23      	adds	r3, r4, #4
 80048e4:	f020 0007 	bic.w	r0, r0, #7
 80048e8:	1ac2      	subs	r2, r0, r3
 80048ea:	bf1c      	itt	ne
 80048ec:	1a1b      	subne	r3, r3, r0
 80048ee:	50a3      	strne	r3, [r4, r2]
 80048f0:	e7af      	b.n	8004852 <_malloc_r+0x22>
 80048f2:	6862      	ldr	r2, [r4, #4]
 80048f4:	42a3      	cmp	r3, r4
 80048f6:	bf0c      	ite	eq
 80048f8:	f8c8 2000 	streq.w	r2, [r8]
 80048fc:	605a      	strne	r2, [r3, #4]
 80048fe:	e7eb      	b.n	80048d8 <_malloc_r+0xa8>
 8004900:	4623      	mov	r3, r4
 8004902:	6864      	ldr	r4, [r4, #4]
 8004904:	e7ae      	b.n	8004864 <_malloc_r+0x34>
 8004906:	463c      	mov	r4, r7
 8004908:	687f      	ldr	r7, [r7, #4]
 800490a:	e7b6      	b.n	800487a <_malloc_r+0x4a>
 800490c:	461a      	mov	r2, r3
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	42a3      	cmp	r3, r4
 8004912:	d1fb      	bne.n	800490c <_malloc_r+0xdc>
 8004914:	2300      	movs	r3, #0
 8004916:	6053      	str	r3, [r2, #4]
 8004918:	e7de      	b.n	80048d8 <_malloc_r+0xa8>
 800491a:	230c      	movs	r3, #12
 800491c:	6033      	str	r3, [r6, #0]
 800491e:	4630      	mov	r0, r6
 8004920:	f000 f80c 	bl	800493c <__malloc_unlock>
 8004924:	e794      	b.n	8004850 <_malloc_r+0x20>
 8004926:	6005      	str	r5, [r0, #0]
 8004928:	e7d6      	b.n	80048d8 <_malloc_r+0xa8>
 800492a:	bf00      	nop
 800492c:	20000434 	.word	0x20000434

08004930 <__malloc_lock>:
 8004930:	4801      	ldr	r0, [pc, #4]	@ (8004938 <__malloc_lock+0x8>)
 8004932:	f7ff bf0f 	b.w	8004754 <__retarget_lock_acquire_recursive>
 8004936:	bf00      	nop
 8004938:	2000042c 	.word	0x2000042c

0800493c <__malloc_unlock>:
 800493c:	4801      	ldr	r0, [pc, #4]	@ (8004944 <__malloc_unlock+0x8>)
 800493e:	f7ff bf0a 	b.w	8004756 <__retarget_lock_release_recursive>
 8004942:	bf00      	nop
 8004944:	2000042c 	.word	0x2000042c

08004948 <__ssputs_r>:
 8004948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800494c:	688e      	ldr	r6, [r1, #8]
 800494e:	461f      	mov	r7, r3
 8004950:	42be      	cmp	r6, r7
 8004952:	680b      	ldr	r3, [r1, #0]
 8004954:	4682      	mov	sl, r0
 8004956:	460c      	mov	r4, r1
 8004958:	4690      	mov	r8, r2
 800495a:	d82d      	bhi.n	80049b8 <__ssputs_r+0x70>
 800495c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004960:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004964:	d026      	beq.n	80049b4 <__ssputs_r+0x6c>
 8004966:	6965      	ldr	r5, [r4, #20]
 8004968:	6909      	ldr	r1, [r1, #16]
 800496a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800496e:	eba3 0901 	sub.w	r9, r3, r1
 8004972:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004976:	1c7b      	adds	r3, r7, #1
 8004978:	444b      	add	r3, r9
 800497a:	106d      	asrs	r5, r5, #1
 800497c:	429d      	cmp	r5, r3
 800497e:	bf38      	it	cc
 8004980:	461d      	movcc	r5, r3
 8004982:	0553      	lsls	r3, r2, #21
 8004984:	d527      	bpl.n	80049d6 <__ssputs_r+0x8e>
 8004986:	4629      	mov	r1, r5
 8004988:	f7ff ff52 	bl	8004830 <_malloc_r>
 800498c:	4606      	mov	r6, r0
 800498e:	b360      	cbz	r0, 80049ea <__ssputs_r+0xa2>
 8004990:	6921      	ldr	r1, [r4, #16]
 8004992:	464a      	mov	r2, r9
 8004994:	f000 fae8 	bl	8004f68 <memcpy>
 8004998:	89a3      	ldrh	r3, [r4, #12]
 800499a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800499e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049a2:	81a3      	strh	r3, [r4, #12]
 80049a4:	6126      	str	r6, [r4, #16]
 80049a6:	6165      	str	r5, [r4, #20]
 80049a8:	444e      	add	r6, r9
 80049aa:	eba5 0509 	sub.w	r5, r5, r9
 80049ae:	6026      	str	r6, [r4, #0]
 80049b0:	60a5      	str	r5, [r4, #8]
 80049b2:	463e      	mov	r6, r7
 80049b4:	42be      	cmp	r6, r7
 80049b6:	d900      	bls.n	80049ba <__ssputs_r+0x72>
 80049b8:	463e      	mov	r6, r7
 80049ba:	6820      	ldr	r0, [r4, #0]
 80049bc:	4632      	mov	r2, r6
 80049be:	4641      	mov	r1, r8
 80049c0:	f000 faa8 	bl	8004f14 <memmove>
 80049c4:	68a3      	ldr	r3, [r4, #8]
 80049c6:	1b9b      	subs	r3, r3, r6
 80049c8:	60a3      	str	r3, [r4, #8]
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	4433      	add	r3, r6
 80049ce:	6023      	str	r3, [r4, #0]
 80049d0:	2000      	movs	r0, #0
 80049d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d6:	462a      	mov	r2, r5
 80049d8:	f000 fad4 	bl	8004f84 <_realloc_r>
 80049dc:	4606      	mov	r6, r0
 80049de:	2800      	cmp	r0, #0
 80049e0:	d1e0      	bne.n	80049a4 <__ssputs_r+0x5c>
 80049e2:	6921      	ldr	r1, [r4, #16]
 80049e4:	4650      	mov	r0, sl
 80049e6:	f7ff feb7 	bl	8004758 <_free_r>
 80049ea:	230c      	movs	r3, #12
 80049ec:	f8ca 3000 	str.w	r3, [sl]
 80049f0:	89a3      	ldrh	r3, [r4, #12]
 80049f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049f6:	81a3      	strh	r3, [r4, #12]
 80049f8:	f04f 30ff 	mov.w	r0, #4294967295
 80049fc:	e7e9      	b.n	80049d2 <__ssputs_r+0x8a>
	...

08004a00 <_svfiprintf_r>:
 8004a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a04:	4698      	mov	r8, r3
 8004a06:	898b      	ldrh	r3, [r1, #12]
 8004a08:	061b      	lsls	r3, r3, #24
 8004a0a:	b09d      	sub	sp, #116	@ 0x74
 8004a0c:	4607      	mov	r7, r0
 8004a0e:	460d      	mov	r5, r1
 8004a10:	4614      	mov	r4, r2
 8004a12:	d510      	bpl.n	8004a36 <_svfiprintf_r+0x36>
 8004a14:	690b      	ldr	r3, [r1, #16]
 8004a16:	b973      	cbnz	r3, 8004a36 <_svfiprintf_r+0x36>
 8004a18:	2140      	movs	r1, #64	@ 0x40
 8004a1a:	f7ff ff09 	bl	8004830 <_malloc_r>
 8004a1e:	6028      	str	r0, [r5, #0]
 8004a20:	6128      	str	r0, [r5, #16]
 8004a22:	b930      	cbnz	r0, 8004a32 <_svfiprintf_r+0x32>
 8004a24:	230c      	movs	r3, #12
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2c:	b01d      	add	sp, #116	@ 0x74
 8004a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a32:	2340      	movs	r3, #64	@ 0x40
 8004a34:	616b      	str	r3, [r5, #20]
 8004a36:	2300      	movs	r3, #0
 8004a38:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a3a:	2320      	movs	r3, #32
 8004a3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a40:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a44:	2330      	movs	r3, #48	@ 0x30
 8004a46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004be4 <_svfiprintf_r+0x1e4>
 8004a4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a4e:	f04f 0901 	mov.w	r9, #1
 8004a52:	4623      	mov	r3, r4
 8004a54:	469a      	mov	sl, r3
 8004a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a5a:	b10a      	cbz	r2, 8004a60 <_svfiprintf_r+0x60>
 8004a5c:	2a25      	cmp	r2, #37	@ 0x25
 8004a5e:	d1f9      	bne.n	8004a54 <_svfiprintf_r+0x54>
 8004a60:	ebba 0b04 	subs.w	fp, sl, r4
 8004a64:	d00b      	beq.n	8004a7e <_svfiprintf_r+0x7e>
 8004a66:	465b      	mov	r3, fp
 8004a68:	4622      	mov	r2, r4
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	4638      	mov	r0, r7
 8004a6e:	f7ff ff6b 	bl	8004948 <__ssputs_r>
 8004a72:	3001      	adds	r0, #1
 8004a74:	f000 80a7 	beq.w	8004bc6 <_svfiprintf_r+0x1c6>
 8004a78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a7a:	445a      	add	r2, fp
 8004a7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 809f 	beq.w	8004bc6 <_svfiprintf_r+0x1c6>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a92:	f10a 0a01 	add.w	sl, sl, #1
 8004a96:	9304      	str	r3, [sp, #16]
 8004a98:	9307      	str	r3, [sp, #28]
 8004a9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004aa0:	4654      	mov	r4, sl
 8004aa2:	2205      	movs	r2, #5
 8004aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aa8:	484e      	ldr	r0, [pc, #312]	@ (8004be4 <_svfiprintf_r+0x1e4>)
 8004aaa:	f7fb fbb9 	bl	8000220 <memchr>
 8004aae:	9a04      	ldr	r2, [sp, #16]
 8004ab0:	b9d8      	cbnz	r0, 8004aea <_svfiprintf_r+0xea>
 8004ab2:	06d0      	lsls	r0, r2, #27
 8004ab4:	bf44      	itt	mi
 8004ab6:	2320      	movmi	r3, #32
 8004ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004abc:	0711      	lsls	r1, r2, #28
 8004abe:	bf44      	itt	mi
 8004ac0:	232b      	movmi	r3, #43	@ 0x2b
 8004ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8004aca:	2b2a      	cmp	r3, #42	@ 0x2a
 8004acc:	d015      	beq.n	8004afa <_svfiprintf_r+0xfa>
 8004ace:	9a07      	ldr	r2, [sp, #28]
 8004ad0:	4654      	mov	r4, sl
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	f04f 0c0a 	mov.w	ip, #10
 8004ad8:	4621      	mov	r1, r4
 8004ada:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ade:	3b30      	subs	r3, #48	@ 0x30
 8004ae0:	2b09      	cmp	r3, #9
 8004ae2:	d94b      	bls.n	8004b7c <_svfiprintf_r+0x17c>
 8004ae4:	b1b0      	cbz	r0, 8004b14 <_svfiprintf_r+0x114>
 8004ae6:	9207      	str	r2, [sp, #28]
 8004ae8:	e014      	b.n	8004b14 <_svfiprintf_r+0x114>
 8004aea:	eba0 0308 	sub.w	r3, r0, r8
 8004aee:	fa09 f303 	lsl.w	r3, r9, r3
 8004af2:	4313      	orrs	r3, r2
 8004af4:	9304      	str	r3, [sp, #16]
 8004af6:	46a2      	mov	sl, r4
 8004af8:	e7d2      	b.n	8004aa0 <_svfiprintf_r+0xa0>
 8004afa:	9b03      	ldr	r3, [sp, #12]
 8004afc:	1d19      	adds	r1, r3, #4
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	9103      	str	r1, [sp, #12]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	bfbb      	ittet	lt
 8004b06:	425b      	neglt	r3, r3
 8004b08:	f042 0202 	orrlt.w	r2, r2, #2
 8004b0c:	9307      	strge	r3, [sp, #28]
 8004b0e:	9307      	strlt	r3, [sp, #28]
 8004b10:	bfb8      	it	lt
 8004b12:	9204      	strlt	r2, [sp, #16]
 8004b14:	7823      	ldrb	r3, [r4, #0]
 8004b16:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b18:	d10a      	bne.n	8004b30 <_svfiprintf_r+0x130>
 8004b1a:	7863      	ldrb	r3, [r4, #1]
 8004b1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b1e:	d132      	bne.n	8004b86 <_svfiprintf_r+0x186>
 8004b20:	9b03      	ldr	r3, [sp, #12]
 8004b22:	1d1a      	adds	r2, r3, #4
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	9203      	str	r2, [sp, #12]
 8004b28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b2c:	3402      	adds	r4, #2
 8004b2e:	9305      	str	r3, [sp, #20]
 8004b30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004bf4 <_svfiprintf_r+0x1f4>
 8004b34:	7821      	ldrb	r1, [r4, #0]
 8004b36:	2203      	movs	r2, #3
 8004b38:	4650      	mov	r0, sl
 8004b3a:	f7fb fb71 	bl	8000220 <memchr>
 8004b3e:	b138      	cbz	r0, 8004b50 <_svfiprintf_r+0x150>
 8004b40:	9b04      	ldr	r3, [sp, #16]
 8004b42:	eba0 000a 	sub.w	r0, r0, sl
 8004b46:	2240      	movs	r2, #64	@ 0x40
 8004b48:	4082      	lsls	r2, r0
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	3401      	adds	r4, #1
 8004b4e:	9304      	str	r3, [sp, #16]
 8004b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b54:	4824      	ldr	r0, [pc, #144]	@ (8004be8 <_svfiprintf_r+0x1e8>)
 8004b56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b5a:	2206      	movs	r2, #6
 8004b5c:	f7fb fb60 	bl	8000220 <memchr>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d036      	beq.n	8004bd2 <_svfiprintf_r+0x1d2>
 8004b64:	4b21      	ldr	r3, [pc, #132]	@ (8004bec <_svfiprintf_r+0x1ec>)
 8004b66:	bb1b      	cbnz	r3, 8004bb0 <_svfiprintf_r+0x1b0>
 8004b68:	9b03      	ldr	r3, [sp, #12]
 8004b6a:	3307      	adds	r3, #7
 8004b6c:	f023 0307 	bic.w	r3, r3, #7
 8004b70:	3308      	adds	r3, #8
 8004b72:	9303      	str	r3, [sp, #12]
 8004b74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b76:	4433      	add	r3, r6
 8004b78:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b7a:	e76a      	b.n	8004a52 <_svfiprintf_r+0x52>
 8004b7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b80:	460c      	mov	r4, r1
 8004b82:	2001      	movs	r0, #1
 8004b84:	e7a8      	b.n	8004ad8 <_svfiprintf_r+0xd8>
 8004b86:	2300      	movs	r3, #0
 8004b88:	3401      	adds	r4, #1
 8004b8a:	9305      	str	r3, [sp, #20]
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	f04f 0c0a 	mov.w	ip, #10
 8004b92:	4620      	mov	r0, r4
 8004b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b98:	3a30      	subs	r2, #48	@ 0x30
 8004b9a:	2a09      	cmp	r2, #9
 8004b9c:	d903      	bls.n	8004ba6 <_svfiprintf_r+0x1a6>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0c6      	beq.n	8004b30 <_svfiprintf_r+0x130>
 8004ba2:	9105      	str	r1, [sp, #20]
 8004ba4:	e7c4      	b.n	8004b30 <_svfiprintf_r+0x130>
 8004ba6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004baa:	4604      	mov	r4, r0
 8004bac:	2301      	movs	r3, #1
 8004bae:	e7f0      	b.n	8004b92 <_svfiprintf_r+0x192>
 8004bb0:	ab03      	add	r3, sp, #12
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	462a      	mov	r2, r5
 8004bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf0 <_svfiprintf_r+0x1f0>)
 8004bb8:	a904      	add	r1, sp, #16
 8004bba:	4638      	mov	r0, r7
 8004bbc:	f3af 8000 	nop.w
 8004bc0:	1c42      	adds	r2, r0, #1
 8004bc2:	4606      	mov	r6, r0
 8004bc4:	d1d6      	bne.n	8004b74 <_svfiprintf_r+0x174>
 8004bc6:	89ab      	ldrh	r3, [r5, #12]
 8004bc8:	065b      	lsls	r3, r3, #25
 8004bca:	f53f af2d 	bmi.w	8004a28 <_svfiprintf_r+0x28>
 8004bce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004bd0:	e72c      	b.n	8004a2c <_svfiprintf_r+0x2c>
 8004bd2:	ab03      	add	r3, sp, #12
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	462a      	mov	r2, r5
 8004bd8:	4b05      	ldr	r3, [pc, #20]	@ (8004bf0 <_svfiprintf_r+0x1f0>)
 8004bda:	a904      	add	r1, sp, #16
 8004bdc:	4638      	mov	r0, r7
 8004bde:	f000 f879 	bl	8004cd4 <_printf_i>
 8004be2:	e7ed      	b.n	8004bc0 <_svfiprintf_r+0x1c0>
 8004be4:	08005054 	.word	0x08005054
 8004be8:	0800505e 	.word	0x0800505e
 8004bec:	00000000 	.word	0x00000000
 8004bf0:	08004949 	.word	0x08004949
 8004bf4:	0800505a 	.word	0x0800505a

08004bf8 <_printf_common>:
 8004bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bfc:	4616      	mov	r6, r2
 8004bfe:	4698      	mov	r8, r3
 8004c00:	688a      	ldr	r2, [r1, #8]
 8004c02:	690b      	ldr	r3, [r1, #16]
 8004c04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	bfb8      	it	lt
 8004c0c:	4613      	movlt	r3, r2
 8004c0e:	6033      	str	r3, [r6, #0]
 8004c10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c14:	4607      	mov	r7, r0
 8004c16:	460c      	mov	r4, r1
 8004c18:	b10a      	cbz	r2, 8004c1e <_printf_common+0x26>
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	6033      	str	r3, [r6, #0]
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	0699      	lsls	r1, r3, #26
 8004c22:	bf42      	ittt	mi
 8004c24:	6833      	ldrmi	r3, [r6, #0]
 8004c26:	3302      	addmi	r3, #2
 8004c28:	6033      	strmi	r3, [r6, #0]
 8004c2a:	6825      	ldr	r5, [r4, #0]
 8004c2c:	f015 0506 	ands.w	r5, r5, #6
 8004c30:	d106      	bne.n	8004c40 <_printf_common+0x48>
 8004c32:	f104 0a19 	add.w	sl, r4, #25
 8004c36:	68e3      	ldr	r3, [r4, #12]
 8004c38:	6832      	ldr	r2, [r6, #0]
 8004c3a:	1a9b      	subs	r3, r3, r2
 8004c3c:	42ab      	cmp	r3, r5
 8004c3e:	dc26      	bgt.n	8004c8e <_printf_common+0x96>
 8004c40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c44:	6822      	ldr	r2, [r4, #0]
 8004c46:	3b00      	subs	r3, #0
 8004c48:	bf18      	it	ne
 8004c4a:	2301      	movne	r3, #1
 8004c4c:	0692      	lsls	r2, r2, #26
 8004c4e:	d42b      	bmi.n	8004ca8 <_printf_common+0xb0>
 8004c50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c54:	4641      	mov	r1, r8
 8004c56:	4638      	mov	r0, r7
 8004c58:	47c8      	blx	r9
 8004c5a:	3001      	adds	r0, #1
 8004c5c:	d01e      	beq.n	8004c9c <_printf_common+0xa4>
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	6922      	ldr	r2, [r4, #16]
 8004c62:	f003 0306 	and.w	r3, r3, #6
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	bf02      	ittt	eq
 8004c6a:	68e5      	ldreq	r5, [r4, #12]
 8004c6c:	6833      	ldreq	r3, [r6, #0]
 8004c6e:	1aed      	subeq	r5, r5, r3
 8004c70:	68a3      	ldr	r3, [r4, #8]
 8004c72:	bf0c      	ite	eq
 8004c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c78:	2500      	movne	r5, #0
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	bfc4      	itt	gt
 8004c7e:	1a9b      	subgt	r3, r3, r2
 8004c80:	18ed      	addgt	r5, r5, r3
 8004c82:	2600      	movs	r6, #0
 8004c84:	341a      	adds	r4, #26
 8004c86:	42b5      	cmp	r5, r6
 8004c88:	d11a      	bne.n	8004cc0 <_printf_common+0xc8>
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	e008      	b.n	8004ca0 <_printf_common+0xa8>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	4652      	mov	r2, sl
 8004c92:	4641      	mov	r1, r8
 8004c94:	4638      	mov	r0, r7
 8004c96:	47c8      	blx	r9
 8004c98:	3001      	adds	r0, #1
 8004c9a:	d103      	bne.n	8004ca4 <_printf_common+0xac>
 8004c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca4:	3501      	adds	r5, #1
 8004ca6:	e7c6      	b.n	8004c36 <_printf_common+0x3e>
 8004ca8:	18e1      	adds	r1, r4, r3
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	2030      	movs	r0, #48	@ 0x30
 8004cae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004cb2:	4422      	add	r2, r4
 8004cb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004cb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004cbc:	3302      	adds	r3, #2
 8004cbe:	e7c7      	b.n	8004c50 <_printf_common+0x58>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	4641      	mov	r1, r8
 8004cc6:	4638      	mov	r0, r7
 8004cc8:	47c8      	blx	r9
 8004cca:	3001      	adds	r0, #1
 8004ccc:	d0e6      	beq.n	8004c9c <_printf_common+0xa4>
 8004cce:	3601      	adds	r6, #1
 8004cd0:	e7d9      	b.n	8004c86 <_printf_common+0x8e>
	...

08004cd4 <_printf_i>:
 8004cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd8:	7e0f      	ldrb	r7, [r1, #24]
 8004cda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004cdc:	2f78      	cmp	r7, #120	@ 0x78
 8004cde:	4691      	mov	r9, r2
 8004ce0:	4680      	mov	r8, r0
 8004ce2:	460c      	mov	r4, r1
 8004ce4:	469a      	mov	sl, r3
 8004ce6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004cea:	d807      	bhi.n	8004cfc <_printf_i+0x28>
 8004cec:	2f62      	cmp	r7, #98	@ 0x62
 8004cee:	d80a      	bhi.n	8004d06 <_printf_i+0x32>
 8004cf0:	2f00      	cmp	r7, #0
 8004cf2:	f000 80d2 	beq.w	8004e9a <_printf_i+0x1c6>
 8004cf6:	2f58      	cmp	r7, #88	@ 0x58
 8004cf8:	f000 80b9 	beq.w	8004e6e <_printf_i+0x19a>
 8004cfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d04:	e03a      	b.n	8004d7c <_printf_i+0xa8>
 8004d06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d0a:	2b15      	cmp	r3, #21
 8004d0c:	d8f6      	bhi.n	8004cfc <_printf_i+0x28>
 8004d0e:	a101      	add	r1, pc, #4	@ (adr r1, 8004d14 <_printf_i+0x40>)
 8004d10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d14:	08004d6d 	.word	0x08004d6d
 8004d18:	08004d81 	.word	0x08004d81
 8004d1c:	08004cfd 	.word	0x08004cfd
 8004d20:	08004cfd 	.word	0x08004cfd
 8004d24:	08004cfd 	.word	0x08004cfd
 8004d28:	08004cfd 	.word	0x08004cfd
 8004d2c:	08004d81 	.word	0x08004d81
 8004d30:	08004cfd 	.word	0x08004cfd
 8004d34:	08004cfd 	.word	0x08004cfd
 8004d38:	08004cfd 	.word	0x08004cfd
 8004d3c:	08004cfd 	.word	0x08004cfd
 8004d40:	08004e81 	.word	0x08004e81
 8004d44:	08004dab 	.word	0x08004dab
 8004d48:	08004e3b 	.word	0x08004e3b
 8004d4c:	08004cfd 	.word	0x08004cfd
 8004d50:	08004cfd 	.word	0x08004cfd
 8004d54:	08004ea3 	.word	0x08004ea3
 8004d58:	08004cfd 	.word	0x08004cfd
 8004d5c:	08004dab 	.word	0x08004dab
 8004d60:	08004cfd 	.word	0x08004cfd
 8004d64:	08004cfd 	.word	0x08004cfd
 8004d68:	08004e43 	.word	0x08004e43
 8004d6c:	6833      	ldr	r3, [r6, #0]
 8004d6e:	1d1a      	adds	r2, r3, #4
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6032      	str	r2, [r6, #0]
 8004d74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e09d      	b.n	8004ebc <_printf_i+0x1e8>
 8004d80:	6833      	ldr	r3, [r6, #0]
 8004d82:	6820      	ldr	r0, [r4, #0]
 8004d84:	1d19      	adds	r1, r3, #4
 8004d86:	6031      	str	r1, [r6, #0]
 8004d88:	0606      	lsls	r6, r0, #24
 8004d8a:	d501      	bpl.n	8004d90 <_printf_i+0xbc>
 8004d8c:	681d      	ldr	r5, [r3, #0]
 8004d8e:	e003      	b.n	8004d98 <_printf_i+0xc4>
 8004d90:	0645      	lsls	r5, r0, #25
 8004d92:	d5fb      	bpl.n	8004d8c <_printf_i+0xb8>
 8004d94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d98:	2d00      	cmp	r5, #0
 8004d9a:	da03      	bge.n	8004da4 <_printf_i+0xd0>
 8004d9c:	232d      	movs	r3, #45	@ 0x2d
 8004d9e:	426d      	negs	r5, r5
 8004da0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004da4:	4859      	ldr	r0, [pc, #356]	@ (8004f0c <_printf_i+0x238>)
 8004da6:	230a      	movs	r3, #10
 8004da8:	e011      	b.n	8004dce <_printf_i+0xfa>
 8004daa:	6821      	ldr	r1, [r4, #0]
 8004dac:	6833      	ldr	r3, [r6, #0]
 8004dae:	0608      	lsls	r0, r1, #24
 8004db0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004db4:	d402      	bmi.n	8004dbc <_printf_i+0xe8>
 8004db6:	0649      	lsls	r1, r1, #25
 8004db8:	bf48      	it	mi
 8004dba:	b2ad      	uxthmi	r5, r5
 8004dbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004dbe:	4853      	ldr	r0, [pc, #332]	@ (8004f0c <_printf_i+0x238>)
 8004dc0:	6033      	str	r3, [r6, #0]
 8004dc2:	bf14      	ite	ne
 8004dc4:	230a      	movne	r3, #10
 8004dc6:	2308      	moveq	r3, #8
 8004dc8:	2100      	movs	r1, #0
 8004dca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004dce:	6866      	ldr	r6, [r4, #4]
 8004dd0:	60a6      	str	r6, [r4, #8]
 8004dd2:	2e00      	cmp	r6, #0
 8004dd4:	bfa2      	ittt	ge
 8004dd6:	6821      	ldrge	r1, [r4, #0]
 8004dd8:	f021 0104 	bicge.w	r1, r1, #4
 8004ddc:	6021      	strge	r1, [r4, #0]
 8004dde:	b90d      	cbnz	r5, 8004de4 <_printf_i+0x110>
 8004de0:	2e00      	cmp	r6, #0
 8004de2:	d04b      	beq.n	8004e7c <_printf_i+0x1a8>
 8004de4:	4616      	mov	r6, r2
 8004de6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004dea:	fb03 5711 	mls	r7, r3, r1, r5
 8004dee:	5dc7      	ldrb	r7, [r0, r7]
 8004df0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004df4:	462f      	mov	r7, r5
 8004df6:	42bb      	cmp	r3, r7
 8004df8:	460d      	mov	r5, r1
 8004dfa:	d9f4      	bls.n	8004de6 <_printf_i+0x112>
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d10b      	bne.n	8004e18 <_printf_i+0x144>
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	07df      	lsls	r7, r3, #31
 8004e04:	d508      	bpl.n	8004e18 <_printf_i+0x144>
 8004e06:	6923      	ldr	r3, [r4, #16]
 8004e08:	6861      	ldr	r1, [r4, #4]
 8004e0a:	4299      	cmp	r1, r3
 8004e0c:	bfde      	ittt	le
 8004e0e:	2330      	movle	r3, #48	@ 0x30
 8004e10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e14:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e18:	1b92      	subs	r2, r2, r6
 8004e1a:	6122      	str	r2, [r4, #16]
 8004e1c:	f8cd a000 	str.w	sl, [sp]
 8004e20:	464b      	mov	r3, r9
 8004e22:	aa03      	add	r2, sp, #12
 8004e24:	4621      	mov	r1, r4
 8004e26:	4640      	mov	r0, r8
 8004e28:	f7ff fee6 	bl	8004bf8 <_printf_common>
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	d14a      	bne.n	8004ec6 <_printf_i+0x1f2>
 8004e30:	f04f 30ff 	mov.w	r0, #4294967295
 8004e34:	b004      	add	sp, #16
 8004e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	f043 0320 	orr.w	r3, r3, #32
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	4833      	ldr	r0, [pc, #204]	@ (8004f10 <_printf_i+0x23c>)
 8004e44:	2778      	movs	r7, #120	@ 0x78
 8004e46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	6831      	ldr	r1, [r6, #0]
 8004e4e:	061f      	lsls	r7, r3, #24
 8004e50:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e54:	d402      	bmi.n	8004e5c <_printf_i+0x188>
 8004e56:	065f      	lsls	r7, r3, #25
 8004e58:	bf48      	it	mi
 8004e5a:	b2ad      	uxthmi	r5, r5
 8004e5c:	6031      	str	r1, [r6, #0]
 8004e5e:	07d9      	lsls	r1, r3, #31
 8004e60:	bf44      	itt	mi
 8004e62:	f043 0320 	orrmi.w	r3, r3, #32
 8004e66:	6023      	strmi	r3, [r4, #0]
 8004e68:	b11d      	cbz	r5, 8004e72 <_printf_i+0x19e>
 8004e6a:	2310      	movs	r3, #16
 8004e6c:	e7ac      	b.n	8004dc8 <_printf_i+0xf4>
 8004e6e:	4827      	ldr	r0, [pc, #156]	@ (8004f0c <_printf_i+0x238>)
 8004e70:	e7e9      	b.n	8004e46 <_printf_i+0x172>
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	f023 0320 	bic.w	r3, r3, #32
 8004e78:	6023      	str	r3, [r4, #0]
 8004e7a:	e7f6      	b.n	8004e6a <_printf_i+0x196>
 8004e7c:	4616      	mov	r6, r2
 8004e7e:	e7bd      	b.n	8004dfc <_printf_i+0x128>
 8004e80:	6833      	ldr	r3, [r6, #0]
 8004e82:	6825      	ldr	r5, [r4, #0]
 8004e84:	6961      	ldr	r1, [r4, #20]
 8004e86:	1d18      	adds	r0, r3, #4
 8004e88:	6030      	str	r0, [r6, #0]
 8004e8a:	062e      	lsls	r6, r5, #24
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	d501      	bpl.n	8004e94 <_printf_i+0x1c0>
 8004e90:	6019      	str	r1, [r3, #0]
 8004e92:	e002      	b.n	8004e9a <_printf_i+0x1c6>
 8004e94:	0668      	lsls	r0, r5, #25
 8004e96:	d5fb      	bpl.n	8004e90 <_printf_i+0x1bc>
 8004e98:	8019      	strh	r1, [r3, #0]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	6123      	str	r3, [r4, #16]
 8004e9e:	4616      	mov	r6, r2
 8004ea0:	e7bc      	b.n	8004e1c <_printf_i+0x148>
 8004ea2:	6833      	ldr	r3, [r6, #0]
 8004ea4:	1d1a      	adds	r2, r3, #4
 8004ea6:	6032      	str	r2, [r6, #0]
 8004ea8:	681e      	ldr	r6, [r3, #0]
 8004eaa:	6862      	ldr	r2, [r4, #4]
 8004eac:	2100      	movs	r1, #0
 8004eae:	4630      	mov	r0, r6
 8004eb0:	f7fb f9b6 	bl	8000220 <memchr>
 8004eb4:	b108      	cbz	r0, 8004eba <_printf_i+0x1e6>
 8004eb6:	1b80      	subs	r0, r0, r6
 8004eb8:	6060      	str	r0, [r4, #4]
 8004eba:	6863      	ldr	r3, [r4, #4]
 8004ebc:	6123      	str	r3, [r4, #16]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ec4:	e7aa      	b.n	8004e1c <_printf_i+0x148>
 8004ec6:	6923      	ldr	r3, [r4, #16]
 8004ec8:	4632      	mov	r2, r6
 8004eca:	4649      	mov	r1, r9
 8004ecc:	4640      	mov	r0, r8
 8004ece:	47d0      	blx	sl
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	d0ad      	beq.n	8004e30 <_printf_i+0x15c>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	079b      	lsls	r3, r3, #30
 8004ed8:	d413      	bmi.n	8004f02 <_printf_i+0x22e>
 8004eda:	68e0      	ldr	r0, [r4, #12]
 8004edc:	9b03      	ldr	r3, [sp, #12]
 8004ede:	4298      	cmp	r0, r3
 8004ee0:	bfb8      	it	lt
 8004ee2:	4618      	movlt	r0, r3
 8004ee4:	e7a6      	b.n	8004e34 <_printf_i+0x160>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	4632      	mov	r2, r6
 8004eea:	4649      	mov	r1, r9
 8004eec:	4640      	mov	r0, r8
 8004eee:	47d0      	blx	sl
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d09d      	beq.n	8004e30 <_printf_i+0x15c>
 8004ef4:	3501      	adds	r5, #1
 8004ef6:	68e3      	ldr	r3, [r4, #12]
 8004ef8:	9903      	ldr	r1, [sp, #12]
 8004efa:	1a5b      	subs	r3, r3, r1
 8004efc:	42ab      	cmp	r3, r5
 8004efe:	dcf2      	bgt.n	8004ee6 <_printf_i+0x212>
 8004f00:	e7eb      	b.n	8004eda <_printf_i+0x206>
 8004f02:	2500      	movs	r5, #0
 8004f04:	f104 0619 	add.w	r6, r4, #25
 8004f08:	e7f5      	b.n	8004ef6 <_printf_i+0x222>
 8004f0a:	bf00      	nop
 8004f0c:	08005065 	.word	0x08005065
 8004f10:	08005076 	.word	0x08005076

08004f14 <memmove>:
 8004f14:	4288      	cmp	r0, r1
 8004f16:	b510      	push	{r4, lr}
 8004f18:	eb01 0402 	add.w	r4, r1, r2
 8004f1c:	d902      	bls.n	8004f24 <memmove+0x10>
 8004f1e:	4284      	cmp	r4, r0
 8004f20:	4623      	mov	r3, r4
 8004f22:	d807      	bhi.n	8004f34 <memmove+0x20>
 8004f24:	1e43      	subs	r3, r0, #1
 8004f26:	42a1      	cmp	r1, r4
 8004f28:	d008      	beq.n	8004f3c <memmove+0x28>
 8004f2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f32:	e7f8      	b.n	8004f26 <memmove+0x12>
 8004f34:	4402      	add	r2, r0
 8004f36:	4601      	mov	r1, r0
 8004f38:	428a      	cmp	r2, r1
 8004f3a:	d100      	bne.n	8004f3e <memmove+0x2a>
 8004f3c:	bd10      	pop	{r4, pc}
 8004f3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f46:	e7f7      	b.n	8004f38 <memmove+0x24>

08004f48 <_sbrk_r>:
 8004f48:	b538      	push	{r3, r4, r5, lr}
 8004f4a:	4d06      	ldr	r5, [pc, #24]	@ (8004f64 <_sbrk_r+0x1c>)
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	4604      	mov	r4, r0
 8004f50:	4608      	mov	r0, r1
 8004f52:	602b      	str	r3, [r5, #0]
 8004f54:	f7fc f9f0 	bl	8001338 <_sbrk>
 8004f58:	1c43      	adds	r3, r0, #1
 8004f5a:	d102      	bne.n	8004f62 <_sbrk_r+0x1a>
 8004f5c:	682b      	ldr	r3, [r5, #0]
 8004f5e:	b103      	cbz	r3, 8004f62 <_sbrk_r+0x1a>
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	bd38      	pop	{r3, r4, r5, pc}
 8004f64:	20000428 	.word	0x20000428

08004f68 <memcpy>:
 8004f68:	440a      	add	r2, r1
 8004f6a:	4291      	cmp	r1, r2
 8004f6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f70:	d100      	bne.n	8004f74 <memcpy+0xc>
 8004f72:	4770      	bx	lr
 8004f74:	b510      	push	{r4, lr}
 8004f76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f7e:	4291      	cmp	r1, r2
 8004f80:	d1f9      	bne.n	8004f76 <memcpy+0xe>
 8004f82:	bd10      	pop	{r4, pc}

08004f84 <_realloc_r>:
 8004f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f88:	4680      	mov	r8, r0
 8004f8a:	4615      	mov	r5, r2
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	b921      	cbnz	r1, 8004f9a <_realloc_r+0x16>
 8004f90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f94:	4611      	mov	r1, r2
 8004f96:	f7ff bc4b 	b.w	8004830 <_malloc_r>
 8004f9a:	b92a      	cbnz	r2, 8004fa8 <_realloc_r+0x24>
 8004f9c:	f7ff fbdc 	bl	8004758 <_free_r>
 8004fa0:	2400      	movs	r4, #0
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fa8:	f000 f81a 	bl	8004fe0 <_malloc_usable_size_r>
 8004fac:	4285      	cmp	r5, r0
 8004fae:	4606      	mov	r6, r0
 8004fb0:	d802      	bhi.n	8004fb8 <_realloc_r+0x34>
 8004fb2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004fb6:	d8f4      	bhi.n	8004fa2 <_realloc_r+0x1e>
 8004fb8:	4629      	mov	r1, r5
 8004fba:	4640      	mov	r0, r8
 8004fbc:	f7ff fc38 	bl	8004830 <_malloc_r>
 8004fc0:	4607      	mov	r7, r0
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	d0ec      	beq.n	8004fa0 <_realloc_r+0x1c>
 8004fc6:	42b5      	cmp	r5, r6
 8004fc8:	462a      	mov	r2, r5
 8004fca:	4621      	mov	r1, r4
 8004fcc:	bf28      	it	cs
 8004fce:	4632      	movcs	r2, r6
 8004fd0:	f7ff ffca 	bl	8004f68 <memcpy>
 8004fd4:	4621      	mov	r1, r4
 8004fd6:	4640      	mov	r0, r8
 8004fd8:	f7ff fbbe 	bl	8004758 <_free_r>
 8004fdc:	463c      	mov	r4, r7
 8004fde:	e7e0      	b.n	8004fa2 <_realloc_r+0x1e>

08004fe0 <_malloc_usable_size_r>:
 8004fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fe4:	1f18      	subs	r0, r3, #4
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	bfbc      	itt	lt
 8004fea:	580b      	ldrlt	r3, [r1, r0]
 8004fec:	18c0      	addlt	r0, r0, r3
 8004fee:	4770      	bx	lr

08004ff0 <_init>:
 8004ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff2:	bf00      	nop
 8004ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ff6:	bc08      	pop	{r3}
 8004ff8:	469e      	mov	lr, r3
 8004ffa:	4770      	bx	lr

08004ffc <_fini>:
 8004ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffe:	bf00      	nop
 8005000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005002:	bc08      	pop	{r3}
 8005004:	469e      	mov	lr, r3
 8005006:	4770      	bx	lr
