
446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fd0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080051a0  080051a0  000061a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005224  08005224  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005224  08005224  00006224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800522c  0800522c  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800522c  0800522c  0000622c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005230  08005230  00006230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005234  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  20000060  08005294  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08005294  00007418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001070b  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025f9  00000000  00000000  0001779b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00019d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc5  00000000  00000000  0001acb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000024f6  00000000  00000000  0001b875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122f2  00000000  00000000  0001dd6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3eb2  00000000  00000000  0003005d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103f0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044a4  00000000  00000000  00103f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001083f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005188 	.word	0x08005188

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005188 	.word	0x08005188

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b08a      	sub	sp, #40	@ 0x28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
 80005bc:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80005be:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80005c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	lcd.en_pin = en_pin;
 80005c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80005ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
	lcd.en_port = en_port;
 80005cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80005ce:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80005d0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80005d2:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f80e 	bl	8000606 <Lcd_init>

	return lcd;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	461d      	mov	r5, r3
 80005ee:	f107 0410 	add.w	r4, r7, #16
 80005f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005fa:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80005fe:	68f8      	ldr	r0, [r7, #12]
 8000600:	3728      	adds	r7, #40	@ 0x28
 8000602:	46bd      	mov	sp, r7
 8000604:	bdb0      	pop	{r4, r5, r7, pc}

08000606 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	7d9b      	ldrb	r3, [r3, #22]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d10c      	bne.n	8000630 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000616:	2133      	movs	r1, #51	@ 0x33
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f000 f848 	bl	80006ae <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 800061e:	2132      	movs	r1, #50	@ 0x32
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f000 f844 	bl	80006ae <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000626:	2128      	movs	r1, #40	@ 0x28
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f000 f840 	bl	80006ae <lcd_write_command>
 800062e:	e003      	b.n	8000638 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000630:	2138      	movs	r1, #56	@ 0x38
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f000 f83b 	bl	80006ae <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000638:	2101      	movs	r1, #1
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f000 f837 	bl	80006ae <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000640:	210c      	movs	r1, #12
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 f833 	bl	80006ae <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000648:	2106      	movs	r1, #6
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f000 f82f 	bl	80006ae <lcd_write_command>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000662:	2300      	movs	r3, #0
 8000664:	73fb      	strb	r3, [r7, #15]
 8000666:	e00a      	b.n	800067e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f000 f849 	bl	800070a <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	3301      	adds	r3, #1
 800067c:	73fb      	strb	r3, [r7, #15]
 800067e:	7bfc      	ldrb	r4, [r7, #15]
 8000680:	6838      	ldr	r0, [r7, #0]
 8000682:	f7ff fdc5 	bl	8000210 <strlen>
 8000686:	4603      	mov	r3, r0
 8000688:	429c      	cmp	r4, r3
 800068a:	d3ed      	bcc.n	8000668 <Lcd_string+0x10>
	}
}
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	bd90      	pop	{r4, r7, pc}

08000696 <Lcd_clear>:
}

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 800069e:	2101      	movs	r1, #1
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 f804 	bl	80006ae <lcd_write_command>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
 80006b6:	460b      	mov	r3, r1
 80006b8:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6898      	ldr	r0, [r3, #8]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	899b      	ldrh	r3, [r3, #12]
 80006c2:	2200      	movs	r2, #0
 80006c4:	4619      	mov	r1, r3
 80006c6:	f002 facb 	bl	8002c60 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	7d9b      	ldrb	r3, [r3, #22]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d111      	bne.n	80006f6 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80006d2:	78fb      	ldrb	r3, [r7, #3]
 80006d4:	091b      	lsrs	r3, r3, #4
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	2204      	movs	r2, #4
 80006da:	4619      	mov	r1, r3
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f000 f842 	bl	8000766 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	f003 030f 	and.w	r3, r3, #15
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2204      	movs	r2, #4
 80006ec:	4619      	mov	r1, r3
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f000 f839 	bl	8000766 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80006f4:	e005      	b.n	8000702 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80006f6:	78fb      	ldrb	r3, [r7, #3]
 80006f8:	2208      	movs	r2, #8
 80006fa:	4619      	mov	r1, r3
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f000 f832 	bl	8000766 <lcd_write>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
 8000712:	460b      	mov	r3, r1
 8000714:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6898      	ldr	r0, [r3, #8]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	899b      	ldrh	r3, [r3, #12]
 800071e:	2201      	movs	r2, #1
 8000720:	4619      	mov	r1, r3
 8000722:	f002 fa9d 	bl	8002c60 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	7d9b      	ldrb	r3, [r3, #22]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d111      	bne.n	8000752 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	091b      	lsrs	r3, r3, #4
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2204      	movs	r2, #4
 8000736:	4619      	mov	r1, r3
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f000 f814 	bl	8000766 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800073e:	78fb      	ldrb	r3, [r7, #3]
 8000740:	f003 030f 	and.w	r3, r3, #15
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2204      	movs	r2, #4
 8000748:	4619      	mov	r1, r3
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f000 f80b 	bl	8000766 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000750:	e005      	b.n	800075e <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000752:	78fb      	ldrb	r3, [r7, #3]
 8000754:	2208      	movs	r2, #8
 8000756:	4619      	mov	r1, r3
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f000 f804 	bl	8000766 <lcd_write>
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b084      	sub	sp, #16
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
 800076e:	460b      	mov	r3, r1
 8000770:	70fb      	strb	r3, [r7, #3]
 8000772:	4613      	mov	r3, r2
 8000774:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000776:	2300      	movs	r3, #0
 8000778:	73fb      	strb	r3, [r7, #15]
 800077a:	e019      	b.n	80007b0 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	6818      	ldr	r0, [r3, #0]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685a      	ldr	r2, [r3, #4]
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	4413      	add	r3, r2
 8000792:	8819      	ldrh	r1, [r3, #0]
 8000794:	78fa      	ldrb	r2, [r7, #3]
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	fa42 f303 	asr.w	r3, r2, r3
 800079c:	b2db      	uxtb	r3, r3
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	461a      	mov	r2, r3
 80007a6:	f002 fa5b 	bl	8002c60 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	3301      	adds	r3, #1
 80007ae:	73fb      	strb	r3, [r7, #15]
 80007b0:	7bfa      	ldrb	r2, [r7, #15]
 80007b2:	78bb      	ldrb	r3, [r7, #2]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d3e1      	bcc.n	800077c <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6918      	ldr	r0, [r3, #16]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	8a9b      	ldrh	r3, [r3, #20]
 80007c0:	2201      	movs	r2, #1
 80007c2:	4619      	mov	r1, r3
 80007c4:	f002 fa4c 	bl	8002c60 <HAL_GPIO_WritePin>
	//DelayTime(1);
	HAL_Delay(1);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f000 fe93 	bl	80014f4 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6918      	ldr	r0, [r3, #16]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	8a9b      	ldrh	r3, [r3, #20]
 80007d6:	2200      	movs	r2, #0
 80007d8:	4619      	mov	r1, r3
 80007da:	f002 fa41 	bl	8002c60 <HAL_GPIO_WritePin>
}
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b5b0      	push	{r4, r5, r7, lr}
 80007ea:	b090      	sub	sp, #64	@ 0x40
 80007ec:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f000 fe0f 	bl	8001410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f883 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f6:	f000 fa81 	bl	8000cfc <MX_GPIO_Init>
  MX_DMA_Init();
 80007fa:	f000 fa5f 	bl	8000cbc <MX_DMA_Init>
  MX_TIM14_Init();
 80007fe:	f000 fa0f 	bl	8000c20 <MX_TIM14_Init>
  MX_TIM11_Init();
 8000802:	f000 f9e9 	bl	8000bd8 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8000806:	f000 fa2f 	bl	8000c68 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 800080a:	f000 f9af 	bl	8000b6c <MX_TIM7_Init>
  MX_CAN2_Init();
 800080e:	f000 f941 	bl	8000a94 <MX_CAN2_Init>
  MX_CAN1_Init();
 8000812:	f000 f8e5 	bl	80009e0 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  // timer is started
  HAL_TIM_Base_Start_IT(&htim14); // starts the timer interrupt
 8000816:	482d      	ldr	r0, [pc, #180]	@ (80008cc <main+0xe4>)
 8000818:	f003 f946 	bl	8003aa8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800081c:	482c      	ldr	r0, [pc, #176]	@ (80008d0 <main+0xe8>)
 800081e:	f003 f943 	bl	8003aa8 <HAL_TIM_Base_Start_IT>


//
  Lcd_PortType ports[] = {
 8000822:	4b2c      	ldr	r3, [pc, #176]	@ (80008d4 <main+0xec>)
 8000824:	f107 0420 	add.w	r4, r7, #32
 8000828:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800082a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port
  };

  Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 800082e:	4a2a      	ldr	r2, [pc, #168]	@ (80008d8 <main+0xf0>)
 8000830:	f107 0318 	add.w	r3, r7, #24
 8000834:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000838:	e883 0003 	stmia.w	r3, {r0, r1}

 lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 800083c:	4c27      	ldr	r4, [pc, #156]	@ (80008dc <main+0xf4>)
 800083e:	4638      	mov	r0, r7
 8000840:	f107 0218 	add.w	r2, r7, #24
 8000844:	f107 0120 	add.w	r1, r7, #32
 8000848:	2300      	movs	r3, #0
 800084a:	9303      	str	r3, [sp, #12]
 800084c:	2308      	movs	r3, #8
 800084e:	9302      	str	r3, [sp, #8]
 8000850:	4b23      	ldr	r3, [pc, #140]	@ (80008e0 <main+0xf8>)
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	4b21      	ldr	r3, [pc, #132]	@ (80008e0 <main+0xf8>)
 800085c:	f7ff fea8 	bl	80005b0 <Lcd_create>
 8000860:	4625      	mov	r5, r4
 8000862:	463c      	mov	r4, r7
 8000864:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000866:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000868:	e894 0003 	ldmia.w	r4, {r0, r1}
 800086c:	e885 0003 	stmia.w	r5, {r0, r1}
 Lcd_clear(&lcd);
 8000870:	481a      	ldr	r0, [pc, #104]	@ (80008dc <main+0xf4>)
 8000872:	f7ff ff10 	bl	8000696 <Lcd_clear>


  while (1)
  {

	 if (rxflag){
 8000876:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <main+0xfc>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d021      	beq.n	80008c2 <main+0xda>

		 	// volt = RxData[5];

		 	    	 sprintf(lcdbuffer, "RPM: %d",batt_volt);
 800087e:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <main+0x100>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	461a      	mov	r2, r3
 8000884:	4919      	ldr	r1, [pc, #100]	@ (80008ec <main+0x104>)
 8000886:	481a      	ldr	r0, [pc, #104]	@ (80008f0 <main+0x108>)
 8000888:	f003 ffde 	bl	8004848 <siprintf>
		 	  		//Lcd_string(&lcd, lcdbuffer);
		 	    	  // transfers 16 bytes of data from the buffer onto ALL of the GPIO Output pins B
		 	    	  HAL_DMA_Start(&hdma_tim7_up, (uint32_t)lcdbuffer, (uint32_t)&GPIOB->ODR, 16); // user -> BSRR to toggle specific pins
 800088c:	4918      	ldr	r1, [pc, #96]	@ (80008f0 <main+0x108>)
 800088e:	2310      	movs	r3, #16
 8000890:	4a18      	ldr	r2, [pc, #96]	@ (80008f4 <main+0x10c>)
 8000892:	4819      	ldr	r0, [pc, #100]	@ (80008f8 <main+0x110>)
 8000894:	f001 fdaa 	bl	80023ec <HAL_DMA_Start>
		 	    	__HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);  // Enable DMA for TIM7 update event
 8000898:	4b0d      	ldr	r3, [pc, #52]	@ (80008d0 <main+0xe8>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	68da      	ldr	r2, [r3, #12]
 800089e:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <main+0xe8>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80008a6:	60da      	str	r2, [r3, #12]
		 	    	  HAL_TIM_Base_Start(&htim7);
 80008a8:	4809      	ldr	r0, [pc, #36]	@ (80008d0 <main+0xe8>)
 80008aa:	f003 f895 	bl	80039d8 <HAL_TIM_Base_Start>
		 	    	 Lcd_clear(&lcd);
 80008ae:	480b      	ldr	r0, [pc, #44]	@ (80008dc <main+0xf4>)
 80008b0:	f7ff fef1 	bl	8000696 <Lcd_clear>
		 	    	Lcd_string(&lcd, lcdbuffer);
 80008b4:	490e      	ldr	r1, [pc, #56]	@ (80008f0 <main+0x108>)
 80008b6:	4809      	ldr	r0, [pc, #36]	@ (80008dc <main+0xf4>)
 80008b8:	f7ff fece 	bl	8000658 <Lcd_string>

		 	    	  rxflag = 0;
 80008bc:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <main+0xfc>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
	 }
	 HAL_Delay(100);
 80008c2:	2064      	movs	r0, #100	@ 0x64
 80008c4:	f000 fe16 	bl	80014f4 <HAL_Delay>
	 if (rxflag){
 80008c8:	e7d5      	b.n	8000876 <main+0x8e>
 80008ca:	bf00      	nop
 80008cc:	2000015c 	.word	0x2000015c
 80008d0:	200000cc 	.word	0x200000cc
 80008d4:	080051a8 	.word	0x080051a8
 80008d8:	080051b8 	.word	0x080051b8
 80008dc:	20000288 	.word	0x20000288
 80008e0:	40020400 	.word	0x40020400
 80008e4:	200002c0 	.word	0x200002c0
 80008e8:	20000000 	.word	0x20000000
 80008ec:	080051a0 	.word	0x080051a0
 80008f0:	200002a0 	.word	0x200002a0
 80008f4:	40020414 	.word	0x40020414
 80008f8:	200001a4 	.word	0x200001a4

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b094      	sub	sp, #80	@ 0x50
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	2234      	movs	r2, #52	@ 0x34
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f003 ffbc 	bl	8004888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	f107 0308 	add.w	r3, r7, #8
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	4b2c      	ldr	r3, [pc, #176]	@ (80009d8 <SystemClock_Config+0xdc>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000928:	4a2b      	ldr	r2, [pc, #172]	@ (80009d8 <SystemClock_Config+0xdc>)
 800092a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000930:	4b29      	ldr	r3, [pc, #164]	@ (80009d8 <SystemClock_Config+0xdc>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800093c:	2300      	movs	r3, #0
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	4b26      	ldr	r3, [pc, #152]	@ (80009dc <SystemClock_Config+0xe0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a25      	ldr	r2, [pc, #148]	@ (80009dc <SystemClock_Config+0xe0>)
 8000946:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	4b23      	ldr	r3, [pc, #140]	@ (80009dc <SystemClock_Config+0xe0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000958:	2302      	movs	r3, #2
 800095a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095c:	2301      	movs	r3, #1
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000960:	2310      	movs	r3, #16
 8000962:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000964:	2302      	movs	r3, #2
 8000966:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000968:	2300      	movs	r3, #0
 800096a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800096c:	2308      	movs	r3, #8
 800096e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000970:	23b4      	movs	r3, #180	@ 0xb4
 8000972:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000974:	2302      	movs	r3, #2
 8000976:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000978:	2302      	movs	r3, #2
 800097a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800097c:	2302      	movs	r3, #2
 800097e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4618      	mov	r0, r3
 8000986:	f002 fd39 	bl	80033fc <HAL_RCC_OscConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000990:	f000 fab0 	bl	8000ef4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000994:	f002 f998 	bl	8002cc8 <HAL_PWREx_EnableOverDrive>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800099e:	f000 faa9 	bl	8000ef4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a2:	230f      	movs	r3, #15
 80009a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a6:	2302      	movs	r3, #2
 80009a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80009b4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	2105      	movs	r1, #5
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 f9d1 	bl	8002d68 <HAL_RCC_ClockConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80009cc:	f000 fa92 	bl	8000ef4 <Error_Handler>
  }
}
 80009d0:	bf00      	nop
 80009d2:	3750      	adds	r7, #80	@ 0x50
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40007000 	.word	0x40007000

080009e0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	@ 0x28
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009e6:	4b29      	ldr	r3, [pc, #164]	@ (8000a8c <MX_CAN1_Init+0xac>)
 80009e8:	4a29      	ldr	r2, [pc, #164]	@ (8000a90 <MX_CAN1_Init+0xb0>)
 80009ea:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80009ec:	4b27      	ldr	r3, [pc, #156]	@ (8000a8c <MX_CAN1_Init+0xac>)
 80009ee:	2209      	movs	r2, #9
 80009f0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009f2:	4b26      	ldr	r3, [pc, #152]	@ (8000a8c <MX_CAN1_Init+0xac>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009f8:	4b24      	ldr	r3, [pc, #144]	@ (8000a8c <MX_CAN1_Init+0xac>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 80009fe:	4b23      	ldr	r3, [pc, #140]	@ (8000a8c <MX_CAN1_Init+0xac>)
 8000a00:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a04:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000a06:	4b21      	ldr	r3, [pc, #132]	@ (8000a8c <MX_CAN1_Init+0xac>)
 8000a08:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000a0c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a8c <MX_CAN1_Init+0xac>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a14:	4b1d      	ldr	r3, [pc, #116]	@ (8000a8c <MX_CAN1_Init+0xac>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <MX_CAN1_Init+0xac>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <MX_CAN1_Init+0xac>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a26:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <MX_CAN1_Init+0xac>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <MX_CAN1_Init+0xac>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a32:	4816      	ldr	r0, [pc, #88]	@ (8000a8c <MX_CAN1_Init+0xac>)
 8000a34:	f000 fd82 	bl	800153c <HAL_CAN_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000a3e:	f000 fa59 	bl	8000ef4 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */

  	  	  	  CAN_FilterTypeDef  canonefilter;


    		  canonefilter.FilterBank = 1; //change to 1 if CAN stops working
 8000a42:	2301      	movs	r3, #1
 8000a44:	617b      	str	r3, [r7, #20]
    		  canonefilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]
    		  canonefilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61fb      	str	r3, [r7, #28]
    		  canonefilter.FilterIdHigh = 0x0000;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
    		  canonefilter.FilterIdLow = 0x0000;
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
    		  canonefilter.FilterMaskIdHigh = 0x0000;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
    		  canonefilter.FilterMaskIdLow = 0x0000;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
    		  canonefilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
    		  canonefilter.FilterActivation = CAN_FILTER_ENABLE;
 8000a62:	2301      	movs	r3, #1
 8000a64:	623b      	str	r3, [r7, #32]
    		  canonefilter.SlaveStartFilterBank = 1; // meaningless in our context
 8000a66:	2301      	movs	r3, #1
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24


    		  	  HAL_CAN_ConfigFilter(&hcan1, &canonefilter);
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4807      	ldr	r0, [pc, #28]	@ (8000a8c <MX_CAN1_Init+0xac>)
 8000a70:	f000 fe60 	bl	8001734 <HAL_CAN_ConfigFilter>
    		  	  HAL_CAN_Start(&hcan1);
 8000a74:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <MX_CAN1_Init+0xac>)
 8000a76:	f000 ff3d 	bl	80018f4 <HAL_CAN_Start>

    		  	  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // potentially not needed
 8000a7a:	2102      	movs	r1, #2
 8000a7c:	4803      	ldr	r0, [pc, #12]	@ (8000a8c <MX_CAN1_Init+0xac>)
 8000a7e:	f001 f89f 	bl	8001bc0 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN1_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	@ 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000007c 	.word	0x2000007c
 8000a90:	40006400 	.word	0x40006400

08000a94 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	@ 0x28
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_Init 1 */



  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000a9a:	4b31      	ldr	r3, [pc, #196]	@ (8000b60 <MX_CAN2_Init+0xcc>)
 8000a9c:	4a31      	ldr	r2, [pc, #196]	@ (8000b64 <MX_CAN2_Init+0xd0>)
 8000a9e:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8000aa0:	4b2f      	ldr	r3, [pc, #188]	@ (8000b60 <MX_CAN2_Init+0xcc>)
 8000aa2:	2209      	movs	r2, #9
 8000aa4:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b60 <MX_CAN2_Init+0xcc>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000aac:	4b2c      	ldr	r3, [pc, #176]	@ (8000b60 <MX_CAN2_Init+0xcc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b60 <MX_CAN2_Init+0xcc>)
 8000ab4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000ab8:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000aba:	4b29      	ldr	r3, [pc, #164]	@ (8000b60 <MX_CAN2_Init+0xcc>)
 8000abc:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000ac0:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000ac2:	4b27      	ldr	r3, [pc, #156]	@ (8000b60 <MX_CAN2_Init+0xcc>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000ac8:	4b25      	ldr	r3, [pc, #148]	@ (8000b60 <MX_CAN2_Init+0xcc>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000ace:	4b24      	ldr	r3, [pc, #144]	@ (8000b60 <MX_CAN2_Init+0xcc>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	@ (8000b60 <MX_CAN2_Init+0xcc>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000ada:	4b21      	ldr	r3, [pc, #132]	@ (8000b60 <MX_CAN2_Init+0xcc>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b60 <MX_CAN2_Init+0xcc>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000ae6:	481e      	ldr	r0, [pc, #120]	@ (8000b60 <MX_CAN2_Init+0xcc>)
 8000ae8:	f000 fd28 	bl	800153c <HAL_CAN_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000af2:	f000 f9ff 	bl	8000ef4 <Error_Handler>
  /* USER CODE BEGIN CAN2_Init 2 */

  CAN_FilterTypeDef  canfilterconfig;


  		  canfilterconfig.FilterBank = 1; //change to 1 if CAN stops working
 8000af6:	2301      	movs	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
  		  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  		  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000afe:	2301      	movs	r3, #1
 8000b00:	61fb      	str	r3, [r7, #28]
  		  canfilterconfig.FilterIdHigh = 0x0000;
 8000b02:	2300      	movs	r3, #0
 8000b04:	603b      	str	r3, [r7, #0]
  		  canfilterconfig.FilterIdLow = 0x0000;
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
  		  canfilterconfig.FilterMaskIdHigh = 0x0000;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
  		  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
  		  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
  		  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000b16:	2301      	movs	r3, #1
 8000b18:	623b      	str	r3, [r7, #32]
  		  canfilterconfig.SlaveStartFilterBank = 14; // meaningless in our context
 8000b1a:	230e      	movs	r3, #14
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24


  		  	  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8000b1e:	463b      	mov	r3, r7
 8000b20:	4619      	mov	r1, r3
 8000b22:	480f      	ldr	r0, [pc, #60]	@ (8000b60 <MX_CAN2_Init+0xcc>)
 8000b24:	f000 fe06 	bl	8001734 <HAL_CAN_ConfigFilter>
  		  	  HAL_CAN_Start(&hcan2);
 8000b28:	480d      	ldr	r0, [pc, #52]	@ (8000b60 <MX_CAN2_Init+0xcc>)
 8000b2a:	f000 fee3 	bl	80018f4 <HAL_CAN_Start>

  		  	  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000b2e:	2102      	movs	r1, #2
 8000b30:	480b      	ldr	r0, [pc, #44]	@ (8000b60 <MX_CAN2_Init+0xcc>)
 8000b32:	f001 f845 	bl	8001bc0 <HAL_CAN_ActivateNotification>



  	  	    TxHeader.StdId = 0x0446;  // ID 2 (to match H7's filter)
 8000b36:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <MX_CAN2_Init+0xd4>)
 8000b38:	f240 4246 	movw	r2, #1094	@ 0x446
 8000b3c:	601a      	str	r2, [r3, #0]
 	        TxHeader.IDE = CAN_ID_STD;  // Standard ID
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <MX_CAN2_Init+0xd4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
 	        TxHeader.RTR = CAN_RTR_DATA;  // Data frame
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <MX_CAN2_Init+0xd4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
 	        TxHeader.DLC = 8;  // Length of data (3 bytes)
 8000b4a:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <MX_CAN2_Init+0xd4>)
 8000b4c:	2208      	movs	r2, #8
 8000b4e:	611a      	str	r2, [r3, #16]
 	        TxHeader.TransmitGlobalTime = DISABLE;
 8000b50:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <MX_CAN2_Init+0xd4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	751a      	strb	r2, [r3, #20]

  /* USER CODE END CAN2_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	@ 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200000a4 	.word	0x200000a4
 8000b64:	40006800 	.word	0x40006800
 8000b68:	2000024c 	.word	0x2000024c

08000b6c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b72:	463b      	mov	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b7a:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <MX_TIM7_Init+0x64>)
 8000b7c:	4a15      	ldr	r2, [pc, #84]	@ (8000bd4 <MX_TIM7_Init+0x68>)
 8000b7e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000 - 1;
 8000b80:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <MX_TIM7_Init+0x64>)
 8000b82:	f242 3227 	movw	r2, #8999	@ 0x2327
 8000b86:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b88:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <MX_TIM7_Init+0x64>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100 - 1;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	@ (8000bd0 <MX_TIM7_Init+0x64>)
 8000b90:	2263      	movs	r2, #99	@ 0x63
 8000b92:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b94:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <MX_TIM7_Init+0x64>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b9a:	480d      	ldr	r0, [pc, #52]	@ (8000bd0 <MX_TIM7_Init+0x64>)
 8000b9c:	f002 fecc 	bl	8003938 <HAL_TIM_Base_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000ba6:	f000 f9a5 	bl	8000ef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000baa:	2320      	movs	r3, #32
 8000bac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4806      	ldr	r0, [pc, #24]	@ (8000bd0 <MX_TIM7_Init+0x64>)
 8000bb8:	f003 f9aa 	bl	8003f10 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000bc2:	f000 f997 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200000cc 	.word	0x200000cc
 8000bd4:	40001400 	.word	0x40001400

08000bd8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <MX_TIM11_Init+0x40>)
 8000bde:	4a0f      	ldr	r2, [pc, #60]	@ (8000c1c <MX_TIM11_Init+0x44>)
 8000be0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 9000 - 1;
 8000be2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c18 <MX_TIM11_Init+0x40>)
 8000be4:	f242 3227 	movw	r2, #8999	@ 0x2327
 8000be8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <MX_TIM11_Init+0x40>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535 - 1;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <MX_TIM11_Init+0x40>)
 8000bf2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000bf6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <MX_TIM11_Init+0x40>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <MX_TIM11_Init+0x40>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	@ (8000c18 <MX_TIM11_Init+0x40>)
 8000c06:	f002 fe97 	bl	8003938 <HAL_TIM_Base_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8000c10:	f000 f970 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000114 	.word	0x20000114
 8000c1c:	40014800 	.word	0x40014800

08000c20 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000c24:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <MX_TIM14_Init+0x40>)
 8000c26:	4a0f      	ldr	r2, [pc, #60]	@ (8000c64 <MX_TIM14_Init+0x44>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 9000 - 1;
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c60 <MX_TIM14_Init+0x40>)
 8000c2c:	f242 3227 	movw	r2, #8999	@ 0x2327
 8000c30:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <MX_TIM14_Init+0x40>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000 - 1;
 8000c38:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <MX_TIM14_Init+0x40>)
 8000c3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c3e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c40:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <MX_TIM14_Init+0x40>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c46:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <MX_TIM14_Init+0x40>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000c4c:	4804      	ldr	r0, [pc, #16]	@ (8000c60 <MX_TIM14_Init+0x40>)
 8000c4e:	f002 fe73 	bl	8003938 <HAL_TIM_Base_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000c58:	f000 f94c 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	2000015c 	.word	0x2000015c
 8000c64:	40002000 	.word	0x40002000

08000c68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	@ (8000cb8 <MX_USART2_UART_Init+0x50>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c72:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c74:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000ca0:	f003 f9c6 	bl	8004030 <HAL_UART_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000caa:	f000 f923 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000204 	.word	0x20000204
 8000cb8:	40004400 	.word	0x40004400

08000cbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <MX_DMA_Init+0x3c>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf8 <MX_DMA_Init+0x3c>)
 8000ccc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <MX_DMA_Init+0x3c>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 1, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	200d      	movs	r0, #13
 8000ce4:	f001 fa9d 	bl	8002222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ce8:	200d      	movs	r0, #13
 8000cea:	f001 fab6 	bl	800225a <HAL_NVIC_EnableIRQ>

}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800

08000cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	@ 0x28
 8000d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b44      	ldr	r3, [pc, #272]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a43      	ldr	r2, [pc, #268]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4b41      	ldr	r3, [pc, #260]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b3d      	ldr	r3, [pc, #244]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a3c      	ldr	r2, [pc, #240]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	4b36      	ldr	r3, [pc, #216]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a35      	ldr	r2, [pc, #212]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b33      	ldr	r3, [pc, #204]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a2e      	ldr	r2, [pc, #184]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b2c      	ldr	r3, [pc, #176]	@ (8000e28 <MX_GPIO_Init+0x12c>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1
 8000d82:	2200      	movs	r2, #0
 8000d84:	f646 116f 	movw	r1, #26991	@ 0x696f
 8000d88:	4828      	ldr	r0, [pc, #160]	@ (8000e2c <MX_GPIO_Init+0x130>)
 8000d8a:	f001 ff69 	bl	8002c60 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f240 7122 	movw	r1, #1826	@ 0x722
 8000d94:	4826      	ldr	r0, [pc, #152]	@ (8000e30 <MX_GPIO_Init+0x134>)
 8000d96:	f001 ff63 	bl	8002c60 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_13
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f24e 713d 	movw	r1, #59197	@ 0xe73d
 8000da0:	4824      	ldr	r0, [pc, #144]	@ (8000e34 <MX_GPIO_Init+0x138>)
 8000da2:	f001 ff5d 	bl	8002c60 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC0 PC1
                           PC2 PC3 PC5 PC6
                           PC8 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1
 8000da6:	f646 136f 	movw	r3, #26991	@ 0x696f
 8000daa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	481b      	ldr	r0, [pc, #108]	@ (8000e2c <MX_GPIO_Init+0x130>)
 8000dc0:	f001 fdba 	bl	8002938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
 8000dc4:	f240 7322 	movw	r3, #1826	@ 0x722
 8000dc8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4814      	ldr	r0, [pc, #80]	@ (8000e30 <MX_GPIO_Init+0x134>)
 8000dde:	f001 fdab 	bl	8002938 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000de2:	2310      	movs	r3, #16
 8000de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000df2:	2305      	movs	r3, #5
 8000df4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <MX_GPIO_Init+0x134>)
 8000dfe:	f001 fd9b 	bl	8002938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB13
                           PB14 PB15 PB3 PB4
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_13
 8000e02:	f24e 733d 	movw	r3, #59197	@ 0xe73d
 8000e06:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4806      	ldr	r0, [pc, #24]	@ (8000e34 <MX_GPIO_Init+0x138>)
 8000e1c:	f001 fd8c 	bl	8002938 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e20:	bf00      	nop
 8000e22:	3728      	adds	r7, #40	@ 0x28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020800 	.word	0x40020800
 8000e30:	40020000 	.word	0x40020000
 8000e34:	40020400 	.word	0x40020400

08000e38 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

	// changed values hcan->Instance = CAN2 and inside get hcan -> &hcan2

	if (hcan->Instance == CAN2) {
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a19      	ldr	r2, [pc, #100]	@ (8000eac <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d12b      	bne.n	8000ea2 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000e4a:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000e4c:	4a19      	ldr	r2, [pc, #100]	@ (8000eb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000e4e:	2100      	movs	r1, #0
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f000 fd93 	bl	800197c <HAL_CAN_GetRxMessage>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
  {

    /* Reception Error */
    Error_Handler();
 8000e5c:	f000 f84a 	bl	8000ef4 <Error_Handler>
  	  }


  //if (RxHeader.StdId == 0x650) {

  	  batt_volt = RxData[5];
 8000e60:	4b13      	ldr	r3, [pc, #76]	@ (8000eb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000e62:	795b      	ldrb	r3, [r3, #5]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000e68:	601a      	str	r2, [r3, #0]

  	  rxflag = 1;
 8000e6a:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	701a      	strb	r2, [r3, #0]
      //uint32_t voltage = RxData[5];
	  	//  char uart_buffer[20];
	    //  unsigned int uart_buffer_size = sprintf(uart_buffer, "StdId: 0x%3X\r\n", (unsigned int) voltage);

  	  if (RxHeader.StdId == 0x623){
 8000e70:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f240 6223 	movw	r2, #1571	@ 0x623
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d112      	bne.n	8000ea2 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
	  char uart_buffer[20];

	   //Format as decimal
	  unsigned int uart_buffer_size = sprintf(uart_buffer, "Voltage: %u\r\n", batt_volt);
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	490e      	ldr	r1, [pc, #56]	@ (8000ec0 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 fcde 	bl	8004848 <siprintf>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	61fb      	str	r3, [r7, #28]


	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, uart_buffer_size, HAL_MAX_DELAY);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	f107 0108 	add.w	r1, r7, #8
 8000e98:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9c:	4809      	ldr	r0, [pc, #36]	@ (8000ec4 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8000e9e:	f003 f917 	bl	80040d0 <HAL_UART_Transmit>

	  // DMA configuration inside our interrupt (Do later)

	}

}
 8000ea2:	bf00      	nop
 8000ea4:	3720      	adds	r7, #32
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40006800 	.word	0x40006800
 8000eb0:	20000280 	.word	0x20000280
 8000eb4:	20000264 	.word	0x20000264
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	200002c0 	.word	0x200002c0
 8000ec0:	080051c0 	.word	0x080051c0
 8000ec4:	20000204 	.word	0x20000204

08000ec8 <HAL_TIM_PeriodElapsedCallback>:


// The function below this is the timer interrupt callback (Code within the specific timers constantly executes)

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
//            }
////        }
////    }
////
////    // set a priority between the interrupts since the time at which they refresh doesn't matter as they will eventually run into each other
    if (htim->Instance == TIM7) {
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a05      	ldr	r2, [pc, #20]	@ (8000eec <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d103      	bne.n	8000ee2 <HAL_TIM_PeriodElapsedCallback+0x1a>
//    	DisplayRxData(oil_temp);

    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000eda:	2120      	movs	r1, #32
 8000edc:	4804      	ldr	r0, [pc, #16]	@ (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ede:	f001 fed8 	bl	8002c92 <HAL_GPIO_TogglePin>

    }
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40001400 	.word	0x40001400
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef8:	b672      	cpsid	i
}
 8000efa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <Error_Handler+0x8>

08000f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f16:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	603b      	str	r3, [r7, #0]
 8000f26:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	4a08      	ldr	r2, [pc, #32]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800

08000f50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	@ 0x30
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a4b      	ldr	r2, [pc, #300]	@ (800109c <HAL_CAN_MspInit+0x14c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d13e      	bne.n	8000ff0 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000f72:	4b4b      	ldr	r3, [pc, #300]	@ (80010a0 <HAL_CAN_MspInit+0x150>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	3301      	adds	r3, #1
 8000f78:	4a49      	ldr	r2, [pc, #292]	@ (80010a0 <HAL_CAN_MspInit+0x150>)
 8000f7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000f7c:	4b48      	ldr	r3, [pc, #288]	@ (80010a0 <HAL_CAN_MspInit+0x150>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d10d      	bne.n	8000fa0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
 8000f88:	4b46      	ldr	r3, [pc, #280]	@ (80010a4 <HAL_CAN_MspInit+0x154>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	4a45      	ldr	r2, [pc, #276]	@ (80010a4 <HAL_CAN_MspInit+0x154>)
 8000f8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f94:	4b43      	ldr	r3, [pc, #268]	@ (80010a4 <HAL_CAN_MspInit+0x154>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f9c:	61bb      	str	r3, [r7, #24]
 8000f9e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	4b3f      	ldr	r3, [pc, #252]	@ (80010a4 <HAL_CAN_MspInit+0x154>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa8:	4a3e      	ldr	r2, [pc, #248]	@ (80010a4 <HAL_CAN_MspInit+0x154>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb0:	4b3c      	ldr	r3, [pc, #240]	@ (80010a4 <HAL_CAN_MspInit+0x154>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fbc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fce:	2309      	movs	r3, #9
 8000fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4833      	ldr	r0, [pc, #204]	@ (80010a8 <HAL_CAN_MspInit+0x158>)
 8000fda:	f001 fcad 	bl	8002938 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	2014      	movs	r0, #20
 8000fe4:	f001 f91d 	bl	8002222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000fe8:	2014      	movs	r0, #20
 8000fea:	f001 f936 	bl	800225a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000fee:	e050      	b.n	8001092 <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a2d      	ldr	r2, [pc, #180]	@ (80010ac <HAL_CAN_MspInit+0x15c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d14b      	bne.n	8001092 <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	4b29      	ldr	r3, [pc, #164]	@ (80010a4 <HAL_CAN_MspInit+0x154>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	4a28      	ldr	r2, [pc, #160]	@ (80010a4 <HAL_CAN_MspInit+0x154>)
 8001004:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001008:	6413      	str	r3, [r2, #64]	@ 0x40
 800100a:	4b26      	ldr	r3, [pc, #152]	@ (80010a4 <HAL_CAN_MspInit+0x154>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001016:	4b22      	ldr	r3, [pc, #136]	@ (80010a0 <HAL_CAN_MspInit+0x150>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	4a20      	ldr	r2, [pc, #128]	@ (80010a0 <HAL_CAN_MspInit+0x150>)
 800101e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001020:	4b1f      	ldr	r3, [pc, #124]	@ (80010a0 <HAL_CAN_MspInit+0x150>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d10d      	bne.n	8001044 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	4b1d      	ldr	r3, [pc, #116]	@ (80010a4 <HAL_CAN_MspInit+0x154>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001030:	4a1c      	ldr	r2, [pc, #112]	@ (80010a4 <HAL_CAN_MspInit+0x154>)
 8001032:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001036:	6413      	str	r3, [r2, #64]	@ 0x40
 8001038:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <HAL_CAN_MspInit+0x154>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	4b16      	ldr	r3, [pc, #88]	@ (80010a4 <HAL_CAN_MspInit+0x154>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104c:	4a15      	ldr	r2, [pc, #84]	@ (80010a4 <HAL_CAN_MspInit+0x154>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	6313      	str	r3, [r2, #48]	@ 0x30
 8001054:	4b13      	ldr	r3, [pc, #76]	@ (80010a4 <HAL_CAN_MspInit+0x154>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8001060:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8001064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001072:	2309      	movs	r3, #9
 8001074:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001076:	f107 031c 	add.w	r3, r7, #28
 800107a:	4619      	mov	r1, r3
 800107c:	480c      	ldr	r0, [pc, #48]	@ (80010b0 <HAL_CAN_MspInit+0x160>)
 800107e:	f001 fc5b 	bl	8002938 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 2, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2102      	movs	r1, #2
 8001086:	2040      	movs	r0, #64	@ 0x40
 8001088:	f001 f8cb 	bl	8002222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800108c:	2040      	movs	r0, #64	@ 0x40
 800108e:	f001 f8e4 	bl	800225a <HAL_NVIC_EnableIRQ>
}
 8001092:	bf00      	nop
 8001094:	3730      	adds	r7, #48	@ 0x30
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40006400 	.word	0x40006400
 80010a0:	200002c4 	.word	0x200002c4
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40006800 	.word	0x40006800
 80010b0:	40020400 	.word	0x40020400

080010b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a3f      	ldr	r2, [pc, #252]	@ (80011c0 <HAL_TIM_Base_MspInit+0x10c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d148      	bne.n	8001158 <HAL_TIM_Base_MspInit+0xa4>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	4b3e      	ldr	r3, [pc, #248]	@ (80011c4 <HAL_TIM_Base_MspInit+0x110>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	4a3d      	ldr	r2, [pc, #244]	@ (80011c4 <HAL_TIM_Base_MspInit+0x110>)
 80010d0:	f043 0320 	orr.w	r3, r3, #32
 80010d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d6:	4b3b      	ldr	r3, [pc, #236]	@ (80011c4 <HAL_TIM_Base_MspInit+0x110>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	f003 0320 	and.w	r3, r3, #32
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697b      	ldr	r3, [r7, #20]

    /* TIM7 DMA Init */
    /* TIM7_UP Init */
    hdma_tim7_up.Instance = DMA1_Stream2;
 80010e2:	4b39      	ldr	r3, [pc, #228]	@ (80011c8 <HAL_TIM_Base_MspInit+0x114>)
 80010e4:	4a39      	ldr	r2, [pc, #228]	@ (80011cc <HAL_TIM_Base_MspInit+0x118>)
 80010e6:	601a      	str	r2, [r3, #0]
    hdma_tim7_up.Init.Channel = DMA_CHANNEL_1;
 80010e8:	4b37      	ldr	r3, [pc, #220]	@ (80011c8 <HAL_TIM_Base_MspInit+0x114>)
 80010ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010ee:	605a      	str	r2, [r3, #4]
    hdma_tim7_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010f0:	4b35      	ldr	r3, [pc, #212]	@ (80011c8 <HAL_TIM_Base_MspInit+0x114>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
    hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f6:	4b34      	ldr	r3, [pc, #208]	@ (80011c8 <HAL_TIM_Base_MspInit+0x114>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
    hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 80010fc:	4b32      	ldr	r3, [pc, #200]	@ (80011c8 <HAL_TIM_Base_MspInit+0x114>)
 80010fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001102:	611a      	str	r2, [r3, #16]
    hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001104:	4b30      	ldr	r3, [pc, #192]	@ (80011c8 <HAL_TIM_Base_MspInit+0x114>)
 8001106:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800110a:	615a      	str	r2, [r3, #20]
    hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800110c:	4b2e      	ldr	r3, [pc, #184]	@ (80011c8 <HAL_TIM_Base_MspInit+0x114>)
 800110e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001112:	619a      	str	r2, [r3, #24]
    hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 8001114:	4b2c      	ldr	r3, [pc, #176]	@ (80011c8 <HAL_TIM_Base_MspInit+0x114>)
 8001116:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800111a:	61da      	str	r2, [r3, #28]
    hdma_tim7_up.Init.Priority = DMA_PRIORITY_HIGH;
 800111c:	4b2a      	ldr	r3, [pc, #168]	@ (80011c8 <HAL_TIM_Base_MspInit+0x114>)
 800111e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001122:	621a      	str	r2, [r3, #32]
    hdma_tim7_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001124:	4b28      	ldr	r3, [pc, #160]	@ (80011c8 <HAL_TIM_Base_MspInit+0x114>)
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim7_up) != HAL_OK)
 800112a:	4827      	ldr	r0, [pc, #156]	@ (80011c8 <HAL_TIM_Base_MspInit+0x114>)
 800112c:	f001 f8b0 	bl	8002290 <HAL_DMA_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8001136:	f7ff fedd 	bl	8000ef4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a22      	ldr	r2, [pc, #136]	@ (80011c8 <HAL_TIM_Base_MspInit+0x114>)
 800113e:	621a      	str	r2, [r3, #32]
 8001140:	4a21      	ldr	r2, [pc, #132]	@ (80011c8 <HAL_TIM_Base_MspInit+0x114>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2101      	movs	r1, #1
 800114a:	2037      	movs	r0, #55	@ 0x37
 800114c:	f001 f869 	bl	8002222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001150:	2037      	movs	r0, #55	@ 0x37
 8001152:	f001 f882 	bl	800225a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001156:	e02e      	b.n	80011b6 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM11)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a1c      	ldr	r2, [pc, #112]	@ (80011d0 <HAL_TIM_Base_MspInit+0x11c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d10e      	bne.n	8001180 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	4b17      	ldr	r3, [pc, #92]	@ (80011c4 <HAL_TIM_Base_MspInit+0x110>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116a:	4a16      	ldr	r2, [pc, #88]	@ (80011c4 <HAL_TIM_Base_MspInit+0x110>)
 800116c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001170:	6453      	str	r3, [r2, #68]	@ 0x44
 8001172:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <HAL_TIM_Base_MspInit+0x110>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001176:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
}
 800117e:	e01a      	b.n	80011b6 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM14)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a13      	ldr	r2, [pc, #76]	@ (80011d4 <HAL_TIM_Base_MspInit+0x120>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d115      	bne.n	80011b6 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <HAL_TIM_Base_MspInit+0x110>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	4a0c      	ldr	r2, [pc, #48]	@ (80011c4 <HAL_TIM_Base_MspInit+0x110>)
 8001194:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001198:	6413      	str	r3, [r2, #64]	@ 0x40
 800119a:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HAL_TIM_Base_MspInit+0x110>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 2, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2102      	movs	r1, #2
 80011aa:	202d      	movs	r0, #45	@ 0x2d
 80011ac:	f001 f839 	bl	8002222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80011b0:	202d      	movs	r0, #45	@ 0x2d
 80011b2:	f001 f852 	bl	800225a <HAL_NVIC_EnableIRQ>
}
 80011b6:	bf00      	nop
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40001400 	.word	0x40001400
 80011c4:	40023800 	.word	0x40023800
 80011c8:	200001a4 	.word	0x200001a4
 80011cc:	40026040 	.word	0x40026040
 80011d0:	40014800 	.word	0x40014800
 80011d4:	40002000 	.word	0x40002000

080011d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	@ 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a19      	ldr	r2, [pc, #100]	@ (800125c <HAL_UART_MspInit+0x84>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d12b      	bne.n	8001252 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <HAL_UART_MspInit+0x88>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	4a17      	ldr	r2, [pc, #92]	@ (8001260 <HAL_UART_MspInit+0x88>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001208:	6413      	str	r3, [r2, #64]	@ 0x40
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <HAL_UART_MspInit+0x88>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <HAL_UART_MspInit+0x88>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	4a10      	ldr	r2, [pc, #64]	@ (8001260 <HAL_UART_MspInit+0x88>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6313      	str	r3, [r2, #48]	@ 0x30
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <HAL_UART_MspInit+0x88>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001232:	230c      	movs	r3, #12
 8001234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001242:	2307      	movs	r3, #7
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	@ (8001264 <HAL_UART_MspInit+0x8c>)
 800124e:	f001 fb73 	bl	8002938 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	@ 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40004400 	.word	0x40004400
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <NMI_Handler+0x4>

08001270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <MemManage_Handler+0x4>

08001280 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <UsageFault_Handler+0x4>

08001290 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012be:	f000 f8f9 	bl	80014b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim7_up);
 80012cc:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <DMA1_Stream2_IRQHandler+0x10>)
 80012ce:	f001 f8c9 	bl	8002464 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200001a4 	.word	0x200001a4

080012dc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <CAN1_RX0_IRQHandler+0x10>)
 80012e2:	f000 fc93 	bl	8001c0c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2000007c 	.word	0x2000007c

080012f0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80012f6:	f002 fc47 	bl	8003b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000015c 	.word	0x2000015c

08001304 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001308:	4802      	ldr	r0, [pc, #8]	@ (8001314 <TIM7_IRQHandler+0x10>)
 800130a:	f002 fc3d 	bl	8003b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200000cc 	.word	0x200000cc

08001318 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800131c:	4802      	ldr	r0, [pc, #8]	@ (8001328 <CAN2_RX0_IRQHandler+0x10>)
 800131e:	f000 fc75 	bl	8001c0c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200000a4 	.word	0x200000a4

0800132c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001334:	4a14      	ldr	r2, [pc, #80]	@ (8001388 <_sbrk+0x5c>)
 8001336:	4b15      	ldr	r3, [pc, #84]	@ (800138c <_sbrk+0x60>)
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001340:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d102      	bne.n	800134e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001348:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <_sbrk+0x64>)
 800134a:	4a12      	ldr	r2, [pc, #72]	@ (8001394 <_sbrk+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	429a      	cmp	r2, r3
 800135a:	d207      	bcs.n	800136c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800135c:	f003 fa9c 	bl	8004898 <__errno>
 8001360:	4603      	mov	r3, r0
 8001362:	220c      	movs	r2, #12
 8001364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	e009      	b.n	8001380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800136c:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001372:	4b07      	ldr	r3, [pc, #28]	@ (8001390 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	4a05      	ldr	r2, [pc, #20]	@ (8001390 <_sbrk+0x64>)
 800137c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20020000 	.word	0x20020000
 800138c:	00000400 	.word	0x00000400
 8001390:	200002c8 	.word	0x200002c8
 8001394:	20000418 	.word	0x20000418

08001398 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <SystemInit+0x20>)
 800139e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013a2:	4a05      	ldr	r2, [pc, #20]	@ (80013b8 <SystemInit+0x20>)
 80013a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013c0:	f7ff ffea 	bl	8001398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c4:	480c      	ldr	r0, [pc, #48]	@ (80013f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013c6:	490d      	ldr	r1, [pc, #52]	@ (80013fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001400 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013cc:	e002      	b.n	80013d4 <LoopCopyDataInit>

080013ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d2:	3304      	adds	r3, #4

080013d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d8:	d3f9      	bcc.n	80013ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013da:	4a0a      	ldr	r2, [pc, #40]	@ (8001404 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001408 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e0:	e001      	b.n	80013e6 <LoopFillZerobss>

080013e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e4:	3204      	adds	r2, #4

080013e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e8:	d3fb      	bcc.n	80013e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013ea:	f003 fa5b 	bl	80048a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ee:	f7ff f9fb 	bl	80007e8 <main>
  bx  lr    
 80013f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013fc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001400:	08005234 	.word	0x08005234
  ldr r2, =_sbss
 8001404:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001408:	20000418 	.word	0x20000418

0800140c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC_IRQHandler>
	...

08001410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001414:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0d      	ldr	r2, [pc, #52]	@ (8001450 <HAL_Init+0x40>)
 800141a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800141e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001420:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0a      	ldr	r2, [pc, #40]	@ (8001450 <HAL_Init+0x40>)
 8001426:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800142a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800142c:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a07      	ldr	r2, [pc, #28]	@ (8001450 <HAL_Init+0x40>)
 8001432:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001436:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001438:	2003      	movs	r0, #3
 800143a:	f000 fee7 	bl	800220c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143e:	200f      	movs	r0, #15
 8001440:	f000 f808 	bl	8001454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001444:	f7ff fd5c 	bl	8000f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023c00 	.word	0x40023c00

08001454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800145c:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <HAL_InitTick+0x54>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <HAL_InitTick+0x58>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800146a:	fbb3 f3f1 	udiv	r3, r3, r1
 800146e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f000 feff 	bl	8002276 <HAL_SYSTICK_Config>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e00e      	b.n	80014a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b0f      	cmp	r3, #15
 8001486:	d80a      	bhi.n	800149e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001488:	2200      	movs	r2, #0
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f000 fec7 	bl	8002222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001494:	4a06      	ldr	r2, [pc, #24]	@ (80014b0 <HAL_InitTick+0x5c>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	e000      	b.n	80014a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000004 	.word	0x20000004
 80014ac:	2000000c 	.word	0x2000000c
 80014b0:	20000008 	.word	0x20000008

080014b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b8:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_IncTick+0x20>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <HAL_IncTick+0x24>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	4a04      	ldr	r2, [pc, #16]	@ (80014d8 <HAL_IncTick+0x24>)
 80014c6:	6013      	str	r3, [r2, #0]
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	2000000c 	.word	0x2000000c
 80014d8:	200002cc 	.word	0x200002cc

080014dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return uwTick;
 80014e0:	4b03      	ldr	r3, [pc, #12]	@ (80014f0 <HAL_GetTick+0x14>)
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	200002cc 	.word	0x200002cc

080014f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014fc:	f7ff ffee 	bl	80014dc <HAL_GetTick>
 8001500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150c:	d005      	beq.n	800151a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150e:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <HAL_Delay+0x44>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800151a:	bf00      	nop
 800151c:	f7ff ffde 	bl	80014dc <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	429a      	cmp	r2, r3
 800152a:	d8f7      	bhi.n	800151c <HAL_Delay+0x28>
  {
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	2000000c 	.word	0x2000000c

0800153c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e0ed      	b.n	800172a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff fcf8 	bl	8000f50 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f042 0201 	orr.w	r2, r2, #1
 800156e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001570:	f7ff ffb4 	bl	80014dc <HAL_GetTick>
 8001574:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001576:	e012      	b.n	800159e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001578:	f7ff ffb0 	bl	80014dc <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b0a      	cmp	r3, #10
 8001584:	d90b      	bls.n	800159e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2205      	movs	r2, #5
 8001596:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e0c5      	b.n	800172a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0e5      	beq.n	8001578 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0202 	bic.w	r2, r2, #2
 80015ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015bc:	f7ff ff8e 	bl	80014dc <HAL_GetTick>
 80015c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015c2:	e012      	b.n	80015ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015c4:	f7ff ff8a 	bl	80014dc <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b0a      	cmp	r3, #10
 80015d0:	d90b      	bls.n	80015ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2205      	movs	r2, #5
 80015e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e09f      	b.n	800172a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1e5      	bne.n	80015c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7e1b      	ldrb	r3, [r3, #24]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d108      	bne.n	8001612 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	e007      	b.n	8001622 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001620:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	7e5b      	ldrb	r3, [r3, #25]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d108      	bne.n	800163c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	e007      	b.n	800164c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800164a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7e9b      	ldrb	r3, [r3, #26]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d108      	bne.n	8001666 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0220 	orr.w	r2, r2, #32
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	e007      	b.n	8001676 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0220 	bic.w	r2, r2, #32
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	7edb      	ldrb	r3, [r3, #27]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d108      	bne.n	8001690 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0210 	bic.w	r2, r2, #16
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e007      	b.n	80016a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f042 0210 	orr.w	r2, r2, #16
 800169e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7f1b      	ldrb	r3, [r3, #28]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d108      	bne.n	80016ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0208 	orr.w	r2, r2, #8
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e007      	b.n	80016ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0208 	bic.w	r2, r2, #8
 80016c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7f5b      	ldrb	r3, [r3, #29]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d108      	bne.n	80016e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 0204 	orr.w	r2, r2, #4
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	e007      	b.n	80016f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0204 	bic.w	r2, r2, #4
 80016f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	ea42 0103 	orr.w	r1, r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	1e5a      	subs	r2, r3, #1
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001734:	b480      	push	{r7}
 8001736:	b087      	sub	sp, #28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3020 	ldrb.w	r3, [r3, #32]
 800174a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800174c:	7cfb      	ldrb	r3, [r7, #19]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d003      	beq.n	800175a <HAL_CAN_ConfigFilter+0x26>
 8001752:	7cfb      	ldrb	r3, [r7, #19]
 8001754:	2b02      	cmp	r3, #2
 8001756:	f040 80be 	bne.w	80018d6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800175a:	4b65      	ldr	r3, [pc, #404]	@ (80018f0 <HAL_CAN_ConfigFilter+0x1bc>)
 800175c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001764:	f043 0201 	orr.w	r2, r3, #1
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001774:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	431a      	orrs	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	f003 031f 	and.w	r3, r3, #31
 800179a:	2201      	movs	r2, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	401a      	ands	r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d123      	bne.n	8001804 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	401a      	ands	r2, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	3248      	adds	r2, #72	@ 0x48
 80017e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017fa:	6979      	ldr	r1, [r7, #20]
 80017fc:	3348      	adds	r3, #72	@ 0x48
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	440b      	add	r3, r1
 8001802:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d122      	bne.n	8001852 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	431a      	orrs	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800182c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3248      	adds	r2, #72	@ 0x48
 8001832:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001846:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001848:	6979      	ldr	r1, [r7, #20]
 800184a:	3348      	adds	r3, #72	@ 0x48
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	440b      	add	r3, r1
 8001850:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d109      	bne.n	800186e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	43db      	mvns	r3, r3
 8001864:	401a      	ands	r2, r3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800186c:	e007      	b.n	800187e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	431a      	orrs	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d109      	bne.n	800189a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	43db      	mvns	r3, r3
 8001890:	401a      	ands	r2, r3
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001898:	e007      	b.n	80018aa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	431a      	orrs	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d107      	bne.n	80018c2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	431a      	orrs	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018c8:	f023 0201 	bic.w	r2, r3, #1
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e006      	b.n	80018e4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018da:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
  }
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	371c      	adds	r7, #28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40006400 	.word	0x40006400

080018f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b01      	cmp	r3, #1
 8001906:	d12e      	bne.n	8001966 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2202      	movs	r2, #2
 800190c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0201 	bic.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001920:	f7ff fddc 	bl	80014dc <HAL_GetTick>
 8001924:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001926:	e012      	b.n	800194e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001928:	f7ff fdd8 	bl	80014dc <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b0a      	cmp	r3, #10
 8001934:	d90b      	bls.n	800194e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2205      	movs	r2, #5
 8001946:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e012      	b.n	8001974 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1e5      	bne.n	8001928 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	e006      	b.n	8001974 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
  }
}
 8001974:	4618      	mov	r0, r3
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001990:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001992:	7dfb      	ldrb	r3, [r7, #23]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d003      	beq.n	80019a0 <HAL_CAN_GetRxMessage+0x24>
 8001998:	7dfb      	ldrb	r3, [r7, #23]
 800199a:	2b02      	cmp	r3, #2
 800199c:	f040 8103 	bne.w	8001ba6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10e      	bne.n	80019c4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d116      	bne.n	80019e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0f7      	b.n	8001bb4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d107      	bne.n	80019e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e0e8      	b.n	8001bb4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	331b      	adds	r3, #27
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	4413      	add	r3, r2
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0204 	and.w	r2, r3, #4
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10c      	bne.n	8001a1a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	331b      	adds	r3, #27
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	4413      	add	r3, r2
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	0d5b      	lsrs	r3, r3, #21
 8001a10:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	e00b      	b.n	8001a32 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	331b      	adds	r3, #27
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	4413      	add	r3, r2
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	331b      	adds	r3, #27
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	4413      	add	r3, r2
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0202 	and.w	r2, r3, #2
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	331b      	adds	r3, #27
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	4413      	add	r3, r2
 8001a54:	3304      	adds	r3, #4
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2208      	movs	r2, #8
 8001a64:	611a      	str	r2, [r3, #16]
 8001a66:	e00b      	b.n	8001a80 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	331b      	adds	r3, #27
 8001a70:	011b      	lsls	r3, r3, #4
 8001a72:	4413      	add	r3, r2
 8001a74:	3304      	adds	r3, #4
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 020f 	and.w	r2, r3, #15
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	331b      	adds	r3, #27
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	331b      	adds	r3, #27
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	0c1b      	lsrs	r3, r3, #16
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	011b      	lsls	r3, r3, #4
 8001ab8:	4413      	add	r3, r2
 8001aba:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	4413      	add	r3, r2
 8001ad0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	0a1a      	lsrs	r2, r3, #8
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	4413      	add	r3, r2
 8001aea:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	0c1a      	lsrs	r2, r3, #16
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	3302      	adds	r3, #2
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	4413      	add	r3, r2
 8001b04:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	0e1a      	lsrs	r2, r3, #24
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	3303      	adds	r3, #3
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	3304      	adds	r3, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	4413      	add	r3, r2
 8001b36:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0a1a      	lsrs	r2, r3, #8
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	3305      	adds	r3, #5
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	0c1a      	lsrs	r2, r3, #16
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	3306      	adds	r3, #6
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0e1a      	lsrs	r2, r3, #24
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	3307      	adds	r3, #7
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d108      	bne.n	8001b92 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0220 	orr.w	r2, r2, #32
 8001b8e:	60da      	str	r2, [r3, #12]
 8001b90:	e007      	b.n	8001ba2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 0220 	orr.w	r2, r2, #32
 8001ba0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e006      	b.n	8001bb4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001baa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
  }
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	371c      	adds	r7, #28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bd0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d002      	beq.n	8001bde <HAL_CAN_ActivateNotification+0x1e>
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d109      	bne.n	8001bf2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6959      	ldr	r1, [r3, #20]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e006      	b.n	8001c00 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
  }
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	@ 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d07c      	beq.n	8001d4c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d023      	beq.n	8001ca4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2201      	movs	r2, #1
 8001c62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f983 	bl	8001f7a <HAL_CAN_TxMailbox0CompleteCallback>
 8001c74:	e016      	b.n	8001ca4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c82:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c88:	e00c      	b.n	8001ca4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d004      	beq.n	8001c9e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c96:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c9c:	e002      	b.n	8001ca4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f989 	bl	8001fb6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d024      	beq.n	8001cf8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cb6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f963 	bl	8001f8e <HAL_CAN_TxMailbox1CompleteCallback>
 8001cc8:	e016      	b.n	8001cf8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d004      	beq.n	8001cde <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cdc:	e00c      	b.n	8001cf8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d004      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cf0:	e002      	b.n	8001cf8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f969 	bl	8001fca <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d024      	beq.n	8001d4c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f943 	bl	8001fa2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d1c:	e016      	b.n	8001d4c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d004      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d30:	e00c      	b.n	8001d4c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d004      	beq.n	8001d46 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d44:	e002      	b.n	8001d4c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f949 	bl	8001fde <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00c      	beq.n	8001d70 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d66:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2210      	movs	r2, #16
 8001d6e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d006      	beq.n	8001d92 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2208      	movs	r2, #8
 8001d8a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f930 	bl	8001ff2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d009      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff f844 	bl	8000e38 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00c      	beq.n	8001dd4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2210      	movs	r2, #16
 8001dd2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	f003 0320 	and.w	r3, r3, #32
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d006      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2208      	movs	r2, #8
 8001dee:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f912 	bl	800201a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d009      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f8f9 	bl	8002006 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00b      	beq.n	8001e36 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	f003 0310 	and.w	r3, r3, #16
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2210      	movs	r2, #16
 8001e2e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f8fc 	bl	800202e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00b      	beq.n	8001e58 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d006      	beq.n	8001e58 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2208      	movs	r2, #8
 8001e50:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f8f5 	bl	8002042 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d07b      	beq.n	8001f5a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d072      	beq.n	8001f52 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d008      	beq.n	8001e88 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d008      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9e:	f043 0302 	orr.w	r3, r3, #2
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d008      	beq.n	8001ec0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d043      	beq.n	8001f52 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d03e      	beq.n	8001f52 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001eda:	2b60      	cmp	r3, #96	@ 0x60
 8001edc:	d02b      	beq.n	8001f36 <HAL_CAN_IRQHandler+0x32a>
 8001ede:	2b60      	cmp	r3, #96	@ 0x60
 8001ee0:	d82e      	bhi.n	8001f40 <HAL_CAN_IRQHandler+0x334>
 8001ee2:	2b50      	cmp	r3, #80	@ 0x50
 8001ee4:	d022      	beq.n	8001f2c <HAL_CAN_IRQHandler+0x320>
 8001ee6:	2b50      	cmp	r3, #80	@ 0x50
 8001ee8:	d82a      	bhi.n	8001f40 <HAL_CAN_IRQHandler+0x334>
 8001eea:	2b40      	cmp	r3, #64	@ 0x40
 8001eec:	d019      	beq.n	8001f22 <HAL_CAN_IRQHandler+0x316>
 8001eee:	2b40      	cmp	r3, #64	@ 0x40
 8001ef0:	d826      	bhi.n	8001f40 <HAL_CAN_IRQHandler+0x334>
 8001ef2:	2b30      	cmp	r3, #48	@ 0x30
 8001ef4:	d010      	beq.n	8001f18 <HAL_CAN_IRQHandler+0x30c>
 8001ef6:	2b30      	cmp	r3, #48	@ 0x30
 8001ef8:	d822      	bhi.n	8001f40 <HAL_CAN_IRQHandler+0x334>
 8001efa:	2b10      	cmp	r3, #16
 8001efc:	d002      	beq.n	8001f04 <HAL_CAN_IRQHandler+0x2f8>
 8001efe:	2b20      	cmp	r3, #32
 8001f00:	d005      	beq.n	8001f0e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f02:	e01d      	b.n	8001f40 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f06:	f043 0308 	orr.w	r3, r3, #8
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f0c:	e019      	b.n	8001f42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	f043 0310 	orr.w	r3, r3, #16
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f16:	e014      	b.n	8001f42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1a:	f043 0320 	orr.w	r3, r3, #32
 8001f1e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f20:	e00f      	b.n	8001f42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f28:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f2a:	e00a      	b.n	8001f42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f34:	e005      	b.n	8001f42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f3c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f3e:	e000      	b.n	8001f42 <HAL_CAN_IRQHandler+0x336>
            break;
 8001f40:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	699a      	ldr	r2, [r3, #24]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001f50:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2204      	movs	r2, #4
 8001f58:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f872 	bl	8002056 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f72:	bf00      	nop
 8001f74:	3728      	adds	r7, #40	@ 0x28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800207c:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002088:	4013      	ands	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002094:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800209c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209e:	4a04      	ldr	r2, [pc, #16]	@ (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	60d3      	str	r3, [r2, #12]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b8:	4b04      	ldr	r3, [pc, #16]	@ (80020cc <__NVIC_GetPriorityGrouping+0x18>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	f003 0307 	and.w	r3, r3, #7
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	db0b      	blt.n	80020fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	4907      	ldr	r1, [pc, #28]	@ (8002108 <__NVIC_EnableIRQ+0x38>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	2001      	movs	r0, #1
 80020f2:	fa00 f202 	lsl.w	r2, r0, r2
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000e100 	.word	0xe000e100

0800210c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	db0a      	blt.n	8002136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	490c      	ldr	r1, [pc, #48]	@ (8002158 <__NVIC_SetPriority+0x4c>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	440b      	add	r3, r1
 8002130:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002134:	e00a      	b.n	800214c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4908      	ldr	r1, [pc, #32]	@ (800215c <__NVIC_SetPriority+0x50>)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	3b04      	subs	r3, #4
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	440b      	add	r3, r1
 800214a:	761a      	strb	r2, [r3, #24]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	@ 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f1c3 0307 	rsb	r3, r3, #7
 800217a:	2b04      	cmp	r3, #4
 800217c:	bf28      	it	cs
 800217e:	2304      	movcs	r3, #4
 8002180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3304      	adds	r3, #4
 8002186:	2b06      	cmp	r3, #6
 8002188:	d902      	bls.n	8002190 <NVIC_EncodePriority+0x30>
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3b03      	subs	r3, #3
 800218e:	e000      	b.n	8002192 <NVIC_EncodePriority+0x32>
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	f04f 32ff 	mov.w	r2, #4294967295
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43da      	mvns	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	401a      	ands	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43d9      	mvns	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	4313      	orrs	r3, r2
         );
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3724      	adds	r7, #36	@ 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d8:	d301      	bcc.n	80021de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021da:	2301      	movs	r3, #1
 80021dc:	e00f      	b.n	80021fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021de:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <SysTick_Config+0x40>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e6:	210f      	movs	r1, #15
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ec:	f7ff ff8e 	bl	800210c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f0:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <SysTick_Config+0x40>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f6:	4b04      	ldr	r3, [pc, #16]	@ (8002208 <SysTick_Config+0x40>)
 80021f8:	2207      	movs	r2, #7
 80021fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	e000e010 	.word	0xe000e010

0800220c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff29 	bl	800206c <__NVIC_SetPriorityGrouping>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002234:	f7ff ff3e 	bl	80020b4 <__NVIC_GetPriorityGrouping>
 8002238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7ff ff8e 	bl	8002160 <NVIC_EncodePriority>
 8002244:	4602      	mov	r2, r0
 8002246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff5d 	bl	800210c <__NVIC_SetPriority>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff31 	bl	80020d0 <__NVIC_EnableIRQ>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ffa2 	bl	80021c8 <SysTick_Config>
 8002284:	4603      	mov	r3, r0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800229c:	f7ff f91e 	bl	80014dc <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e099      	b.n	80023e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022cc:	e00f      	b.n	80022ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ce:	f7ff f905 	bl	80014dc <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b05      	cmp	r3, #5
 80022da:	d908      	bls.n	80022ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2220      	movs	r2, #32
 80022e0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2203      	movs	r2, #3
 80022e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e078      	b.n	80023e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1e8      	bne.n	80022ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	4b38      	ldr	r3, [pc, #224]	@ (80023e8 <HAL_DMA_Init+0x158>)
 8002308:	4013      	ands	r3, r2
 800230a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800231a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002326:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002332:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4313      	orrs	r3, r2
 800233e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002344:	2b04      	cmp	r3, #4
 8002346:	d107      	bne.n	8002358 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002350:	4313      	orrs	r3, r2
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	4313      	orrs	r3, r2
 8002356:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f023 0307 	bic.w	r3, r3, #7
 800236e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	4313      	orrs	r3, r2
 8002378:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237e:	2b04      	cmp	r3, #4
 8002380:	d117      	bne.n	80023b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4313      	orrs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00e      	beq.n	80023b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 fa53 	bl	8002840 <DMA_CheckFifoParam>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2240      	movs	r2, #64	@ 0x40
 80023a4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80023ae:	2301      	movs	r3, #1
 80023b0:	e016      	b.n	80023e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 fa0a 	bl	80027d4 <DMA_CalcBaseAndBitshift>
 80023c0:	4603      	mov	r3, r0
 80023c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c8:	223f      	movs	r2, #63	@ 0x3f
 80023ca:	409a      	lsls	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	f010803f 	.word	0xf010803f

080023ec <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
 80023f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_DMA_Start+0x20>
 8002408:	2302      	movs	r3, #2
 800240a:	e026      	b.n	800245a <HAL_DMA_Start+0x6e>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b01      	cmp	r3, #1
 800241e:	d115      	bne.n	800244c <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	68b9      	ldr	r1, [r7, #8]
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f99f 	bl	8002778 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0201 	orr.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	e005      	b.n	8002458 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002454:	2302      	movs	r3, #2
 8002456:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8002458:	7dfb      	ldrb	r3, [r7, #23]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002470:	4b8e      	ldr	r3, [pc, #568]	@ (80026ac <HAL_DMA_IRQHandler+0x248>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a8e      	ldr	r2, [pc, #568]	@ (80026b0 <HAL_DMA_IRQHandler+0x24c>)
 8002476:	fba2 2303 	umull	r2, r3, r2, r3
 800247a:	0a9b      	lsrs	r3, r3, #10
 800247c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002482:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248e:	2208      	movs	r2, #8
 8002490:	409a      	lsls	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4013      	ands	r3, r2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d01a      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d013      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0204 	bic.w	r2, r2, #4
 80024b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024bc:	2208      	movs	r2, #8
 80024be:	409a      	lsls	r2, r3
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c8:	f043 0201 	orr.w	r2, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d4:	2201      	movs	r2, #1
 80024d6:	409a      	lsls	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d012      	beq.n	8002506 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00b      	beq.n	8002506 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f2:	2201      	movs	r2, #1
 80024f4:	409a      	lsls	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024fe:	f043 0202 	orr.w	r2, r3, #2
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800250a:	2204      	movs	r2, #4
 800250c:	409a      	lsls	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d012      	beq.n	800253c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00b      	beq.n	800253c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002528:	2204      	movs	r2, #4
 800252a:	409a      	lsls	r2, r3
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002534:	f043 0204 	orr.w	r2, r3, #4
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002540:	2210      	movs	r2, #16
 8002542:	409a      	lsls	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d043      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d03c      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800255e:	2210      	movs	r2, #16
 8002560:	409a      	lsls	r2, r3
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d018      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d108      	bne.n	8002594 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d024      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	4798      	blx	r3
 8002592:	e01f      	b.n	80025d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002598:	2b00      	cmp	r3, #0
 800259a:	d01b      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	4798      	blx	r3
 80025a4:	e016      	b.n	80025d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d107      	bne.n	80025c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0208 	bic.w	r2, r2, #8
 80025c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d8:	2220      	movs	r2, #32
 80025da:	409a      	lsls	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4013      	ands	r3, r2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 808f 	beq.w	8002704 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0310 	and.w	r3, r3, #16
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 8087 	beq.w	8002704 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fa:	2220      	movs	r2, #32
 80025fc:	409a      	lsls	r2, r3
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b05      	cmp	r3, #5
 800260c:	d136      	bne.n	800267c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0216 	bic.w	r2, r2, #22
 800261c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695a      	ldr	r2, [r3, #20]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800262c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d103      	bne.n	800263e <HAL_DMA_IRQHandler+0x1da>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800263a:	2b00      	cmp	r3, #0
 800263c:	d007      	beq.n	800264e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0208 	bic.w	r2, r2, #8
 800264c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002652:	223f      	movs	r2, #63	@ 0x3f
 8002654:	409a      	lsls	r2, r3
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800266e:	2b00      	cmp	r3, #0
 8002670:	d07e      	beq.n	8002770 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	4798      	blx	r3
        }
        return;
 800267a:	e079      	b.n	8002770 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d01d      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10d      	bne.n	80026b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269c:	2b00      	cmp	r3, #0
 800269e:	d031      	beq.n	8002704 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	4798      	blx	r3
 80026a8:	e02c      	b.n	8002704 <HAL_DMA_IRQHandler+0x2a0>
 80026aa:	bf00      	nop
 80026ac:	20000004 	.word	0x20000004
 80026b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d023      	beq.n	8002704 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	4798      	blx	r3
 80026c4:	e01e      	b.n	8002704 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10f      	bne.n	80026f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0210 	bic.w	r2, r2, #16
 80026e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002708:	2b00      	cmp	r3, #0
 800270a:	d032      	beq.n	8002772 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d022      	beq.n	800275e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2205      	movs	r2, #5
 800271c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0201 	bic.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	3301      	adds	r3, #1
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	429a      	cmp	r2, r3
 800273a:	d307      	bcc.n	800274c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f2      	bne.n	8002730 <HAL_DMA_IRQHandler+0x2cc>
 800274a:	e000      	b.n	800274e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800274c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002762:	2b00      	cmp	r3, #0
 8002764:	d005      	beq.n	8002772 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	4798      	blx	r3
 800276e:	e000      	b.n	8002772 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002770:	bf00      	nop
    }
  }
}
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002794:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b40      	cmp	r3, #64	@ 0x40
 80027a4:	d108      	bne.n	80027b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027b6:	e007      	b.n	80027c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	60da      	str	r2, [r3, #12]
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	3b10      	subs	r3, #16
 80027e4:	4a14      	ldr	r2, [pc, #80]	@ (8002838 <DMA_CalcBaseAndBitshift+0x64>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027ee:	4a13      	ldr	r2, [pc, #76]	@ (800283c <DMA_CalcBaseAndBitshift+0x68>)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4413      	add	r3, r2
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d909      	bls.n	8002816 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800280a:	f023 0303 	bic.w	r3, r3, #3
 800280e:	1d1a      	adds	r2, r3, #4
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	659a      	str	r2, [r3, #88]	@ 0x58
 8002814:	e007      	b.n	8002826 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800281e:	f023 0303 	bic.w	r3, r3, #3
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800282a:	4618      	mov	r0, r3
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	aaaaaaab 	.word	0xaaaaaaab
 800283c:	080051e8 	.word	0x080051e8

08002840 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002848:	2300      	movs	r3, #0
 800284a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002850:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d11f      	bne.n	800289a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b03      	cmp	r3, #3
 800285e:	d856      	bhi.n	800290e <DMA_CheckFifoParam+0xce>
 8002860:	a201      	add	r2, pc, #4	@ (adr r2, 8002868 <DMA_CheckFifoParam+0x28>)
 8002862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002866:	bf00      	nop
 8002868:	08002879 	.word	0x08002879
 800286c:	0800288b 	.word	0x0800288b
 8002870:	08002879 	.word	0x08002879
 8002874:	0800290f 	.word	0x0800290f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800287c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d046      	beq.n	8002912 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002888:	e043      	b.n	8002912 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002892:	d140      	bne.n	8002916 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002898:	e03d      	b.n	8002916 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028a2:	d121      	bne.n	80028e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d837      	bhi.n	800291a <DMA_CheckFifoParam+0xda>
 80028aa:	a201      	add	r2, pc, #4	@ (adr r2, 80028b0 <DMA_CheckFifoParam+0x70>)
 80028ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b0:	080028c1 	.word	0x080028c1
 80028b4:	080028c7 	.word	0x080028c7
 80028b8:	080028c1 	.word	0x080028c1
 80028bc:	080028d9 	.word	0x080028d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	73fb      	strb	r3, [r7, #15]
      break;
 80028c4:	e030      	b.n	8002928 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d025      	beq.n	800291e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d6:	e022      	b.n	800291e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028dc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028e0:	d11f      	bne.n	8002922 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028e6:	e01c      	b.n	8002922 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d903      	bls.n	80028f6 <DMA_CheckFifoParam+0xb6>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d003      	beq.n	80028fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028f4:	e018      	b.n	8002928 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
      break;
 80028fa:	e015      	b.n	8002928 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002900:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00e      	beq.n	8002926 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
      break;
 800290c:	e00b      	b.n	8002926 <DMA_CheckFifoParam+0xe6>
      break;
 800290e:	bf00      	nop
 8002910:	e00a      	b.n	8002928 <DMA_CheckFifoParam+0xe8>
      break;
 8002912:	bf00      	nop
 8002914:	e008      	b.n	8002928 <DMA_CheckFifoParam+0xe8>
      break;
 8002916:	bf00      	nop
 8002918:	e006      	b.n	8002928 <DMA_CheckFifoParam+0xe8>
      break;
 800291a:	bf00      	nop
 800291c:	e004      	b.n	8002928 <DMA_CheckFifoParam+0xe8>
      break;
 800291e:	bf00      	nop
 8002920:	e002      	b.n	8002928 <DMA_CheckFifoParam+0xe8>
      break;   
 8002922:	bf00      	nop
 8002924:	e000      	b.n	8002928 <DMA_CheckFifoParam+0xe8>
      break;
 8002926:	bf00      	nop
    }
  } 
  
  return status; 
 8002928:	7bfb      	ldrb	r3, [r7, #15]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop

08002938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002938:	b480      	push	{r7}
 800293a:	b089      	sub	sp, #36	@ 0x24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800294a:	2300      	movs	r3, #0
 800294c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	e165      	b.n	8002c20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002954:	2201      	movs	r2, #1
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4013      	ands	r3, r2
 8002966:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	429a      	cmp	r2, r3
 800296e:	f040 8154 	bne.w	8002c1a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d005      	beq.n	800298a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002986:	2b02      	cmp	r3, #2
 8002988:	d130      	bne.n	80029ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	2203      	movs	r2, #3
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c0:	2201      	movs	r2, #1
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 0201 	and.w	r2, r3, #1
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d017      	beq.n	8002a28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	2203      	movs	r2, #3
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d123      	bne.n	8002a7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	08da      	lsrs	r2, r3, #3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3208      	adds	r2, #8
 8002a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	220f      	movs	r2, #15
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	08da      	lsrs	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3208      	adds	r2, #8
 8002a76:	69b9      	ldr	r1, [r7, #24]
 8002a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	2203      	movs	r2, #3
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0203 	and.w	r2, r3, #3
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80ae 	beq.w	8002c1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c38 <HAL_GPIO_Init+0x300>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac6:	4a5c      	ldr	r2, [pc, #368]	@ (8002c38 <HAL_GPIO_Init+0x300>)
 8002ac8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002acc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ace:	4b5a      	ldr	r3, [pc, #360]	@ (8002c38 <HAL_GPIO_Init+0x300>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ada:	4a58      	ldr	r2, [pc, #352]	@ (8002c3c <HAL_GPIO_Init+0x304>)
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	089b      	lsrs	r3, r3, #2
 8002ae0:	3302      	adds	r3, #2
 8002ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	220f      	movs	r2, #15
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4013      	ands	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a4f      	ldr	r2, [pc, #316]	@ (8002c40 <HAL_GPIO_Init+0x308>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d025      	beq.n	8002b52 <HAL_GPIO_Init+0x21a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a4e      	ldr	r2, [pc, #312]	@ (8002c44 <HAL_GPIO_Init+0x30c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d01f      	beq.n	8002b4e <HAL_GPIO_Init+0x216>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a4d      	ldr	r2, [pc, #308]	@ (8002c48 <HAL_GPIO_Init+0x310>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d019      	beq.n	8002b4a <HAL_GPIO_Init+0x212>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a4c      	ldr	r2, [pc, #304]	@ (8002c4c <HAL_GPIO_Init+0x314>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d013      	beq.n	8002b46 <HAL_GPIO_Init+0x20e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a4b      	ldr	r2, [pc, #300]	@ (8002c50 <HAL_GPIO_Init+0x318>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00d      	beq.n	8002b42 <HAL_GPIO_Init+0x20a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a4a      	ldr	r2, [pc, #296]	@ (8002c54 <HAL_GPIO_Init+0x31c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d007      	beq.n	8002b3e <HAL_GPIO_Init+0x206>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a49      	ldr	r2, [pc, #292]	@ (8002c58 <HAL_GPIO_Init+0x320>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d101      	bne.n	8002b3a <HAL_GPIO_Init+0x202>
 8002b36:	2306      	movs	r3, #6
 8002b38:	e00c      	b.n	8002b54 <HAL_GPIO_Init+0x21c>
 8002b3a:	2307      	movs	r3, #7
 8002b3c:	e00a      	b.n	8002b54 <HAL_GPIO_Init+0x21c>
 8002b3e:	2305      	movs	r3, #5
 8002b40:	e008      	b.n	8002b54 <HAL_GPIO_Init+0x21c>
 8002b42:	2304      	movs	r3, #4
 8002b44:	e006      	b.n	8002b54 <HAL_GPIO_Init+0x21c>
 8002b46:	2303      	movs	r3, #3
 8002b48:	e004      	b.n	8002b54 <HAL_GPIO_Init+0x21c>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e002      	b.n	8002b54 <HAL_GPIO_Init+0x21c>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <HAL_GPIO_Init+0x21c>
 8002b52:	2300      	movs	r3, #0
 8002b54:	69fa      	ldr	r2, [r7, #28]
 8002b56:	f002 0203 	and.w	r2, r2, #3
 8002b5a:	0092      	lsls	r2, r2, #2
 8002b5c:	4093      	lsls	r3, r2
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b64:	4935      	ldr	r1, [pc, #212]	@ (8002c3c <HAL_GPIO_Init+0x304>)
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	089b      	lsrs	r3, r3, #2
 8002b6a:	3302      	adds	r3, #2
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b72:	4b3a      	ldr	r3, [pc, #232]	@ (8002c5c <HAL_GPIO_Init+0x324>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b96:	4a31      	ldr	r2, [pc, #196]	@ (8002c5c <HAL_GPIO_Init+0x324>)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b9c:	4b2f      	ldr	r3, [pc, #188]	@ (8002c5c <HAL_GPIO_Init+0x324>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bc0:	4a26      	ldr	r2, [pc, #152]	@ (8002c5c <HAL_GPIO_Init+0x324>)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bc6:	4b25      	ldr	r3, [pc, #148]	@ (8002c5c <HAL_GPIO_Init+0x324>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bea:	4a1c      	ldr	r2, [pc, #112]	@ (8002c5c <HAL_GPIO_Init+0x324>)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c5c <HAL_GPIO_Init+0x324>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c14:	4a11      	ldr	r2, [pc, #68]	@ (8002c5c <HAL_GPIO_Init+0x324>)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	2b0f      	cmp	r3, #15
 8002c24:	f67f ae96 	bls.w	8002954 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c28:	bf00      	nop
 8002c2a:	bf00      	nop
 8002c2c:	3724      	adds	r7, #36	@ 0x24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40013800 	.word	0x40013800
 8002c40:	40020000 	.word	0x40020000
 8002c44:	40020400 	.word	0x40020400
 8002c48:	40020800 	.word	0x40020800
 8002c4c:	40020c00 	.word	0x40020c00
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40021400 	.word	0x40021400
 8002c58:	40021800 	.word	0x40021800
 8002c5c:	40013c00 	.word	0x40013c00

08002c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	807b      	strh	r3, [r7, #2]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c70:	787b      	ldrb	r3, [r7, #1]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c76:	887a      	ldrh	r2, [r7, #2]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c7c:	e003      	b.n	8002c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c7e:	887b      	ldrh	r3, [r7, #2]
 8002c80:	041a      	lsls	r2, r3, #16
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	619a      	str	r2, [r3, #24]
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b085      	sub	sp, #20
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ca4:	887a      	ldrh	r2, [r7, #2]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	041a      	lsls	r2, r3, #16
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	43d9      	mvns	r1, r3
 8002cb0:	887b      	ldrh	r3, [r7, #2]
 8002cb2:	400b      	ands	r3, r1
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	619a      	str	r2, [r3, #24]
}
 8002cba:	bf00      	nop
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	603b      	str	r3, [r7, #0]
 8002cd6:	4b20      	ldr	r3, [pc, #128]	@ (8002d58 <HAL_PWREx_EnableOverDrive+0x90>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	4a1f      	ldr	r2, [pc, #124]	@ (8002d58 <HAL_PWREx_EnableOverDrive+0x90>)
 8002cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d58 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cea:	603b      	str	r3, [r7, #0]
 8002cec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cee:	4b1b      	ldr	r3, [pc, #108]	@ (8002d5c <HAL_PWREx_EnableOverDrive+0x94>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cf4:	f7fe fbf2 	bl	80014dc <HAL_GetTick>
 8002cf8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cfa:	e009      	b.n	8002d10 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cfc:	f7fe fbee 	bl	80014dc <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d0a:	d901      	bls.n	8002d10 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e01f      	b.n	8002d50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d10:	4b13      	ldr	r3, [pc, #76]	@ (8002d60 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d1c:	d1ee      	bne.n	8002cfc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d1e:	4b11      	ldr	r3, [pc, #68]	@ (8002d64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d20:	2201      	movs	r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d24:	f7fe fbda 	bl	80014dc <HAL_GetTick>
 8002d28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d2a:	e009      	b.n	8002d40 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d2c:	f7fe fbd6 	bl	80014dc <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d3a:	d901      	bls.n	8002d40 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e007      	b.n	8002d50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d40:	4b07      	ldr	r3, [pc, #28]	@ (8002d60 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d4c:	d1ee      	bne.n	8002d2c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	420e0040 	.word	0x420e0040
 8002d60:	40007000 	.word	0x40007000
 8002d64:	420e0044 	.word	0x420e0044

08002d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0cc      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b68      	ldr	r3, [pc, #416]	@ (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d90c      	bls.n	8002da4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b65      	ldr	r3, [pc, #404]	@ (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d92:	4b63      	ldr	r3, [pc, #396]	@ (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0b8      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d020      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dbc:	4b59      	ldr	r3, [pc, #356]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4a58      	ldr	r2, [pc, #352]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002dc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd4:	4b53      	ldr	r3, [pc, #332]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	4a52      	ldr	r2, [pc, #328]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de0:	4b50      	ldr	r3, [pc, #320]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	494d      	ldr	r1, [pc, #308]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d044      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d107      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e06:	4b47      	ldr	r3, [pc, #284]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d119      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e07f      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d003      	beq.n	8002e26 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e26:	4b3f      	ldr	r3, [pc, #252]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e06f      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e36:	4b3b      	ldr	r3, [pc, #236]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e067      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e46:	4b37      	ldr	r3, [pc, #220]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f023 0203 	bic.w	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4934      	ldr	r1, [pc, #208]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e58:	f7fe fb40 	bl	80014dc <HAL_GetTick>
 8002e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e60:	f7fe fb3c 	bl	80014dc <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e04f      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e76:	4b2b      	ldr	r3, [pc, #172]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 020c 	and.w	r2, r3, #12
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d1eb      	bne.n	8002e60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e88:	4b25      	ldr	r3, [pc, #148]	@ (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d20c      	bcs.n	8002eb0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b22      	ldr	r3, [pc, #136]	@ (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b20      	ldr	r3, [pc, #128]	@ (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e032      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ebc:	4b19      	ldr	r3, [pc, #100]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4916      	ldr	r1, [pc, #88]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eda:	4b12      	ldr	r3, [pc, #72]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	490e      	ldr	r1, [pc, #56]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eee:	f000 f855 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	091b      	lsrs	r3, r3, #4
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	490a      	ldr	r1, [pc, #40]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002f00:	5ccb      	ldrb	r3, [r1, r3]
 8002f02:	fa22 f303 	lsr.w	r3, r2, r3
 8002f06:	4a09      	ldr	r2, [pc, #36]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f0a:	4b09      	ldr	r3, [pc, #36]	@ (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fe faa0 	bl	8001454 <HAL_InitTick>

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023c00 	.word	0x40023c00
 8002f24:	40023800 	.word	0x40023800
 8002f28:	080051d0 	.word	0x080051d0
 8002f2c:	20000004 	.word	0x20000004
 8002f30:	20000008 	.word	0x20000008

08002f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f38:	4b03      	ldr	r3, [pc, #12]	@ (8002f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20000004 	.word	0x20000004

08002f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f50:	f7ff fff0 	bl	8002f34 <HAL_RCC_GetHCLKFreq>
 8002f54:	4602      	mov	r2, r0
 8002f56:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	0a9b      	lsrs	r3, r3, #10
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	4903      	ldr	r1, [pc, #12]	@ (8002f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f62:	5ccb      	ldrb	r3, [r1, r3]
 8002f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	080051e0 	.word	0x080051e0

08002f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f78:	f7ff ffdc 	bl	8002f34 <HAL_RCC_GetHCLKFreq>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	4b05      	ldr	r3, [pc, #20]	@ (8002f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	0b5b      	lsrs	r3, r3, #13
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	4903      	ldr	r1, [pc, #12]	@ (8002f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f8a:	5ccb      	ldrb	r3, [r1, r3]
 8002f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40023800 	.word	0x40023800
 8002f98:	080051e0 	.word	0x080051e0

08002f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fa0:	b0ae      	sub	sp, #184	@ 0xb8
 8002fa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fc2:	4bcb      	ldr	r3, [pc, #812]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b0c      	cmp	r3, #12
 8002fcc:	f200 8206 	bhi.w	80033dc <HAL_RCC_GetSysClockFreq+0x440>
 8002fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd6:	bf00      	nop
 8002fd8:	0800300d 	.word	0x0800300d
 8002fdc:	080033dd 	.word	0x080033dd
 8002fe0:	080033dd 	.word	0x080033dd
 8002fe4:	080033dd 	.word	0x080033dd
 8002fe8:	08003015 	.word	0x08003015
 8002fec:	080033dd 	.word	0x080033dd
 8002ff0:	080033dd 	.word	0x080033dd
 8002ff4:	080033dd 	.word	0x080033dd
 8002ff8:	0800301d 	.word	0x0800301d
 8002ffc:	080033dd 	.word	0x080033dd
 8003000:	080033dd 	.word	0x080033dd
 8003004:	080033dd 	.word	0x080033dd
 8003008:	0800320d 	.word	0x0800320d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800300c:	4bb9      	ldr	r3, [pc, #740]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800300e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003012:	e1e7      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003014:	4bb8      	ldr	r3, [pc, #736]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003016:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800301a:	e1e3      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800301c:	4bb4      	ldr	r3, [pc, #720]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003024:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003028:	4bb1      	ldr	r3, [pc, #708]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d071      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003034:	4bae      	ldr	r3, [pc, #696]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	099b      	lsrs	r3, r3, #6
 800303a:	2200      	movs	r2, #0
 800303c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003040:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003044:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800304c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003050:	2300      	movs	r3, #0
 8003052:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003056:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800305a:	4622      	mov	r2, r4
 800305c:	462b      	mov	r3, r5
 800305e:	f04f 0000 	mov.w	r0, #0
 8003062:	f04f 0100 	mov.w	r1, #0
 8003066:	0159      	lsls	r1, r3, #5
 8003068:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800306c:	0150      	lsls	r0, r2, #5
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4621      	mov	r1, r4
 8003074:	1a51      	subs	r1, r2, r1
 8003076:	6439      	str	r1, [r7, #64]	@ 0x40
 8003078:	4629      	mov	r1, r5
 800307a:	eb63 0301 	sbc.w	r3, r3, r1
 800307e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800308c:	4649      	mov	r1, r9
 800308e:	018b      	lsls	r3, r1, #6
 8003090:	4641      	mov	r1, r8
 8003092:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003096:	4641      	mov	r1, r8
 8003098:	018a      	lsls	r2, r1, #6
 800309a:	4641      	mov	r1, r8
 800309c:	1a51      	subs	r1, r2, r1
 800309e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80030a0:	4649      	mov	r1, r9
 80030a2:	eb63 0301 	sbc.w	r3, r3, r1
 80030a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80030b4:	4649      	mov	r1, r9
 80030b6:	00cb      	lsls	r3, r1, #3
 80030b8:	4641      	mov	r1, r8
 80030ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030be:	4641      	mov	r1, r8
 80030c0:	00ca      	lsls	r2, r1, #3
 80030c2:	4610      	mov	r0, r2
 80030c4:	4619      	mov	r1, r3
 80030c6:	4603      	mov	r3, r0
 80030c8:	4622      	mov	r2, r4
 80030ca:	189b      	adds	r3, r3, r2
 80030cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80030ce:	462b      	mov	r3, r5
 80030d0:	460a      	mov	r2, r1
 80030d2:	eb42 0303 	adc.w	r3, r2, r3
 80030d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030e4:	4629      	mov	r1, r5
 80030e6:	024b      	lsls	r3, r1, #9
 80030e8:	4621      	mov	r1, r4
 80030ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030ee:	4621      	mov	r1, r4
 80030f0:	024a      	lsls	r2, r1, #9
 80030f2:	4610      	mov	r0, r2
 80030f4:	4619      	mov	r1, r3
 80030f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030fa:	2200      	movs	r2, #0
 80030fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003100:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003104:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003108:	f7fd f8da 	bl	80002c0 <__aeabi_uldivmod>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4613      	mov	r3, r2
 8003112:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003116:	e067      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003118:	4b75      	ldr	r3, [pc, #468]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	099b      	lsrs	r3, r3, #6
 800311e:	2200      	movs	r2, #0
 8003120:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003124:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003128:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800312c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003130:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003132:	2300      	movs	r3, #0
 8003134:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003136:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800313a:	4622      	mov	r2, r4
 800313c:	462b      	mov	r3, r5
 800313e:	f04f 0000 	mov.w	r0, #0
 8003142:	f04f 0100 	mov.w	r1, #0
 8003146:	0159      	lsls	r1, r3, #5
 8003148:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800314c:	0150      	lsls	r0, r2, #5
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4621      	mov	r1, r4
 8003154:	1a51      	subs	r1, r2, r1
 8003156:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003158:	4629      	mov	r1, r5
 800315a:	eb63 0301 	sbc.w	r3, r3, r1
 800315e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800316c:	4649      	mov	r1, r9
 800316e:	018b      	lsls	r3, r1, #6
 8003170:	4641      	mov	r1, r8
 8003172:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003176:	4641      	mov	r1, r8
 8003178:	018a      	lsls	r2, r1, #6
 800317a:	4641      	mov	r1, r8
 800317c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003180:	4649      	mov	r1, r9
 8003182:	eb63 0b01 	sbc.w	fp, r3, r1
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003192:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003196:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800319a:	4692      	mov	sl, r2
 800319c:	469b      	mov	fp, r3
 800319e:	4623      	mov	r3, r4
 80031a0:	eb1a 0303 	adds.w	r3, sl, r3
 80031a4:	623b      	str	r3, [r7, #32]
 80031a6:	462b      	mov	r3, r5
 80031a8:	eb4b 0303 	adc.w	r3, fp, r3
 80031ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80031ba:	4629      	mov	r1, r5
 80031bc:	028b      	lsls	r3, r1, #10
 80031be:	4621      	mov	r1, r4
 80031c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031c4:	4621      	mov	r1, r4
 80031c6:	028a      	lsls	r2, r1, #10
 80031c8:	4610      	mov	r0, r2
 80031ca:	4619      	mov	r1, r3
 80031cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031d0:	2200      	movs	r2, #0
 80031d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80031d4:	677a      	str	r2, [r7, #116]	@ 0x74
 80031d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80031da:	f7fd f871 	bl	80002c0 <__aeabi_uldivmod>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4613      	mov	r3, r2
 80031e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80031e8:	4b41      	ldr	r3, [pc, #260]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	0c1b      	lsrs	r3, r3, #16
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	3301      	adds	r3, #1
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80031fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80031fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003202:	fbb2 f3f3 	udiv	r3, r2, r3
 8003206:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800320a:	e0eb      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800320c:	4b38      	ldr	r3, [pc, #224]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003214:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003218:	4b35      	ldr	r3, [pc, #212]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d06b      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003224:	4b32      	ldr	r3, [pc, #200]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	099b      	lsrs	r3, r3, #6
 800322a:	2200      	movs	r2, #0
 800322c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800322e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003230:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003236:	663b      	str	r3, [r7, #96]	@ 0x60
 8003238:	2300      	movs	r3, #0
 800323a:	667b      	str	r3, [r7, #100]	@ 0x64
 800323c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003240:	4622      	mov	r2, r4
 8003242:	462b      	mov	r3, r5
 8003244:	f04f 0000 	mov.w	r0, #0
 8003248:	f04f 0100 	mov.w	r1, #0
 800324c:	0159      	lsls	r1, r3, #5
 800324e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003252:	0150      	lsls	r0, r2, #5
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4621      	mov	r1, r4
 800325a:	1a51      	subs	r1, r2, r1
 800325c:	61b9      	str	r1, [r7, #24]
 800325e:	4629      	mov	r1, r5
 8003260:	eb63 0301 	sbc.w	r3, r3, r1
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003272:	4659      	mov	r1, fp
 8003274:	018b      	lsls	r3, r1, #6
 8003276:	4651      	mov	r1, sl
 8003278:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800327c:	4651      	mov	r1, sl
 800327e:	018a      	lsls	r2, r1, #6
 8003280:	4651      	mov	r1, sl
 8003282:	ebb2 0801 	subs.w	r8, r2, r1
 8003286:	4659      	mov	r1, fp
 8003288:	eb63 0901 	sbc.w	r9, r3, r1
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003298:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800329c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032a0:	4690      	mov	r8, r2
 80032a2:	4699      	mov	r9, r3
 80032a4:	4623      	mov	r3, r4
 80032a6:	eb18 0303 	adds.w	r3, r8, r3
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	462b      	mov	r3, r5
 80032ae:	eb49 0303 	adc.w	r3, r9, r3
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80032c0:	4629      	mov	r1, r5
 80032c2:	024b      	lsls	r3, r1, #9
 80032c4:	4621      	mov	r1, r4
 80032c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032ca:	4621      	mov	r1, r4
 80032cc:	024a      	lsls	r2, r1, #9
 80032ce:	4610      	mov	r0, r2
 80032d0:	4619      	mov	r1, r3
 80032d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032d6:	2200      	movs	r2, #0
 80032d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80032da:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80032dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80032e0:	f7fc ffee 	bl	80002c0 <__aeabi_uldivmod>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4613      	mov	r3, r2
 80032ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032ee:	e065      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x420>
 80032f0:	40023800 	.word	0x40023800
 80032f4:	00f42400 	.word	0x00f42400
 80032f8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fc:	4b3d      	ldr	r3, [pc, #244]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	099b      	lsrs	r3, r3, #6
 8003302:	2200      	movs	r2, #0
 8003304:	4618      	mov	r0, r3
 8003306:	4611      	mov	r1, r2
 8003308:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800330c:	653b      	str	r3, [r7, #80]	@ 0x50
 800330e:	2300      	movs	r3, #0
 8003310:	657b      	str	r3, [r7, #84]	@ 0x54
 8003312:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003316:	4642      	mov	r2, r8
 8003318:	464b      	mov	r3, r9
 800331a:	f04f 0000 	mov.w	r0, #0
 800331e:	f04f 0100 	mov.w	r1, #0
 8003322:	0159      	lsls	r1, r3, #5
 8003324:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003328:	0150      	lsls	r0, r2, #5
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4641      	mov	r1, r8
 8003330:	1a51      	subs	r1, r2, r1
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	4649      	mov	r1, r9
 8003336:	eb63 0301 	sbc.w	r3, r3, r1
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003348:	4659      	mov	r1, fp
 800334a:	018b      	lsls	r3, r1, #6
 800334c:	4651      	mov	r1, sl
 800334e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003352:	4651      	mov	r1, sl
 8003354:	018a      	lsls	r2, r1, #6
 8003356:	4651      	mov	r1, sl
 8003358:	1a54      	subs	r4, r2, r1
 800335a:	4659      	mov	r1, fp
 800335c:	eb63 0501 	sbc.w	r5, r3, r1
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	00eb      	lsls	r3, r5, #3
 800336a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800336e:	00e2      	lsls	r2, r4, #3
 8003370:	4614      	mov	r4, r2
 8003372:	461d      	mov	r5, r3
 8003374:	4643      	mov	r3, r8
 8003376:	18e3      	adds	r3, r4, r3
 8003378:	603b      	str	r3, [r7, #0]
 800337a:	464b      	mov	r3, r9
 800337c:	eb45 0303 	adc.w	r3, r5, r3
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800338e:	4629      	mov	r1, r5
 8003390:	028b      	lsls	r3, r1, #10
 8003392:	4621      	mov	r1, r4
 8003394:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003398:	4621      	mov	r1, r4
 800339a:	028a      	lsls	r2, r1, #10
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033a4:	2200      	movs	r2, #0
 80033a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033a8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80033aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80033ae:	f7fc ff87 	bl	80002c0 <__aeabi_uldivmod>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4613      	mov	r3, r2
 80033b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80033bc:	4b0d      	ldr	r3, [pc, #52]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	0f1b      	lsrs	r3, r3, #28
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80033ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80033d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033da:	e003      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033dc:	4b06      	ldr	r3, [pc, #24]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80033de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	37b8      	adds	r7, #184	@ 0xb8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800
 80033f8:	00f42400 	.word	0x00f42400

080033fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e28d      	b.n	800392a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 8083 	beq.w	8003522 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800341c:	4b94      	ldr	r3, [pc, #592]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 030c 	and.w	r3, r3, #12
 8003424:	2b04      	cmp	r3, #4
 8003426:	d019      	beq.n	800345c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003428:	4b91      	ldr	r3, [pc, #580]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003430:	2b08      	cmp	r3, #8
 8003432:	d106      	bne.n	8003442 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003434:	4b8e      	ldr	r3, [pc, #568]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800343c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003440:	d00c      	beq.n	800345c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003442:	4b8b      	ldr	r3, [pc, #556]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800344a:	2b0c      	cmp	r3, #12
 800344c:	d112      	bne.n	8003474 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800344e:	4b88      	ldr	r3, [pc, #544]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003456:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800345a:	d10b      	bne.n	8003474 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345c:	4b84      	ldr	r3, [pc, #528]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d05b      	beq.n	8003520 <HAL_RCC_OscConfig+0x124>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d157      	bne.n	8003520 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e25a      	b.n	800392a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800347c:	d106      	bne.n	800348c <HAL_RCC_OscConfig+0x90>
 800347e:	4b7c      	ldr	r3, [pc, #496]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a7b      	ldr	r2, [pc, #492]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 8003484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	e01d      	b.n	80034c8 <HAL_RCC_OscConfig+0xcc>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003494:	d10c      	bne.n	80034b0 <HAL_RCC_OscConfig+0xb4>
 8003496:	4b76      	ldr	r3, [pc, #472]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a75      	ldr	r2, [pc, #468]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 800349c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	4b73      	ldr	r3, [pc, #460]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a72      	ldr	r2, [pc, #456]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 80034a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	e00b      	b.n	80034c8 <HAL_RCC_OscConfig+0xcc>
 80034b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a6e      	ldr	r2, [pc, #440]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 80034b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ba:	6013      	str	r3, [r2, #0]
 80034bc:	4b6c      	ldr	r3, [pc, #432]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a6b      	ldr	r2, [pc, #428]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 80034c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d013      	beq.n	80034f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fe f804 	bl	80014dc <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d8:	f7fe f800 	bl	80014dc <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b64      	cmp	r3, #100	@ 0x64
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e21f      	b.n	800392a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ea:	4b61      	ldr	r3, [pc, #388]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0xdc>
 80034f6:	e014      	b.n	8003522 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7fd fff0 	bl	80014dc <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003500:	f7fd ffec 	bl	80014dc <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b64      	cmp	r3, #100	@ 0x64
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e20b      	b.n	800392a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003512:	4b57      	ldr	r3, [pc, #348]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x104>
 800351e:	e000      	b.n	8003522 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d06f      	beq.n	800360e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800352e:	4b50      	ldr	r3, [pc, #320]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
 8003536:	2b00      	cmp	r3, #0
 8003538:	d017      	beq.n	800356a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800353a:	4b4d      	ldr	r3, [pc, #308]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003542:	2b08      	cmp	r3, #8
 8003544:	d105      	bne.n	8003552 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003546:	4b4a      	ldr	r3, [pc, #296]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00b      	beq.n	800356a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003552:	4b47      	ldr	r3, [pc, #284]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800355a:	2b0c      	cmp	r3, #12
 800355c:	d11c      	bne.n	8003598 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800355e:	4b44      	ldr	r3, [pc, #272]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d116      	bne.n	8003598 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356a:	4b41      	ldr	r3, [pc, #260]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <HAL_RCC_OscConfig+0x186>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d001      	beq.n	8003582 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e1d3      	b.n	800392a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003582:	4b3b      	ldr	r3, [pc, #236]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4937      	ldr	r1, [pc, #220]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003596:	e03a      	b.n	800360e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d020      	beq.n	80035e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035a0:	4b34      	ldr	r3, [pc, #208]	@ (8003674 <HAL_RCC_OscConfig+0x278>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a6:	f7fd ff99 	bl	80014dc <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ae:	f7fd ff95 	bl	80014dc <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e1b4      	b.n	800392a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035cc:	4b28      	ldr	r3, [pc, #160]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4925      	ldr	r1, [pc, #148]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	600b      	str	r3, [r1, #0]
 80035e0:	e015      	b.n	800360e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035e2:	4b24      	ldr	r3, [pc, #144]	@ (8003674 <HAL_RCC_OscConfig+0x278>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fd ff78 	bl	80014dc <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f0:	f7fd ff74 	bl	80014dc <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e193      	b.n	800392a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003602:	4b1b      	ldr	r3, [pc, #108]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d036      	beq.n	8003688 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d016      	beq.n	8003650 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003622:	4b15      	ldr	r3, [pc, #84]	@ (8003678 <HAL_RCC_OscConfig+0x27c>)
 8003624:	2201      	movs	r2, #1
 8003626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fd ff58 	bl	80014dc <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003630:	f7fd ff54 	bl	80014dc <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e173      	b.n	800392a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003642:	4b0b      	ldr	r3, [pc, #44]	@ (8003670 <HAL_RCC_OscConfig+0x274>)
 8003644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0x234>
 800364e:	e01b      	b.n	8003688 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003650:	4b09      	ldr	r3, [pc, #36]	@ (8003678 <HAL_RCC_OscConfig+0x27c>)
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003656:	f7fd ff41 	bl	80014dc <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800365c:	e00e      	b.n	800367c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365e:	f7fd ff3d 	bl	80014dc <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d907      	bls.n	800367c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e15c      	b.n	800392a <HAL_RCC_OscConfig+0x52e>
 8003670:	40023800 	.word	0x40023800
 8003674:	42470000 	.word	0x42470000
 8003678:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800367c:	4b8a      	ldr	r3, [pc, #552]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 800367e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1ea      	bne.n	800365e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 8097 	beq.w	80037c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003696:	2300      	movs	r3, #0
 8003698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800369a:	4b83      	ldr	r3, [pc, #524]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10f      	bne.n	80036c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	4b7f      	ldr	r3, [pc, #508]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ae:	4a7e      	ldr	r2, [pc, #504]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 80036b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80036b6:	4b7c      	ldr	r3, [pc, #496]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036be:	60bb      	str	r3, [r7, #8]
 80036c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c2:	2301      	movs	r3, #1
 80036c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c6:	4b79      	ldr	r3, [pc, #484]	@ (80038ac <HAL_RCC_OscConfig+0x4b0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d118      	bne.n	8003704 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036d2:	4b76      	ldr	r3, [pc, #472]	@ (80038ac <HAL_RCC_OscConfig+0x4b0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a75      	ldr	r2, [pc, #468]	@ (80038ac <HAL_RCC_OscConfig+0x4b0>)
 80036d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036de:	f7fd fefd 	bl	80014dc <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e6:	f7fd fef9 	bl	80014dc <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e118      	b.n	800392a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f8:	4b6c      	ldr	r3, [pc, #432]	@ (80038ac <HAL_RCC_OscConfig+0x4b0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d106      	bne.n	800371a <HAL_RCC_OscConfig+0x31e>
 800370c:	4b66      	ldr	r3, [pc, #408]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003710:	4a65      	ldr	r2, [pc, #404]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6713      	str	r3, [r2, #112]	@ 0x70
 8003718:	e01c      	b.n	8003754 <HAL_RCC_OscConfig+0x358>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b05      	cmp	r3, #5
 8003720:	d10c      	bne.n	800373c <HAL_RCC_OscConfig+0x340>
 8003722:	4b61      	ldr	r3, [pc, #388]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003726:	4a60      	ldr	r2, [pc, #384]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 8003728:	f043 0304 	orr.w	r3, r3, #4
 800372c:	6713      	str	r3, [r2, #112]	@ 0x70
 800372e:	4b5e      	ldr	r3, [pc, #376]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 8003730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003732:	4a5d      	ldr	r2, [pc, #372]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	6713      	str	r3, [r2, #112]	@ 0x70
 800373a:	e00b      	b.n	8003754 <HAL_RCC_OscConfig+0x358>
 800373c:	4b5a      	ldr	r3, [pc, #360]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 800373e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003740:	4a59      	ldr	r2, [pc, #356]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 8003742:	f023 0301 	bic.w	r3, r3, #1
 8003746:	6713      	str	r3, [r2, #112]	@ 0x70
 8003748:	4b57      	ldr	r3, [pc, #348]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 800374a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800374c:	4a56      	ldr	r2, [pc, #344]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 800374e:	f023 0304 	bic.w	r3, r3, #4
 8003752:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d015      	beq.n	8003788 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375c:	f7fd febe 	bl	80014dc <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003762:	e00a      	b.n	800377a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003764:	f7fd feba 	bl	80014dc <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e0d7      	b.n	800392a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377a:	4b4b      	ldr	r3, [pc, #300]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0ee      	beq.n	8003764 <HAL_RCC_OscConfig+0x368>
 8003786:	e014      	b.n	80037b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003788:	f7fd fea8 	bl	80014dc <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800378e:	e00a      	b.n	80037a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003790:	f7fd fea4 	bl	80014dc <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800379e:	4293      	cmp	r3, r2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e0c1      	b.n	800392a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a6:	4b40      	ldr	r3, [pc, #256]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1ee      	bne.n	8003790 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d105      	bne.n	80037c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b8:	4b3b      	ldr	r3, [pc, #236]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 80037ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037bc:	4a3a      	ldr	r2, [pc, #232]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 80037be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80ad 	beq.w	8003928 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037ce:	4b36      	ldr	r3, [pc, #216]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d060      	beq.n	800389c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d145      	bne.n	800386e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e2:	4b33      	ldr	r3, [pc, #204]	@ (80038b0 <HAL_RCC_OscConfig+0x4b4>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e8:	f7fd fe78 	bl	80014dc <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f0:	f7fd fe74 	bl	80014dc <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e093      	b.n	800392a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003802:	4b29      	ldr	r3, [pc, #164]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f0      	bne.n	80037f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69da      	ldr	r2, [r3, #28]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	019b      	lsls	r3, r3, #6
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003824:	085b      	lsrs	r3, r3, #1
 8003826:	3b01      	subs	r3, #1
 8003828:	041b      	lsls	r3, r3, #16
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003830:	061b      	lsls	r3, r3, #24
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003838:	071b      	lsls	r3, r3, #28
 800383a:	491b      	ldr	r1, [pc, #108]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 800383c:	4313      	orrs	r3, r2
 800383e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003840:	4b1b      	ldr	r3, [pc, #108]	@ (80038b0 <HAL_RCC_OscConfig+0x4b4>)
 8003842:	2201      	movs	r2, #1
 8003844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003846:	f7fd fe49 	bl	80014dc <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384e:	f7fd fe45 	bl	80014dc <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e064      	b.n	800392a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003860:	4b11      	ldr	r3, [pc, #68]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f0      	beq.n	800384e <HAL_RCC_OscConfig+0x452>
 800386c:	e05c      	b.n	8003928 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386e:	4b10      	ldr	r3, [pc, #64]	@ (80038b0 <HAL_RCC_OscConfig+0x4b4>)
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fd fe32 	bl	80014dc <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387c:	f7fd fe2e 	bl	80014dc <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e04d      	b.n	800392a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388e:	4b06      	ldr	r3, [pc, #24]	@ (80038a8 <HAL_RCC_OscConfig+0x4ac>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0x480>
 800389a:	e045      	b.n	8003928 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d107      	bne.n	80038b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e040      	b.n	800392a <HAL_RCC_OscConfig+0x52e>
 80038a8:	40023800 	.word	0x40023800
 80038ac:	40007000 	.word	0x40007000
 80038b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003934 <HAL_RCC_OscConfig+0x538>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d030      	beq.n	8003924 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d129      	bne.n	8003924 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038da:	429a      	cmp	r2, r3
 80038dc:	d122      	bne.n	8003924 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038e4:	4013      	ands	r3, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d119      	bne.n	8003924 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fa:	085b      	lsrs	r3, r3, #1
 80038fc:	3b01      	subs	r3, #1
 80038fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003900:	429a      	cmp	r2, r3
 8003902:	d10f      	bne.n	8003924 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003910:	429a      	cmp	r2, r3
 8003912:	d107      	bne.n	8003924 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800

08003938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e041      	b.n	80039ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd fba8 	bl	80010b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3304      	adds	r3, #4
 8003974:	4619      	mov	r1, r3
 8003976:	4610      	mov	r0, r2
 8003978:	f000 fa1e 	bl	8003db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d001      	beq.n	80039f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e046      	b.n	8003a7e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a23      	ldr	r2, [pc, #140]	@ (8003a8c <HAL_TIM_Base_Start+0xb4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d022      	beq.n	8003a48 <HAL_TIM_Base_Start+0x70>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a0a:	d01d      	beq.n	8003a48 <HAL_TIM_Base_Start+0x70>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a1f      	ldr	r2, [pc, #124]	@ (8003a90 <HAL_TIM_Base_Start+0xb8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d018      	beq.n	8003a48 <HAL_TIM_Base_Start+0x70>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003a94 <HAL_TIM_Base_Start+0xbc>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d013      	beq.n	8003a48 <HAL_TIM_Base_Start+0x70>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1c      	ldr	r2, [pc, #112]	@ (8003a98 <HAL_TIM_Base_Start+0xc0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00e      	beq.n	8003a48 <HAL_TIM_Base_Start+0x70>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1b      	ldr	r2, [pc, #108]	@ (8003a9c <HAL_TIM_Base_Start+0xc4>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d009      	beq.n	8003a48 <HAL_TIM_Base_Start+0x70>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a19      	ldr	r2, [pc, #100]	@ (8003aa0 <HAL_TIM_Base_Start+0xc8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d004      	beq.n	8003a48 <HAL_TIM_Base_Start+0x70>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a18      	ldr	r2, [pc, #96]	@ (8003aa4 <HAL_TIM_Base_Start+0xcc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d111      	bne.n	8003a6c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b06      	cmp	r3, #6
 8003a58:	d010      	beq.n	8003a7c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 0201 	orr.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a6a:	e007      	b.n	8003a7c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40010000 	.word	0x40010000
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800
 8003a98:	40000c00 	.word	0x40000c00
 8003a9c:	40010400 	.word	0x40010400
 8003aa0:	40014000 	.word	0x40014000
 8003aa4:	40001800 	.word	0x40001800

08003aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d001      	beq.n	8003ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e04e      	b.n	8003b5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a23      	ldr	r2, [pc, #140]	@ (8003b6c <HAL_TIM_Base_Start_IT+0xc4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d022      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x80>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aea:	d01d      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x80>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a1f      	ldr	r2, [pc, #124]	@ (8003b70 <HAL_TIM_Base_Start_IT+0xc8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d018      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x80>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a1e      	ldr	r2, [pc, #120]	@ (8003b74 <HAL_TIM_Base_Start_IT+0xcc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d013      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x80>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1c      	ldr	r2, [pc, #112]	@ (8003b78 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00e      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x80>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8003b7c <HAL_TIM_Base_Start_IT+0xd4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d009      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x80>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a19      	ldr	r2, [pc, #100]	@ (8003b80 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d004      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x80>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a18      	ldr	r2, [pc, #96]	@ (8003b84 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d111      	bne.n	8003b4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b06      	cmp	r3, #6
 8003b38:	d010      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0201 	orr.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b4a:	e007      	b.n	8003b5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40010000 	.word	0x40010000
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40000800 	.word	0x40000800
 8003b78:	40000c00 	.word	0x40000c00
 8003b7c:	40010400 	.word	0x40010400
 8003b80:	40014000 	.word	0x40014000
 8003b84:	40001800 	.word	0x40001800

08003b88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d020      	beq.n	8003bec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01b      	beq.n	8003bec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0202 	mvn.w	r2, #2
 8003bbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f8d2 	bl	8003d7c <HAL_TIM_IC_CaptureCallback>
 8003bd8:	e005      	b.n	8003be6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f8c4 	bl	8003d68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f8d5 	bl	8003d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d020      	beq.n	8003c38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d01b      	beq.n	8003c38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0204 	mvn.w	r2, #4
 8003c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f8ac 	bl	8003d7c <HAL_TIM_IC_CaptureCallback>
 8003c24:	e005      	b.n	8003c32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f89e 	bl	8003d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f8af 	bl	8003d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d020      	beq.n	8003c84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d01b      	beq.n	8003c84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0208 	mvn.w	r2, #8
 8003c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2204      	movs	r2, #4
 8003c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f886 	bl	8003d7c <HAL_TIM_IC_CaptureCallback>
 8003c70:	e005      	b.n	8003c7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f878 	bl	8003d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f889 	bl	8003d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d020      	beq.n	8003cd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f003 0310 	and.w	r3, r3, #16
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01b      	beq.n	8003cd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f06f 0210 	mvn.w	r2, #16
 8003ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2208      	movs	r2, #8
 8003ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f860 	bl	8003d7c <HAL_TIM_IC_CaptureCallback>
 8003cbc:	e005      	b.n	8003cca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f852 	bl	8003d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f863 	bl	8003d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00c      	beq.n	8003cf4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d007      	beq.n	8003cf4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f06f 0201 	mvn.w	r2, #1
 8003cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fd f8ea 	bl	8000ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00c      	beq.n	8003d18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d007      	beq.n	8003d18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f982 	bl	800401c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00c      	beq.n	8003d3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d007      	beq.n	8003d3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f834 	bl	8003da4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f003 0320 	and.w	r3, r3, #32
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00c      	beq.n	8003d60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0220 	mvn.w	r2, #32
 8003d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f954 	bl	8004008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d60:	bf00      	nop
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a46      	ldr	r2, [pc, #280]	@ (8003ee4 <TIM_Base_SetConfig+0x12c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d013      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dd6:	d00f      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a43      	ldr	r2, [pc, #268]	@ (8003ee8 <TIM_Base_SetConfig+0x130>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d00b      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a42      	ldr	r2, [pc, #264]	@ (8003eec <TIM_Base_SetConfig+0x134>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d007      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a41      	ldr	r2, [pc, #260]	@ (8003ef0 <TIM_Base_SetConfig+0x138>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d003      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a40      	ldr	r2, [pc, #256]	@ (8003ef4 <TIM_Base_SetConfig+0x13c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d108      	bne.n	8003e0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a35      	ldr	r2, [pc, #212]	@ (8003ee4 <TIM_Base_SetConfig+0x12c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d02b      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e18:	d027      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a32      	ldr	r2, [pc, #200]	@ (8003ee8 <TIM_Base_SetConfig+0x130>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d023      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a31      	ldr	r2, [pc, #196]	@ (8003eec <TIM_Base_SetConfig+0x134>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d01f      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a30      	ldr	r2, [pc, #192]	@ (8003ef0 <TIM_Base_SetConfig+0x138>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d01b      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a2f      	ldr	r2, [pc, #188]	@ (8003ef4 <TIM_Base_SetConfig+0x13c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d017      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a2e      	ldr	r2, [pc, #184]	@ (8003ef8 <TIM_Base_SetConfig+0x140>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d013      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a2d      	ldr	r2, [pc, #180]	@ (8003efc <TIM_Base_SetConfig+0x144>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00f      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a2c      	ldr	r2, [pc, #176]	@ (8003f00 <TIM_Base_SetConfig+0x148>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00b      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a2b      	ldr	r2, [pc, #172]	@ (8003f04 <TIM_Base_SetConfig+0x14c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d007      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a2a      	ldr	r2, [pc, #168]	@ (8003f08 <TIM_Base_SetConfig+0x150>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d003      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a29      	ldr	r2, [pc, #164]	@ (8003f0c <TIM_Base_SetConfig+0x154>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d108      	bne.n	8003e7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a10      	ldr	r2, [pc, #64]	@ (8003ee4 <TIM_Base_SetConfig+0x12c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d003      	beq.n	8003eb0 <TIM_Base_SetConfig+0xf8>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a12      	ldr	r2, [pc, #72]	@ (8003ef4 <TIM_Base_SetConfig+0x13c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d103      	bne.n	8003eb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d105      	bne.n	8003ed6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f023 0201 	bic.w	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	611a      	str	r2, [r3, #16]
  }
}
 8003ed6:	bf00      	nop
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40010000 	.word	0x40010000
 8003ee8:	40000400 	.word	0x40000400
 8003eec:	40000800 	.word	0x40000800
 8003ef0:	40000c00 	.word	0x40000c00
 8003ef4:	40010400 	.word	0x40010400
 8003ef8:	40014000 	.word	0x40014000
 8003efc:	40014400 	.word	0x40014400
 8003f00:	40014800 	.word	0x40014800
 8003f04:	40001800 	.word	0x40001800
 8003f08:	40001c00 	.word	0x40001c00
 8003f0c:	40002000 	.word	0x40002000

08003f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e05a      	b.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a21      	ldr	r2, [pc, #132]	@ (8003fec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d022      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f74:	d01d      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d018      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d013      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00e      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a18      	ldr	r2, [pc, #96]	@ (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d009      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a17      	ldr	r2, [pc, #92]	@ (8004000 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d004      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a15      	ldr	r2, [pc, #84]	@ (8004004 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d10c      	bne.n	8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40010000 	.word	0x40010000
 8003ff0:	40000400 	.word	0x40000400
 8003ff4:	40000800 	.word	0x40000800
 8003ff8:	40000c00 	.word	0x40000c00
 8003ffc:	40010400 	.word	0x40010400
 8004000:	40014000 	.word	0x40014000
 8004004:	40001800 	.word	0x40001800

08004008 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e042      	b.n	80040c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fd f8be 	bl	80011d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2224      	movs	r2, #36	@ 0x24
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004072:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f973 	bl	8004360 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004088:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695a      	ldr	r2, [r3, #20]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004098:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08a      	sub	sp, #40	@ 0x28
 80040d4:	af02      	add	r7, sp, #8
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	d175      	bne.n	80041dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <HAL_UART_Transmit+0x2c>
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e06e      	b.n	80041de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2221      	movs	r2, #33	@ 0x21
 800410a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800410e:	f7fd f9e5 	bl	80014dc <HAL_GetTick>
 8004112:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	88fa      	ldrh	r2, [r7, #6]
 8004118:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	88fa      	ldrh	r2, [r7, #6]
 800411e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004128:	d108      	bne.n	800413c <HAL_UART_Transmit+0x6c>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d104      	bne.n	800413c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004132:	2300      	movs	r3, #0
 8004134:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	e003      	b.n	8004144 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004140:	2300      	movs	r3, #0
 8004142:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004144:	e02e      	b.n	80041a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2200      	movs	r2, #0
 800414e:	2180      	movs	r1, #128	@ 0x80
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f848 	bl	80041e6 <UART_WaitOnFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e03a      	b.n	80041de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10b      	bne.n	8004186 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800417c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	3302      	adds	r3, #2
 8004182:	61bb      	str	r3, [r7, #24]
 8004184:	e007      	b.n	8004196 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	781a      	ldrb	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	3301      	adds	r3, #1
 8004194:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1cb      	bne.n	8004146 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2200      	movs	r2, #0
 80041b6:	2140      	movs	r1, #64	@ 0x40
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f814 	bl	80041e6 <UART_WaitOnFlagUntilTimeout>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e006      	b.n	80041de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	e000      	b.n	80041de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80041dc:	2302      	movs	r3, #2
  }
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3720      	adds	r7, #32
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b086      	sub	sp, #24
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	603b      	str	r3, [r7, #0]
 80041f2:	4613      	mov	r3, r2
 80041f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f6:	e03b      	b.n	8004270 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fe:	d037      	beq.n	8004270 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004200:	f7fd f96c 	bl	80014dc <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	6a3a      	ldr	r2, [r7, #32]
 800420c:	429a      	cmp	r2, r3
 800420e:	d302      	bcc.n	8004216 <UART_WaitOnFlagUntilTimeout+0x30>
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e03a      	b.n	8004290 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d023      	beq.n	8004270 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b80      	cmp	r3, #128	@ 0x80
 800422c:	d020      	beq.n	8004270 <UART_WaitOnFlagUntilTimeout+0x8a>
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b40      	cmp	r3, #64	@ 0x40
 8004232:	d01d      	beq.n	8004270 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b08      	cmp	r3, #8
 8004240:	d116      	bne.n	8004270 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	617b      	str	r3, [r7, #20]
 8004256:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f81d 	bl	8004298 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2208      	movs	r2, #8
 8004262:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e00f      	b.n	8004290 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	4013      	ands	r3, r2
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	429a      	cmp	r2, r3
 800427e:	bf0c      	ite	eq
 8004280:	2301      	moveq	r3, #1
 8004282:	2300      	movne	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	461a      	mov	r2, r3
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	429a      	cmp	r2, r3
 800428c:	d0b4      	beq.n	80041f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004298:	b480      	push	{r7}
 800429a:	b095      	sub	sp, #84	@ 0x54
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	330c      	adds	r3, #12
 80042a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042aa:	e853 3f00 	ldrex	r3, [r3]
 80042ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	330c      	adds	r3, #12
 80042be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80042c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042c8:	e841 2300 	strex	r3, r2, [r1]
 80042cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1e5      	bne.n	80042a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3314      	adds	r3, #20
 80042da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	e853 3f00 	ldrex	r3, [r3]
 80042e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f023 0301 	bic.w	r3, r3, #1
 80042ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3314      	adds	r3, #20
 80042f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042fc:	e841 2300 	strex	r3, r2, [r1]
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e5      	bne.n	80042d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430c:	2b01      	cmp	r3, #1
 800430e:	d119      	bne.n	8004344 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	330c      	adds	r3, #12
 8004316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f023 0310 	bic.w	r3, r3, #16
 8004326:	647b      	str	r3, [r7, #68]	@ 0x44
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	330c      	adds	r3, #12
 800432e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004330:	61ba      	str	r2, [r7, #24]
 8004332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6979      	ldr	r1, [r7, #20]
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	613b      	str	r3, [r7, #16]
   return(result);
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e5      	bne.n	8004310 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004352:	bf00      	nop
 8004354:	3754      	adds	r7, #84	@ 0x54
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
	...

08004360 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004364:	b0c0      	sub	sp, #256	@ 0x100
 8004366:	af00      	add	r7, sp, #0
 8004368:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437c:	68d9      	ldr	r1, [r3, #12]
 800437e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	ea40 0301 	orr.w	r3, r0, r1
 8004388:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800438a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	431a      	orrs	r2, r3
 8004398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	431a      	orrs	r2, r3
 80043a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80043b8:	f021 010c 	bic.w	r1, r1, #12
 80043bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80043c6:	430b      	orrs	r3, r1
 80043c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80043d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043da:	6999      	ldr	r1, [r3, #24]
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	ea40 0301 	orr.w	r3, r0, r1
 80043e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	4b8f      	ldr	r3, [pc, #572]	@ (800462c <UART_SetConfig+0x2cc>)
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d005      	beq.n	8004400 <UART_SetConfig+0xa0>
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	4b8d      	ldr	r3, [pc, #564]	@ (8004630 <UART_SetConfig+0x2d0>)
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d104      	bne.n	800440a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004400:	f7fe fdb8 	bl	8002f74 <HAL_RCC_GetPCLK2Freq>
 8004404:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004408:	e003      	b.n	8004412 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800440a:	f7fe fd9f 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 800440e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800441c:	f040 810c 	bne.w	8004638 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004420:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004424:	2200      	movs	r2, #0
 8004426:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800442a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800442e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004432:	4622      	mov	r2, r4
 8004434:	462b      	mov	r3, r5
 8004436:	1891      	adds	r1, r2, r2
 8004438:	65b9      	str	r1, [r7, #88]	@ 0x58
 800443a:	415b      	adcs	r3, r3
 800443c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800443e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004442:	4621      	mov	r1, r4
 8004444:	eb12 0801 	adds.w	r8, r2, r1
 8004448:	4629      	mov	r1, r5
 800444a:	eb43 0901 	adc.w	r9, r3, r1
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	f04f 0300 	mov.w	r3, #0
 8004456:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800445a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800445e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004462:	4690      	mov	r8, r2
 8004464:	4699      	mov	r9, r3
 8004466:	4623      	mov	r3, r4
 8004468:	eb18 0303 	adds.w	r3, r8, r3
 800446c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004470:	462b      	mov	r3, r5
 8004472:	eb49 0303 	adc.w	r3, r9, r3
 8004476:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800447a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004486:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800448a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800448e:	460b      	mov	r3, r1
 8004490:	18db      	adds	r3, r3, r3
 8004492:	653b      	str	r3, [r7, #80]	@ 0x50
 8004494:	4613      	mov	r3, r2
 8004496:	eb42 0303 	adc.w	r3, r2, r3
 800449a:	657b      	str	r3, [r7, #84]	@ 0x54
 800449c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80044a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80044a4:	f7fb ff0c 	bl	80002c0 <__aeabi_uldivmod>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	4b61      	ldr	r3, [pc, #388]	@ (8004634 <UART_SetConfig+0x2d4>)
 80044ae:	fba3 2302 	umull	r2, r3, r3, r2
 80044b2:	095b      	lsrs	r3, r3, #5
 80044b4:	011c      	lsls	r4, r3, #4
 80044b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80044c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80044c8:	4642      	mov	r2, r8
 80044ca:	464b      	mov	r3, r9
 80044cc:	1891      	adds	r1, r2, r2
 80044ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80044d0:	415b      	adcs	r3, r3
 80044d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80044d8:	4641      	mov	r1, r8
 80044da:	eb12 0a01 	adds.w	sl, r2, r1
 80044de:	4649      	mov	r1, r9
 80044e0:	eb43 0b01 	adc.w	fp, r3, r1
 80044e4:	f04f 0200 	mov.w	r2, #0
 80044e8:	f04f 0300 	mov.w	r3, #0
 80044ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044f8:	4692      	mov	sl, r2
 80044fa:	469b      	mov	fp, r3
 80044fc:	4643      	mov	r3, r8
 80044fe:	eb1a 0303 	adds.w	r3, sl, r3
 8004502:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004506:	464b      	mov	r3, r9
 8004508:	eb4b 0303 	adc.w	r3, fp, r3
 800450c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800451c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004520:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004524:	460b      	mov	r3, r1
 8004526:	18db      	adds	r3, r3, r3
 8004528:	643b      	str	r3, [r7, #64]	@ 0x40
 800452a:	4613      	mov	r3, r2
 800452c:	eb42 0303 	adc.w	r3, r2, r3
 8004530:	647b      	str	r3, [r7, #68]	@ 0x44
 8004532:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004536:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800453a:	f7fb fec1 	bl	80002c0 <__aeabi_uldivmod>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4611      	mov	r1, r2
 8004544:	4b3b      	ldr	r3, [pc, #236]	@ (8004634 <UART_SetConfig+0x2d4>)
 8004546:	fba3 2301 	umull	r2, r3, r3, r1
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	2264      	movs	r2, #100	@ 0x64
 800454e:	fb02 f303 	mul.w	r3, r2, r3
 8004552:	1acb      	subs	r3, r1, r3
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800455a:	4b36      	ldr	r3, [pc, #216]	@ (8004634 <UART_SetConfig+0x2d4>)
 800455c:	fba3 2302 	umull	r2, r3, r3, r2
 8004560:	095b      	lsrs	r3, r3, #5
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004568:	441c      	add	r4, r3
 800456a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800456e:	2200      	movs	r2, #0
 8004570:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004574:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004578:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800457c:	4642      	mov	r2, r8
 800457e:	464b      	mov	r3, r9
 8004580:	1891      	adds	r1, r2, r2
 8004582:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004584:	415b      	adcs	r3, r3
 8004586:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004588:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800458c:	4641      	mov	r1, r8
 800458e:	1851      	adds	r1, r2, r1
 8004590:	6339      	str	r1, [r7, #48]	@ 0x30
 8004592:	4649      	mov	r1, r9
 8004594:	414b      	adcs	r3, r1
 8004596:	637b      	str	r3, [r7, #52]	@ 0x34
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80045a4:	4659      	mov	r1, fp
 80045a6:	00cb      	lsls	r3, r1, #3
 80045a8:	4651      	mov	r1, sl
 80045aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ae:	4651      	mov	r1, sl
 80045b0:	00ca      	lsls	r2, r1, #3
 80045b2:	4610      	mov	r0, r2
 80045b4:	4619      	mov	r1, r3
 80045b6:	4603      	mov	r3, r0
 80045b8:	4642      	mov	r2, r8
 80045ba:	189b      	adds	r3, r3, r2
 80045bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045c0:	464b      	mov	r3, r9
 80045c2:	460a      	mov	r2, r1
 80045c4:	eb42 0303 	adc.w	r3, r2, r3
 80045c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80045dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80045e0:	460b      	mov	r3, r1
 80045e2:	18db      	adds	r3, r3, r3
 80045e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045e6:	4613      	mov	r3, r2
 80045e8:	eb42 0303 	adc.w	r3, r2, r3
 80045ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80045f6:	f7fb fe63 	bl	80002c0 <__aeabi_uldivmod>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004634 <UART_SetConfig+0x2d4>)
 8004600:	fba3 1302 	umull	r1, r3, r3, r2
 8004604:	095b      	lsrs	r3, r3, #5
 8004606:	2164      	movs	r1, #100	@ 0x64
 8004608:	fb01 f303 	mul.w	r3, r1, r3
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	3332      	adds	r3, #50	@ 0x32
 8004612:	4a08      	ldr	r2, [pc, #32]	@ (8004634 <UART_SetConfig+0x2d4>)
 8004614:	fba2 2303 	umull	r2, r3, r2, r3
 8004618:	095b      	lsrs	r3, r3, #5
 800461a:	f003 0207 	and.w	r2, r3, #7
 800461e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4422      	add	r2, r4
 8004626:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004628:	e106      	b.n	8004838 <UART_SetConfig+0x4d8>
 800462a:	bf00      	nop
 800462c:	40011000 	.word	0x40011000
 8004630:	40011400 	.word	0x40011400
 8004634:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800463c:	2200      	movs	r2, #0
 800463e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004642:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004646:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800464a:	4642      	mov	r2, r8
 800464c:	464b      	mov	r3, r9
 800464e:	1891      	adds	r1, r2, r2
 8004650:	6239      	str	r1, [r7, #32]
 8004652:	415b      	adcs	r3, r3
 8004654:	627b      	str	r3, [r7, #36]	@ 0x24
 8004656:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800465a:	4641      	mov	r1, r8
 800465c:	1854      	adds	r4, r2, r1
 800465e:	4649      	mov	r1, r9
 8004660:	eb43 0501 	adc.w	r5, r3, r1
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	00eb      	lsls	r3, r5, #3
 800466e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004672:	00e2      	lsls	r2, r4, #3
 8004674:	4614      	mov	r4, r2
 8004676:	461d      	mov	r5, r3
 8004678:	4643      	mov	r3, r8
 800467a:	18e3      	adds	r3, r4, r3
 800467c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004680:	464b      	mov	r3, r9
 8004682:	eb45 0303 	adc.w	r3, r5, r3
 8004686:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800468a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004696:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800469a:	f04f 0200 	mov.w	r2, #0
 800469e:	f04f 0300 	mov.w	r3, #0
 80046a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80046a6:	4629      	mov	r1, r5
 80046a8:	008b      	lsls	r3, r1, #2
 80046aa:	4621      	mov	r1, r4
 80046ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046b0:	4621      	mov	r1, r4
 80046b2:	008a      	lsls	r2, r1, #2
 80046b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80046b8:	f7fb fe02 	bl	80002c0 <__aeabi_uldivmod>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4b60      	ldr	r3, [pc, #384]	@ (8004844 <UART_SetConfig+0x4e4>)
 80046c2:	fba3 2302 	umull	r2, r3, r3, r2
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	011c      	lsls	r4, r3, #4
 80046ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046ce:	2200      	movs	r2, #0
 80046d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80046d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80046dc:	4642      	mov	r2, r8
 80046de:	464b      	mov	r3, r9
 80046e0:	1891      	adds	r1, r2, r2
 80046e2:	61b9      	str	r1, [r7, #24]
 80046e4:	415b      	adcs	r3, r3
 80046e6:	61fb      	str	r3, [r7, #28]
 80046e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046ec:	4641      	mov	r1, r8
 80046ee:	1851      	adds	r1, r2, r1
 80046f0:	6139      	str	r1, [r7, #16]
 80046f2:	4649      	mov	r1, r9
 80046f4:	414b      	adcs	r3, r1
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004704:	4659      	mov	r1, fp
 8004706:	00cb      	lsls	r3, r1, #3
 8004708:	4651      	mov	r1, sl
 800470a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800470e:	4651      	mov	r1, sl
 8004710:	00ca      	lsls	r2, r1, #3
 8004712:	4610      	mov	r0, r2
 8004714:	4619      	mov	r1, r3
 8004716:	4603      	mov	r3, r0
 8004718:	4642      	mov	r2, r8
 800471a:	189b      	adds	r3, r3, r2
 800471c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004720:	464b      	mov	r3, r9
 8004722:	460a      	mov	r2, r1
 8004724:	eb42 0303 	adc.w	r3, r2, r3
 8004728:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800472c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004736:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004744:	4649      	mov	r1, r9
 8004746:	008b      	lsls	r3, r1, #2
 8004748:	4641      	mov	r1, r8
 800474a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800474e:	4641      	mov	r1, r8
 8004750:	008a      	lsls	r2, r1, #2
 8004752:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004756:	f7fb fdb3 	bl	80002c0 <__aeabi_uldivmod>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4611      	mov	r1, r2
 8004760:	4b38      	ldr	r3, [pc, #224]	@ (8004844 <UART_SetConfig+0x4e4>)
 8004762:	fba3 2301 	umull	r2, r3, r3, r1
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	2264      	movs	r2, #100	@ 0x64
 800476a:	fb02 f303 	mul.w	r3, r2, r3
 800476e:	1acb      	subs	r3, r1, r3
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	3332      	adds	r3, #50	@ 0x32
 8004774:	4a33      	ldr	r2, [pc, #204]	@ (8004844 <UART_SetConfig+0x4e4>)
 8004776:	fba2 2303 	umull	r2, r3, r2, r3
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004780:	441c      	add	r4, r3
 8004782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004786:	2200      	movs	r2, #0
 8004788:	673b      	str	r3, [r7, #112]	@ 0x70
 800478a:	677a      	str	r2, [r7, #116]	@ 0x74
 800478c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004790:	4642      	mov	r2, r8
 8004792:	464b      	mov	r3, r9
 8004794:	1891      	adds	r1, r2, r2
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	415b      	adcs	r3, r3
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047a0:	4641      	mov	r1, r8
 80047a2:	1851      	adds	r1, r2, r1
 80047a4:	6039      	str	r1, [r7, #0]
 80047a6:	4649      	mov	r1, r9
 80047a8:	414b      	adcs	r3, r1
 80047aa:	607b      	str	r3, [r7, #4]
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047b8:	4659      	mov	r1, fp
 80047ba:	00cb      	lsls	r3, r1, #3
 80047bc:	4651      	mov	r1, sl
 80047be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047c2:	4651      	mov	r1, sl
 80047c4:	00ca      	lsls	r2, r1, #3
 80047c6:	4610      	mov	r0, r2
 80047c8:	4619      	mov	r1, r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	4642      	mov	r2, r8
 80047ce:	189b      	adds	r3, r3, r2
 80047d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047d2:	464b      	mov	r3, r9
 80047d4:	460a      	mov	r2, r1
 80047d6:	eb42 0303 	adc.w	r3, r2, r3
 80047da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80047e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80047f4:	4649      	mov	r1, r9
 80047f6:	008b      	lsls	r3, r1, #2
 80047f8:	4641      	mov	r1, r8
 80047fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047fe:	4641      	mov	r1, r8
 8004800:	008a      	lsls	r2, r1, #2
 8004802:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004806:	f7fb fd5b 	bl	80002c0 <__aeabi_uldivmod>
 800480a:	4602      	mov	r2, r0
 800480c:	460b      	mov	r3, r1
 800480e:	4b0d      	ldr	r3, [pc, #52]	@ (8004844 <UART_SetConfig+0x4e4>)
 8004810:	fba3 1302 	umull	r1, r3, r3, r2
 8004814:	095b      	lsrs	r3, r3, #5
 8004816:	2164      	movs	r1, #100	@ 0x64
 8004818:	fb01 f303 	mul.w	r3, r1, r3
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	3332      	adds	r3, #50	@ 0x32
 8004822:	4a08      	ldr	r2, [pc, #32]	@ (8004844 <UART_SetConfig+0x4e4>)
 8004824:	fba2 2303 	umull	r2, r3, r2, r3
 8004828:	095b      	lsrs	r3, r3, #5
 800482a:	f003 020f 	and.w	r2, r3, #15
 800482e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4422      	add	r2, r4
 8004836:	609a      	str	r2, [r3, #8]
}
 8004838:	bf00      	nop
 800483a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800483e:	46bd      	mov	sp, r7
 8004840:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004844:	51eb851f 	.word	0x51eb851f

08004848 <siprintf>:
 8004848:	b40e      	push	{r1, r2, r3}
 800484a:	b500      	push	{lr}
 800484c:	b09c      	sub	sp, #112	@ 0x70
 800484e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004850:	9002      	str	r0, [sp, #8]
 8004852:	9006      	str	r0, [sp, #24]
 8004854:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004858:	4809      	ldr	r0, [pc, #36]	@ (8004880 <siprintf+0x38>)
 800485a:	9107      	str	r1, [sp, #28]
 800485c:	9104      	str	r1, [sp, #16]
 800485e:	4909      	ldr	r1, [pc, #36]	@ (8004884 <siprintf+0x3c>)
 8004860:	f853 2b04 	ldr.w	r2, [r3], #4
 8004864:	9105      	str	r1, [sp, #20]
 8004866:	6800      	ldr	r0, [r0, #0]
 8004868:	9301      	str	r3, [sp, #4]
 800486a:	a902      	add	r1, sp, #8
 800486c:	f000 f994 	bl	8004b98 <_svfiprintf_r>
 8004870:	9b02      	ldr	r3, [sp, #8]
 8004872:	2200      	movs	r2, #0
 8004874:	701a      	strb	r2, [r3, #0]
 8004876:	b01c      	add	sp, #112	@ 0x70
 8004878:	f85d eb04 	ldr.w	lr, [sp], #4
 800487c:	b003      	add	sp, #12
 800487e:	4770      	bx	lr
 8004880:	20000010 	.word	0x20000010
 8004884:	ffff0208 	.word	0xffff0208

08004888 <memset>:
 8004888:	4402      	add	r2, r0
 800488a:	4603      	mov	r3, r0
 800488c:	4293      	cmp	r3, r2
 800488e:	d100      	bne.n	8004892 <memset+0xa>
 8004890:	4770      	bx	lr
 8004892:	f803 1b01 	strb.w	r1, [r3], #1
 8004896:	e7f9      	b.n	800488c <memset+0x4>

08004898 <__errno>:
 8004898:	4b01      	ldr	r3, [pc, #4]	@ (80048a0 <__errno+0x8>)
 800489a:	6818      	ldr	r0, [r3, #0]
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20000010 	.word	0x20000010

080048a4 <__libc_init_array>:
 80048a4:	b570      	push	{r4, r5, r6, lr}
 80048a6:	4d0d      	ldr	r5, [pc, #52]	@ (80048dc <__libc_init_array+0x38>)
 80048a8:	4c0d      	ldr	r4, [pc, #52]	@ (80048e0 <__libc_init_array+0x3c>)
 80048aa:	1b64      	subs	r4, r4, r5
 80048ac:	10a4      	asrs	r4, r4, #2
 80048ae:	2600      	movs	r6, #0
 80048b0:	42a6      	cmp	r6, r4
 80048b2:	d109      	bne.n	80048c8 <__libc_init_array+0x24>
 80048b4:	4d0b      	ldr	r5, [pc, #44]	@ (80048e4 <__libc_init_array+0x40>)
 80048b6:	4c0c      	ldr	r4, [pc, #48]	@ (80048e8 <__libc_init_array+0x44>)
 80048b8:	f000 fc66 	bl	8005188 <_init>
 80048bc:	1b64      	subs	r4, r4, r5
 80048be:	10a4      	asrs	r4, r4, #2
 80048c0:	2600      	movs	r6, #0
 80048c2:	42a6      	cmp	r6, r4
 80048c4:	d105      	bne.n	80048d2 <__libc_init_array+0x2e>
 80048c6:	bd70      	pop	{r4, r5, r6, pc}
 80048c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048cc:	4798      	blx	r3
 80048ce:	3601      	adds	r6, #1
 80048d0:	e7ee      	b.n	80048b0 <__libc_init_array+0xc>
 80048d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d6:	4798      	blx	r3
 80048d8:	3601      	adds	r6, #1
 80048da:	e7f2      	b.n	80048c2 <__libc_init_array+0x1e>
 80048dc:	0800522c 	.word	0x0800522c
 80048e0:	0800522c 	.word	0x0800522c
 80048e4:	0800522c 	.word	0x0800522c
 80048e8:	08005230 	.word	0x08005230

080048ec <__retarget_lock_acquire_recursive>:
 80048ec:	4770      	bx	lr

080048ee <__retarget_lock_release_recursive>:
 80048ee:	4770      	bx	lr

080048f0 <_free_r>:
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	4605      	mov	r5, r0
 80048f4:	2900      	cmp	r1, #0
 80048f6:	d041      	beq.n	800497c <_free_r+0x8c>
 80048f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048fc:	1f0c      	subs	r4, r1, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	bfb8      	it	lt
 8004902:	18e4      	addlt	r4, r4, r3
 8004904:	f000 f8e0 	bl	8004ac8 <__malloc_lock>
 8004908:	4a1d      	ldr	r2, [pc, #116]	@ (8004980 <_free_r+0x90>)
 800490a:	6813      	ldr	r3, [r2, #0]
 800490c:	b933      	cbnz	r3, 800491c <_free_r+0x2c>
 800490e:	6063      	str	r3, [r4, #4]
 8004910:	6014      	str	r4, [r2, #0]
 8004912:	4628      	mov	r0, r5
 8004914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004918:	f000 b8dc 	b.w	8004ad4 <__malloc_unlock>
 800491c:	42a3      	cmp	r3, r4
 800491e:	d908      	bls.n	8004932 <_free_r+0x42>
 8004920:	6820      	ldr	r0, [r4, #0]
 8004922:	1821      	adds	r1, r4, r0
 8004924:	428b      	cmp	r3, r1
 8004926:	bf01      	itttt	eq
 8004928:	6819      	ldreq	r1, [r3, #0]
 800492a:	685b      	ldreq	r3, [r3, #4]
 800492c:	1809      	addeq	r1, r1, r0
 800492e:	6021      	streq	r1, [r4, #0]
 8004930:	e7ed      	b.n	800490e <_free_r+0x1e>
 8004932:	461a      	mov	r2, r3
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	b10b      	cbz	r3, 800493c <_free_r+0x4c>
 8004938:	42a3      	cmp	r3, r4
 800493a:	d9fa      	bls.n	8004932 <_free_r+0x42>
 800493c:	6811      	ldr	r1, [r2, #0]
 800493e:	1850      	adds	r0, r2, r1
 8004940:	42a0      	cmp	r0, r4
 8004942:	d10b      	bne.n	800495c <_free_r+0x6c>
 8004944:	6820      	ldr	r0, [r4, #0]
 8004946:	4401      	add	r1, r0
 8004948:	1850      	adds	r0, r2, r1
 800494a:	4283      	cmp	r3, r0
 800494c:	6011      	str	r1, [r2, #0]
 800494e:	d1e0      	bne.n	8004912 <_free_r+0x22>
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	6053      	str	r3, [r2, #4]
 8004956:	4408      	add	r0, r1
 8004958:	6010      	str	r0, [r2, #0]
 800495a:	e7da      	b.n	8004912 <_free_r+0x22>
 800495c:	d902      	bls.n	8004964 <_free_r+0x74>
 800495e:	230c      	movs	r3, #12
 8004960:	602b      	str	r3, [r5, #0]
 8004962:	e7d6      	b.n	8004912 <_free_r+0x22>
 8004964:	6820      	ldr	r0, [r4, #0]
 8004966:	1821      	adds	r1, r4, r0
 8004968:	428b      	cmp	r3, r1
 800496a:	bf04      	itt	eq
 800496c:	6819      	ldreq	r1, [r3, #0]
 800496e:	685b      	ldreq	r3, [r3, #4]
 8004970:	6063      	str	r3, [r4, #4]
 8004972:	bf04      	itt	eq
 8004974:	1809      	addeq	r1, r1, r0
 8004976:	6021      	streq	r1, [r4, #0]
 8004978:	6054      	str	r4, [r2, #4]
 800497a:	e7ca      	b.n	8004912 <_free_r+0x22>
 800497c:	bd38      	pop	{r3, r4, r5, pc}
 800497e:	bf00      	nop
 8004980:	20000414 	.word	0x20000414

08004984 <sbrk_aligned>:
 8004984:	b570      	push	{r4, r5, r6, lr}
 8004986:	4e0f      	ldr	r6, [pc, #60]	@ (80049c4 <sbrk_aligned+0x40>)
 8004988:	460c      	mov	r4, r1
 800498a:	6831      	ldr	r1, [r6, #0]
 800498c:	4605      	mov	r5, r0
 800498e:	b911      	cbnz	r1, 8004996 <sbrk_aligned+0x12>
 8004990:	f000 fba6 	bl	80050e0 <_sbrk_r>
 8004994:	6030      	str	r0, [r6, #0]
 8004996:	4621      	mov	r1, r4
 8004998:	4628      	mov	r0, r5
 800499a:	f000 fba1 	bl	80050e0 <_sbrk_r>
 800499e:	1c43      	adds	r3, r0, #1
 80049a0:	d103      	bne.n	80049aa <sbrk_aligned+0x26>
 80049a2:	f04f 34ff 	mov.w	r4, #4294967295
 80049a6:	4620      	mov	r0, r4
 80049a8:	bd70      	pop	{r4, r5, r6, pc}
 80049aa:	1cc4      	adds	r4, r0, #3
 80049ac:	f024 0403 	bic.w	r4, r4, #3
 80049b0:	42a0      	cmp	r0, r4
 80049b2:	d0f8      	beq.n	80049a6 <sbrk_aligned+0x22>
 80049b4:	1a21      	subs	r1, r4, r0
 80049b6:	4628      	mov	r0, r5
 80049b8:	f000 fb92 	bl	80050e0 <_sbrk_r>
 80049bc:	3001      	adds	r0, #1
 80049be:	d1f2      	bne.n	80049a6 <sbrk_aligned+0x22>
 80049c0:	e7ef      	b.n	80049a2 <sbrk_aligned+0x1e>
 80049c2:	bf00      	nop
 80049c4:	20000410 	.word	0x20000410

080049c8 <_malloc_r>:
 80049c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049cc:	1ccd      	adds	r5, r1, #3
 80049ce:	f025 0503 	bic.w	r5, r5, #3
 80049d2:	3508      	adds	r5, #8
 80049d4:	2d0c      	cmp	r5, #12
 80049d6:	bf38      	it	cc
 80049d8:	250c      	movcc	r5, #12
 80049da:	2d00      	cmp	r5, #0
 80049dc:	4606      	mov	r6, r0
 80049de:	db01      	blt.n	80049e4 <_malloc_r+0x1c>
 80049e0:	42a9      	cmp	r1, r5
 80049e2:	d904      	bls.n	80049ee <_malloc_r+0x26>
 80049e4:	230c      	movs	r3, #12
 80049e6:	6033      	str	r3, [r6, #0]
 80049e8:	2000      	movs	r0, #0
 80049ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ac4 <_malloc_r+0xfc>
 80049f2:	f000 f869 	bl	8004ac8 <__malloc_lock>
 80049f6:	f8d8 3000 	ldr.w	r3, [r8]
 80049fa:	461c      	mov	r4, r3
 80049fc:	bb44      	cbnz	r4, 8004a50 <_malloc_r+0x88>
 80049fe:	4629      	mov	r1, r5
 8004a00:	4630      	mov	r0, r6
 8004a02:	f7ff ffbf 	bl	8004984 <sbrk_aligned>
 8004a06:	1c43      	adds	r3, r0, #1
 8004a08:	4604      	mov	r4, r0
 8004a0a:	d158      	bne.n	8004abe <_malloc_r+0xf6>
 8004a0c:	f8d8 4000 	ldr.w	r4, [r8]
 8004a10:	4627      	mov	r7, r4
 8004a12:	2f00      	cmp	r7, #0
 8004a14:	d143      	bne.n	8004a9e <_malloc_r+0xd6>
 8004a16:	2c00      	cmp	r4, #0
 8004a18:	d04b      	beq.n	8004ab2 <_malloc_r+0xea>
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	4639      	mov	r1, r7
 8004a1e:	4630      	mov	r0, r6
 8004a20:	eb04 0903 	add.w	r9, r4, r3
 8004a24:	f000 fb5c 	bl	80050e0 <_sbrk_r>
 8004a28:	4581      	cmp	r9, r0
 8004a2a:	d142      	bne.n	8004ab2 <_malloc_r+0xea>
 8004a2c:	6821      	ldr	r1, [r4, #0]
 8004a2e:	1a6d      	subs	r5, r5, r1
 8004a30:	4629      	mov	r1, r5
 8004a32:	4630      	mov	r0, r6
 8004a34:	f7ff ffa6 	bl	8004984 <sbrk_aligned>
 8004a38:	3001      	adds	r0, #1
 8004a3a:	d03a      	beq.n	8004ab2 <_malloc_r+0xea>
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	442b      	add	r3, r5
 8004a40:	6023      	str	r3, [r4, #0]
 8004a42:	f8d8 3000 	ldr.w	r3, [r8]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	bb62      	cbnz	r2, 8004aa4 <_malloc_r+0xdc>
 8004a4a:	f8c8 7000 	str.w	r7, [r8]
 8004a4e:	e00f      	b.n	8004a70 <_malloc_r+0xa8>
 8004a50:	6822      	ldr	r2, [r4, #0]
 8004a52:	1b52      	subs	r2, r2, r5
 8004a54:	d420      	bmi.n	8004a98 <_malloc_r+0xd0>
 8004a56:	2a0b      	cmp	r2, #11
 8004a58:	d917      	bls.n	8004a8a <_malloc_r+0xc2>
 8004a5a:	1961      	adds	r1, r4, r5
 8004a5c:	42a3      	cmp	r3, r4
 8004a5e:	6025      	str	r5, [r4, #0]
 8004a60:	bf18      	it	ne
 8004a62:	6059      	strne	r1, [r3, #4]
 8004a64:	6863      	ldr	r3, [r4, #4]
 8004a66:	bf08      	it	eq
 8004a68:	f8c8 1000 	streq.w	r1, [r8]
 8004a6c:	5162      	str	r2, [r4, r5]
 8004a6e:	604b      	str	r3, [r1, #4]
 8004a70:	4630      	mov	r0, r6
 8004a72:	f000 f82f 	bl	8004ad4 <__malloc_unlock>
 8004a76:	f104 000b 	add.w	r0, r4, #11
 8004a7a:	1d23      	adds	r3, r4, #4
 8004a7c:	f020 0007 	bic.w	r0, r0, #7
 8004a80:	1ac2      	subs	r2, r0, r3
 8004a82:	bf1c      	itt	ne
 8004a84:	1a1b      	subne	r3, r3, r0
 8004a86:	50a3      	strne	r3, [r4, r2]
 8004a88:	e7af      	b.n	80049ea <_malloc_r+0x22>
 8004a8a:	6862      	ldr	r2, [r4, #4]
 8004a8c:	42a3      	cmp	r3, r4
 8004a8e:	bf0c      	ite	eq
 8004a90:	f8c8 2000 	streq.w	r2, [r8]
 8004a94:	605a      	strne	r2, [r3, #4]
 8004a96:	e7eb      	b.n	8004a70 <_malloc_r+0xa8>
 8004a98:	4623      	mov	r3, r4
 8004a9a:	6864      	ldr	r4, [r4, #4]
 8004a9c:	e7ae      	b.n	80049fc <_malloc_r+0x34>
 8004a9e:	463c      	mov	r4, r7
 8004aa0:	687f      	ldr	r7, [r7, #4]
 8004aa2:	e7b6      	b.n	8004a12 <_malloc_r+0x4a>
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	42a3      	cmp	r3, r4
 8004aaa:	d1fb      	bne.n	8004aa4 <_malloc_r+0xdc>
 8004aac:	2300      	movs	r3, #0
 8004aae:	6053      	str	r3, [r2, #4]
 8004ab0:	e7de      	b.n	8004a70 <_malloc_r+0xa8>
 8004ab2:	230c      	movs	r3, #12
 8004ab4:	6033      	str	r3, [r6, #0]
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	f000 f80c 	bl	8004ad4 <__malloc_unlock>
 8004abc:	e794      	b.n	80049e8 <_malloc_r+0x20>
 8004abe:	6005      	str	r5, [r0, #0]
 8004ac0:	e7d6      	b.n	8004a70 <_malloc_r+0xa8>
 8004ac2:	bf00      	nop
 8004ac4:	20000414 	.word	0x20000414

08004ac8 <__malloc_lock>:
 8004ac8:	4801      	ldr	r0, [pc, #4]	@ (8004ad0 <__malloc_lock+0x8>)
 8004aca:	f7ff bf0f 	b.w	80048ec <__retarget_lock_acquire_recursive>
 8004ace:	bf00      	nop
 8004ad0:	2000040c 	.word	0x2000040c

08004ad4 <__malloc_unlock>:
 8004ad4:	4801      	ldr	r0, [pc, #4]	@ (8004adc <__malloc_unlock+0x8>)
 8004ad6:	f7ff bf0a 	b.w	80048ee <__retarget_lock_release_recursive>
 8004ada:	bf00      	nop
 8004adc:	2000040c 	.word	0x2000040c

08004ae0 <__ssputs_r>:
 8004ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae4:	688e      	ldr	r6, [r1, #8]
 8004ae6:	461f      	mov	r7, r3
 8004ae8:	42be      	cmp	r6, r7
 8004aea:	680b      	ldr	r3, [r1, #0]
 8004aec:	4682      	mov	sl, r0
 8004aee:	460c      	mov	r4, r1
 8004af0:	4690      	mov	r8, r2
 8004af2:	d82d      	bhi.n	8004b50 <__ssputs_r+0x70>
 8004af4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004af8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004afc:	d026      	beq.n	8004b4c <__ssputs_r+0x6c>
 8004afe:	6965      	ldr	r5, [r4, #20]
 8004b00:	6909      	ldr	r1, [r1, #16]
 8004b02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b06:	eba3 0901 	sub.w	r9, r3, r1
 8004b0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b0e:	1c7b      	adds	r3, r7, #1
 8004b10:	444b      	add	r3, r9
 8004b12:	106d      	asrs	r5, r5, #1
 8004b14:	429d      	cmp	r5, r3
 8004b16:	bf38      	it	cc
 8004b18:	461d      	movcc	r5, r3
 8004b1a:	0553      	lsls	r3, r2, #21
 8004b1c:	d527      	bpl.n	8004b6e <__ssputs_r+0x8e>
 8004b1e:	4629      	mov	r1, r5
 8004b20:	f7ff ff52 	bl	80049c8 <_malloc_r>
 8004b24:	4606      	mov	r6, r0
 8004b26:	b360      	cbz	r0, 8004b82 <__ssputs_r+0xa2>
 8004b28:	6921      	ldr	r1, [r4, #16]
 8004b2a:	464a      	mov	r2, r9
 8004b2c:	f000 fae8 	bl	8005100 <memcpy>
 8004b30:	89a3      	ldrh	r3, [r4, #12]
 8004b32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b3a:	81a3      	strh	r3, [r4, #12]
 8004b3c:	6126      	str	r6, [r4, #16]
 8004b3e:	6165      	str	r5, [r4, #20]
 8004b40:	444e      	add	r6, r9
 8004b42:	eba5 0509 	sub.w	r5, r5, r9
 8004b46:	6026      	str	r6, [r4, #0]
 8004b48:	60a5      	str	r5, [r4, #8]
 8004b4a:	463e      	mov	r6, r7
 8004b4c:	42be      	cmp	r6, r7
 8004b4e:	d900      	bls.n	8004b52 <__ssputs_r+0x72>
 8004b50:	463e      	mov	r6, r7
 8004b52:	6820      	ldr	r0, [r4, #0]
 8004b54:	4632      	mov	r2, r6
 8004b56:	4641      	mov	r1, r8
 8004b58:	f000 faa8 	bl	80050ac <memmove>
 8004b5c:	68a3      	ldr	r3, [r4, #8]
 8004b5e:	1b9b      	subs	r3, r3, r6
 8004b60:	60a3      	str	r3, [r4, #8]
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	4433      	add	r3, r6
 8004b66:	6023      	str	r3, [r4, #0]
 8004b68:	2000      	movs	r0, #0
 8004b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b6e:	462a      	mov	r2, r5
 8004b70:	f000 fad4 	bl	800511c <_realloc_r>
 8004b74:	4606      	mov	r6, r0
 8004b76:	2800      	cmp	r0, #0
 8004b78:	d1e0      	bne.n	8004b3c <__ssputs_r+0x5c>
 8004b7a:	6921      	ldr	r1, [r4, #16]
 8004b7c:	4650      	mov	r0, sl
 8004b7e:	f7ff feb7 	bl	80048f0 <_free_r>
 8004b82:	230c      	movs	r3, #12
 8004b84:	f8ca 3000 	str.w	r3, [sl]
 8004b88:	89a3      	ldrh	r3, [r4, #12]
 8004b8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b8e:	81a3      	strh	r3, [r4, #12]
 8004b90:	f04f 30ff 	mov.w	r0, #4294967295
 8004b94:	e7e9      	b.n	8004b6a <__ssputs_r+0x8a>
	...

08004b98 <_svfiprintf_r>:
 8004b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b9c:	4698      	mov	r8, r3
 8004b9e:	898b      	ldrh	r3, [r1, #12]
 8004ba0:	061b      	lsls	r3, r3, #24
 8004ba2:	b09d      	sub	sp, #116	@ 0x74
 8004ba4:	4607      	mov	r7, r0
 8004ba6:	460d      	mov	r5, r1
 8004ba8:	4614      	mov	r4, r2
 8004baa:	d510      	bpl.n	8004bce <_svfiprintf_r+0x36>
 8004bac:	690b      	ldr	r3, [r1, #16]
 8004bae:	b973      	cbnz	r3, 8004bce <_svfiprintf_r+0x36>
 8004bb0:	2140      	movs	r1, #64	@ 0x40
 8004bb2:	f7ff ff09 	bl	80049c8 <_malloc_r>
 8004bb6:	6028      	str	r0, [r5, #0]
 8004bb8:	6128      	str	r0, [r5, #16]
 8004bba:	b930      	cbnz	r0, 8004bca <_svfiprintf_r+0x32>
 8004bbc:	230c      	movs	r3, #12
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc4:	b01d      	add	sp, #116	@ 0x74
 8004bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bca:	2340      	movs	r3, #64	@ 0x40
 8004bcc:	616b      	str	r3, [r5, #20]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bd2:	2320      	movs	r3, #32
 8004bd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004bd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bdc:	2330      	movs	r3, #48	@ 0x30
 8004bde:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004d7c <_svfiprintf_r+0x1e4>
 8004be2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004be6:	f04f 0901 	mov.w	r9, #1
 8004bea:	4623      	mov	r3, r4
 8004bec:	469a      	mov	sl, r3
 8004bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bf2:	b10a      	cbz	r2, 8004bf8 <_svfiprintf_r+0x60>
 8004bf4:	2a25      	cmp	r2, #37	@ 0x25
 8004bf6:	d1f9      	bne.n	8004bec <_svfiprintf_r+0x54>
 8004bf8:	ebba 0b04 	subs.w	fp, sl, r4
 8004bfc:	d00b      	beq.n	8004c16 <_svfiprintf_r+0x7e>
 8004bfe:	465b      	mov	r3, fp
 8004c00:	4622      	mov	r2, r4
 8004c02:	4629      	mov	r1, r5
 8004c04:	4638      	mov	r0, r7
 8004c06:	f7ff ff6b 	bl	8004ae0 <__ssputs_r>
 8004c0a:	3001      	adds	r0, #1
 8004c0c:	f000 80a7 	beq.w	8004d5e <_svfiprintf_r+0x1c6>
 8004c10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c12:	445a      	add	r2, fp
 8004c14:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c16:	f89a 3000 	ldrb.w	r3, [sl]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 809f 	beq.w	8004d5e <_svfiprintf_r+0x1c6>
 8004c20:	2300      	movs	r3, #0
 8004c22:	f04f 32ff 	mov.w	r2, #4294967295
 8004c26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c2a:	f10a 0a01 	add.w	sl, sl, #1
 8004c2e:	9304      	str	r3, [sp, #16]
 8004c30:	9307      	str	r3, [sp, #28]
 8004c32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c36:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c38:	4654      	mov	r4, sl
 8004c3a:	2205      	movs	r2, #5
 8004c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c40:	484e      	ldr	r0, [pc, #312]	@ (8004d7c <_svfiprintf_r+0x1e4>)
 8004c42:	f7fb faed 	bl	8000220 <memchr>
 8004c46:	9a04      	ldr	r2, [sp, #16]
 8004c48:	b9d8      	cbnz	r0, 8004c82 <_svfiprintf_r+0xea>
 8004c4a:	06d0      	lsls	r0, r2, #27
 8004c4c:	bf44      	itt	mi
 8004c4e:	2320      	movmi	r3, #32
 8004c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c54:	0711      	lsls	r1, r2, #28
 8004c56:	bf44      	itt	mi
 8004c58:	232b      	movmi	r3, #43	@ 0x2b
 8004c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c62:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c64:	d015      	beq.n	8004c92 <_svfiprintf_r+0xfa>
 8004c66:	9a07      	ldr	r2, [sp, #28]
 8004c68:	4654      	mov	r4, sl
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	f04f 0c0a 	mov.w	ip, #10
 8004c70:	4621      	mov	r1, r4
 8004c72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c76:	3b30      	subs	r3, #48	@ 0x30
 8004c78:	2b09      	cmp	r3, #9
 8004c7a:	d94b      	bls.n	8004d14 <_svfiprintf_r+0x17c>
 8004c7c:	b1b0      	cbz	r0, 8004cac <_svfiprintf_r+0x114>
 8004c7e:	9207      	str	r2, [sp, #28]
 8004c80:	e014      	b.n	8004cac <_svfiprintf_r+0x114>
 8004c82:	eba0 0308 	sub.w	r3, r0, r8
 8004c86:	fa09 f303 	lsl.w	r3, r9, r3
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	9304      	str	r3, [sp, #16]
 8004c8e:	46a2      	mov	sl, r4
 8004c90:	e7d2      	b.n	8004c38 <_svfiprintf_r+0xa0>
 8004c92:	9b03      	ldr	r3, [sp, #12]
 8004c94:	1d19      	adds	r1, r3, #4
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	9103      	str	r1, [sp, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	bfbb      	ittet	lt
 8004c9e:	425b      	neglt	r3, r3
 8004ca0:	f042 0202 	orrlt.w	r2, r2, #2
 8004ca4:	9307      	strge	r3, [sp, #28]
 8004ca6:	9307      	strlt	r3, [sp, #28]
 8004ca8:	bfb8      	it	lt
 8004caa:	9204      	strlt	r2, [sp, #16]
 8004cac:	7823      	ldrb	r3, [r4, #0]
 8004cae:	2b2e      	cmp	r3, #46	@ 0x2e
 8004cb0:	d10a      	bne.n	8004cc8 <_svfiprintf_r+0x130>
 8004cb2:	7863      	ldrb	r3, [r4, #1]
 8004cb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cb6:	d132      	bne.n	8004d1e <_svfiprintf_r+0x186>
 8004cb8:	9b03      	ldr	r3, [sp, #12]
 8004cba:	1d1a      	adds	r2, r3, #4
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	9203      	str	r2, [sp, #12]
 8004cc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004cc4:	3402      	adds	r4, #2
 8004cc6:	9305      	str	r3, [sp, #20]
 8004cc8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004d8c <_svfiprintf_r+0x1f4>
 8004ccc:	7821      	ldrb	r1, [r4, #0]
 8004cce:	2203      	movs	r2, #3
 8004cd0:	4650      	mov	r0, sl
 8004cd2:	f7fb faa5 	bl	8000220 <memchr>
 8004cd6:	b138      	cbz	r0, 8004ce8 <_svfiprintf_r+0x150>
 8004cd8:	9b04      	ldr	r3, [sp, #16]
 8004cda:	eba0 000a 	sub.w	r0, r0, sl
 8004cde:	2240      	movs	r2, #64	@ 0x40
 8004ce0:	4082      	lsls	r2, r0
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	3401      	adds	r4, #1
 8004ce6:	9304      	str	r3, [sp, #16]
 8004ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cec:	4824      	ldr	r0, [pc, #144]	@ (8004d80 <_svfiprintf_r+0x1e8>)
 8004cee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cf2:	2206      	movs	r2, #6
 8004cf4:	f7fb fa94 	bl	8000220 <memchr>
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	d036      	beq.n	8004d6a <_svfiprintf_r+0x1d2>
 8004cfc:	4b21      	ldr	r3, [pc, #132]	@ (8004d84 <_svfiprintf_r+0x1ec>)
 8004cfe:	bb1b      	cbnz	r3, 8004d48 <_svfiprintf_r+0x1b0>
 8004d00:	9b03      	ldr	r3, [sp, #12]
 8004d02:	3307      	adds	r3, #7
 8004d04:	f023 0307 	bic.w	r3, r3, #7
 8004d08:	3308      	adds	r3, #8
 8004d0a:	9303      	str	r3, [sp, #12]
 8004d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d0e:	4433      	add	r3, r6
 8004d10:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d12:	e76a      	b.n	8004bea <_svfiprintf_r+0x52>
 8004d14:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d18:	460c      	mov	r4, r1
 8004d1a:	2001      	movs	r0, #1
 8004d1c:	e7a8      	b.n	8004c70 <_svfiprintf_r+0xd8>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	3401      	adds	r4, #1
 8004d22:	9305      	str	r3, [sp, #20]
 8004d24:	4619      	mov	r1, r3
 8004d26:	f04f 0c0a 	mov.w	ip, #10
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d30:	3a30      	subs	r2, #48	@ 0x30
 8004d32:	2a09      	cmp	r2, #9
 8004d34:	d903      	bls.n	8004d3e <_svfiprintf_r+0x1a6>
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0c6      	beq.n	8004cc8 <_svfiprintf_r+0x130>
 8004d3a:	9105      	str	r1, [sp, #20]
 8004d3c:	e7c4      	b.n	8004cc8 <_svfiprintf_r+0x130>
 8004d3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d42:	4604      	mov	r4, r0
 8004d44:	2301      	movs	r3, #1
 8004d46:	e7f0      	b.n	8004d2a <_svfiprintf_r+0x192>
 8004d48:	ab03      	add	r3, sp, #12
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	462a      	mov	r2, r5
 8004d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004d88 <_svfiprintf_r+0x1f0>)
 8004d50:	a904      	add	r1, sp, #16
 8004d52:	4638      	mov	r0, r7
 8004d54:	f3af 8000 	nop.w
 8004d58:	1c42      	adds	r2, r0, #1
 8004d5a:	4606      	mov	r6, r0
 8004d5c:	d1d6      	bne.n	8004d0c <_svfiprintf_r+0x174>
 8004d5e:	89ab      	ldrh	r3, [r5, #12]
 8004d60:	065b      	lsls	r3, r3, #25
 8004d62:	f53f af2d 	bmi.w	8004bc0 <_svfiprintf_r+0x28>
 8004d66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d68:	e72c      	b.n	8004bc4 <_svfiprintf_r+0x2c>
 8004d6a:	ab03      	add	r3, sp, #12
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	462a      	mov	r2, r5
 8004d70:	4b05      	ldr	r3, [pc, #20]	@ (8004d88 <_svfiprintf_r+0x1f0>)
 8004d72:	a904      	add	r1, sp, #16
 8004d74:	4638      	mov	r0, r7
 8004d76:	f000 f879 	bl	8004e6c <_printf_i>
 8004d7a:	e7ed      	b.n	8004d58 <_svfiprintf_r+0x1c0>
 8004d7c:	080051f0 	.word	0x080051f0
 8004d80:	080051fa 	.word	0x080051fa
 8004d84:	00000000 	.word	0x00000000
 8004d88:	08004ae1 	.word	0x08004ae1
 8004d8c:	080051f6 	.word	0x080051f6

08004d90 <_printf_common>:
 8004d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d94:	4616      	mov	r6, r2
 8004d96:	4698      	mov	r8, r3
 8004d98:	688a      	ldr	r2, [r1, #8]
 8004d9a:	690b      	ldr	r3, [r1, #16]
 8004d9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004da0:	4293      	cmp	r3, r2
 8004da2:	bfb8      	it	lt
 8004da4:	4613      	movlt	r3, r2
 8004da6:	6033      	str	r3, [r6, #0]
 8004da8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004dac:	4607      	mov	r7, r0
 8004dae:	460c      	mov	r4, r1
 8004db0:	b10a      	cbz	r2, 8004db6 <_printf_common+0x26>
 8004db2:	3301      	adds	r3, #1
 8004db4:	6033      	str	r3, [r6, #0]
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	0699      	lsls	r1, r3, #26
 8004dba:	bf42      	ittt	mi
 8004dbc:	6833      	ldrmi	r3, [r6, #0]
 8004dbe:	3302      	addmi	r3, #2
 8004dc0:	6033      	strmi	r3, [r6, #0]
 8004dc2:	6825      	ldr	r5, [r4, #0]
 8004dc4:	f015 0506 	ands.w	r5, r5, #6
 8004dc8:	d106      	bne.n	8004dd8 <_printf_common+0x48>
 8004dca:	f104 0a19 	add.w	sl, r4, #25
 8004dce:	68e3      	ldr	r3, [r4, #12]
 8004dd0:	6832      	ldr	r2, [r6, #0]
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	42ab      	cmp	r3, r5
 8004dd6:	dc26      	bgt.n	8004e26 <_printf_common+0x96>
 8004dd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ddc:	6822      	ldr	r2, [r4, #0]
 8004dde:	3b00      	subs	r3, #0
 8004de0:	bf18      	it	ne
 8004de2:	2301      	movne	r3, #1
 8004de4:	0692      	lsls	r2, r2, #26
 8004de6:	d42b      	bmi.n	8004e40 <_printf_common+0xb0>
 8004de8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004dec:	4641      	mov	r1, r8
 8004dee:	4638      	mov	r0, r7
 8004df0:	47c8      	blx	r9
 8004df2:	3001      	adds	r0, #1
 8004df4:	d01e      	beq.n	8004e34 <_printf_common+0xa4>
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	6922      	ldr	r2, [r4, #16]
 8004dfa:	f003 0306 	and.w	r3, r3, #6
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	bf02      	ittt	eq
 8004e02:	68e5      	ldreq	r5, [r4, #12]
 8004e04:	6833      	ldreq	r3, [r6, #0]
 8004e06:	1aed      	subeq	r5, r5, r3
 8004e08:	68a3      	ldr	r3, [r4, #8]
 8004e0a:	bf0c      	ite	eq
 8004e0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e10:	2500      	movne	r5, #0
 8004e12:	4293      	cmp	r3, r2
 8004e14:	bfc4      	itt	gt
 8004e16:	1a9b      	subgt	r3, r3, r2
 8004e18:	18ed      	addgt	r5, r5, r3
 8004e1a:	2600      	movs	r6, #0
 8004e1c:	341a      	adds	r4, #26
 8004e1e:	42b5      	cmp	r5, r6
 8004e20:	d11a      	bne.n	8004e58 <_printf_common+0xc8>
 8004e22:	2000      	movs	r0, #0
 8004e24:	e008      	b.n	8004e38 <_printf_common+0xa8>
 8004e26:	2301      	movs	r3, #1
 8004e28:	4652      	mov	r2, sl
 8004e2a:	4641      	mov	r1, r8
 8004e2c:	4638      	mov	r0, r7
 8004e2e:	47c8      	blx	r9
 8004e30:	3001      	adds	r0, #1
 8004e32:	d103      	bne.n	8004e3c <_printf_common+0xac>
 8004e34:	f04f 30ff 	mov.w	r0, #4294967295
 8004e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e3c:	3501      	adds	r5, #1
 8004e3e:	e7c6      	b.n	8004dce <_printf_common+0x3e>
 8004e40:	18e1      	adds	r1, r4, r3
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	2030      	movs	r0, #48	@ 0x30
 8004e46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e4a:	4422      	add	r2, r4
 8004e4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e54:	3302      	adds	r3, #2
 8004e56:	e7c7      	b.n	8004de8 <_printf_common+0x58>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	4622      	mov	r2, r4
 8004e5c:	4641      	mov	r1, r8
 8004e5e:	4638      	mov	r0, r7
 8004e60:	47c8      	blx	r9
 8004e62:	3001      	adds	r0, #1
 8004e64:	d0e6      	beq.n	8004e34 <_printf_common+0xa4>
 8004e66:	3601      	adds	r6, #1
 8004e68:	e7d9      	b.n	8004e1e <_printf_common+0x8e>
	...

08004e6c <_printf_i>:
 8004e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e70:	7e0f      	ldrb	r7, [r1, #24]
 8004e72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e74:	2f78      	cmp	r7, #120	@ 0x78
 8004e76:	4691      	mov	r9, r2
 8004e78:	4680      	mov	r8, r0
 8004e7a:	460c      	mov	r4, r1
 8004e7c:	469a      	mov	sl, r3
 8004e7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e82:	d807      	bhi.n	8004e94 <_printf_i+0x28>
 8004e84:	2f62      	cmp	r7, #98	@ 0x62
 8004e86:	d80a      	bhi.n	8004e9e <_printf_i+0x32>
 8004e88:	2f00      	cmp	r7, #0
 8004e8a:	f000 80d2 	beq.w	8005032 <_printf_i+0x1c6>
 8004e8e:	2f58      	cmp	r7, #88	@ 0x58
 8004e90:	f000 80b9 	beq.w	8005006 <_printf_i+0x19a>
 8004e94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e9c:	e03a      	b.n	8004f14 <_printf_i+0xa8>
 8004e9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ea2:	2b15      	cmp	r3, #21
 8004ea4:	d8f6      	bhi.n	8004e94 <_printf_i+0x28>
 8004ea6:	a101      	add	r1, pc, #4	@ (adr r1, 8004eac <_printf_i+0x40>)
 8004ea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004eac:	08004f05 	.word	0x08004f05
 8004eb0:	08004f19 	.word	0x08004f19
 8004eb4:	08004e95 	.word	0x08004e95
 8004eb8:	08004e95 	.word	0x08004e95
 8004ebc:	08004e95 	.word	0x08004e95
 8004ec0:	08004e95 	.word	0x08004e95
 8004ec4:	08004f19 	.word	0x08004f19
 8004ec8:	08004e95 	.word	0x08004e95
 8004ecc:	08004e95 	.word	0x08004e95
 8004ed0:	08004e95 	.word	0x08004e95
 8004ed4:	08004e95 	.word	0x08004e95
 8004ed8:	08005019 	.word	0x08005019
 8004edc:	08004f43 	.word	0x08004f43
 8004ee0:	08004fd3 	.word	0x08004fd3
 8004ee4:	08004e95 	.word	0x08004e95
 8004ee8:	08004e95 	.word	0x08004e95
 8004eec:	0800503b 	.word	0x0800503b
 8004ef0:	08004e95 	.word	0x08004e95
 8004ef4:	08004f43 	.word	0x08004f43
 8004ef8:	08004e95 	.word	0x08004e95
 8004efc:	08004e95 	.word	0x08004e95
 8004f00:	08004fdb 	.word	0x08004fdb
 8004f04:	6833      	ldr	r3, [r6, #0]
 8004f06:	1d1a      	adds	r2, r3, #4
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6032      	str	r2, [r6, #0]
 8004f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f14:	2301      	movs	r3, #1
 8004f16:	e09d      	b.n	8005054 <_printf_i+0x1e8>
 8004f18:	6833      	ldr	r3, [r6, #0]
 8004f1a:	6820      	ldr	r0, [r4, #0]
 8004f1c:	1d19      	adds	r1, r3, #4
 8004f1e:	6031      	str	r1, [r6, #0]
 8004f20:	0606      	lsls	r6, r0, #24
 8004f22:	d501      	bpl.n	8004f28 <_printf_i+0xbc>
 8004f24:	681d      	ldr	r5, [r3, #0]
 8004f26:	e003      	b.n	8004f30 <_printf_i+0xc4>
 8004f28:	0645      	lsls	r5, r0, #25
 8004f2a:	d5fb      	bpl.n	8004f24 <_printf_i+0xb8>
 8004f2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f30:	2d00      	cmp	r5, #0
 8004f32:	da03      	bge.n	8004f3c <_printf_i+0xd0>
 8004f34:	232d      	movs	r3, #45	@ 0x2d
 8004f36:	426d      	negs	r5, r5
 8004f38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f3c:	4859      	ldr	r0, [pc, #356]	@ (80050a4 <_printf_i+0x238>)
 8004f3e:	230a      	movs	r3, #10
 8004f40:	e011      	b.n	8004f66 <_printf_i+0xfa>
 8004f42:	6821      	ldr	r1, [r4, #0]
 8004f44:	6833      	ldr	r3, [r6, #0]
 8004f46:	0608      	lsls	r0, r1, #24
 8004f48:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f4c:	d402      	bmi.n	8004f54 <_printf_i+0xe8>
 8004f4e:	0649      	lsls	r1, r1, #25
 8004f50:	bf48      	it	mi
 8004f52:	b2ad      	uxthmi	r5, r5
 8004f54:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f56:	4853      	ldr	r0, [pc, #332]	@ (80050a4 <_printf_i+0x238>)
 8004f58:	6033      	str	r3, [r6, #0]
 8004f5a:	bf14      	ite	ne
 8004f5c:	230a      	movne	r3, #10
 8004f5e:	2308      	moveq	r3, #8
 8004f60:	2100      	movs	r1, #0
 8004f62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f66:	6866      	ldr	r6, [r4, #4]
 8004f68:	60a6      	str	r6, [r4, #8]
 8004f6a:	2e00      	cmp	r6, #0
 8004f6c:	bfa2      	ittt	ge
 8004f6e:	6821      	ldrge	r1, [r4, #0]
 8004f70:	f021 0104 	bicge.w	r1, r1, #4
 8004f74:	6021      	strge	r1, [r4, #0]
 8004f76:	b90d      	cbnz	r5, 8004f7c <_printf_i+0x110>
 8004f78:	2e00      	cmp	r6, #0
 8004f7a:	d04b      	beq.n	8005014 <_printf_i+0x1a8>
 8004f7c:	4616      	mov	r6, r2
 8004f7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f82:	fb03 5711 	mls	r7, r3, r1, r5
 8004f86:	5dc7      	ldrb	r7, [r0, r7]
 8004f88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f8c:	462f      	mov	r7, r5
 8004f8e:	42bb      	cmp	r3, r7
 8004f90:	460d      	mov	r5, r1
 8004f92:	d9f4      	bls.n	8004f7e <_printf_i+0x112>
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d10b      	bne.n	8004fb0 <_printf_i+0x144>
 8004f98:	6823      	ldr	r3, [r4, #0]
 8004f9a:	07df      	lsls	r7, r3, #31
 8004f9c:	d508      	bpl.n	8004fb0 <_printf_i+0x144>
 8004f9e:	6923      	ldr	r3, [r4, #16]
 8004fa0:	6861      	ldr	r1, [r4, #4]
 8004fa2:	4299      	cmp	r1, r3
 8004fa4:	bfde      	ittt	le
 8004fa6:	2330      	movle	r3, #48	@ 0x30
 8004fa8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004fb0:	1b92      	subs	r2, r2, r6
 8004fb2:	6122      	str	r2, [r4, #16]
 8004fb4:	f8cd a000 	str.w	sl, [sp]
 8004fb8:	464b      	mov	r3, r9
 8004fba:	aa03      	add	r2, sp, #12
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	4640      	mov	r0, r8
 8004fc0:	f7ff fee6 	bl	8004d90 <_printf_common>
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	d14a      	bne.n	800505e <_printf_i+0x1f2>
 8004fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fcc:	b004      	add	sp, #16
 8004fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	f043 0320 	orr.w	r3, r3, #32
 8004fd8:	6023      	str	r3, [r4, #0]
 8004fda:	4833      	ldr	r0, [pc, #204]	@ (80050a8 <_printf_i+0x23c>)
 8004fdc:	2778      	movs	r7, #120	@ 0x78
 8004fde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	6831      	ldr	r1, [r6, #0]
 8004fe6:	061f      	lsls	r7, r3, #24
 8004fe8:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fec:	d402      	bmi.n	8004ff4 <_printf_i+0x188>
 8004fee:	065f      	lsls	r7, r3, #25
 8004ff0:	bf48      	it	mi
 8004ff2:	b2ad      	uxthmi	r5, r5
 8004ff4:	6031      	str	r1, [r6, #0]
 8004ff6:	07d9      	lsls	r1, r3, #31
 8004ff8:	bf44      	itt	mi
 8004ffa:	f043 0320 	orrmi.w	r3, r3, #32
 8004ffe:	6023      	strmi	r3, [r4, #0]
 8005000:	b11d      	cbz	r5, 800500a <_printf_i+0x19e>
 8005002:	2310      	movs	r3, #16
 8005004:	e7ac      	b.n	8004f60 <_printf_i+0xf4>
 8005006:	4827      	ldr	r0, [pc, #156]	@ (80050a4 <_printf_i+0x238>)
 8005008:	e7e9      	b.n	8004fde <_printf_i+0x172>
 800500a:	6823      	ldr	r3, [r4, #0]
 800500c:	f023 0320 	bic.w	r3, r3, #32
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	e7f6      	b.n	8005002 <_printf_i+0x196>
 8005014:	4616      	mov	r6, r2
 8005016:	e7bd      	b.n	8004f94 <_printf_i+0x128>
 8005018:	6833      	ldr	r3, [r6, #0]
 800501a:	6825      	ldr	r5, [r4, #0]
 800501c:	6961      	ldr	r1, [r4, #20]
 800501e:	1d18      	adds	r0, r3, #4
 8005020:	6030      	str	r0, [r6, #0]
 8005022:	062e      	lsls	r6, r5, #24
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	d501      	bpl.n	800502c <_printf_i+0x1c0>
 8005028:	6019      	str	r1, [r3, #0]
 800502a:	e002      	b.n	8005032 <_printf_i+0x1c6>
 800502c:	0668      	lsls	r0, r5, #25
 800502e:	d5fb      	bpl.n	8005028 <_printf_i+0x1bc>
 8005030:	8019      	strh	r1, [r3, #0]
 8005032:	2300      	movs	r3, #0
 8005034:	6123      	str	r3, [r4, #16]
 8005036:	4616      	mov	r6, r2
 8005038:	e7bc      	b.n	8004fb4 <_printf_i+0x148>
 800503a:	6833      	ldr	r3, [r6, #0]
 800503c:	1d1a      	adds	r2, r3, #4
 800503e:	6032      	str	r2, [r6, #0]
 8005040:	681e      	ldr	r6, [r3, #0]
 8005042:	6862      	ldr	r2, [r4, #4]
 8005044:	2100      	movs	r1, #0
 8005046:	4630      	mov	r0, r6
 8005048:	f7fb f8ea 	bl	8000220 <memchr>
 800504c:	b108      	cbz	r0, 8005052 <_printf_i+0x1e6>
 800504e:	1b80      	subs	r0, r0, r6
 8005050:	6060      	str	r0, [r4, #4]
 8005052:	6863      	ldr	r3, [r4, #4]
 8005054:	6123      	str	r3, [r4, #16]
 8005056:	2300      	movs	r3, #0
 8005058:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800505c:	e7aa      	b.n	8004fb4 <_printf_i+0x148>
 800505e:	6923      	ldr	r3, [r4, #16]
 8005060:	4632      	mov	r2, r6
 8005062:	4649      	mov	r1, r9
 8005064:	4640      	mov	r0, r8
 8005066:	47d0      	blx	sl
 8005068:	3001      	adds	r0, #1
 800506a:	d0ad      	beq.n	8004fc8 <_printf_i+0x15c>
 800506c:	6823      	ldr	r3, [r4, #0]
 800506e:	079b      	lsls	r3, r3, #30
 8005070:	d413      	bmi.n	800509a <_printf_i+0x22e>
 8005072:	68e0      	ldr	r0, [r4, #12]
 8005074:	9b03      	ldr	r3, [sp, #12]
 8005076:	4298      	cmp	r0, r3
 8005078:	bfb8      	it	lt
 800507a:	4618      	movlt	r0, r3
 800507c:	e7a6      	b.n	8004fcc <_printf_i+0x160>
 800507e:	2301      	movs	r3, #1
 8005080:	4632      	mov	r2, r6
 8005082:	4649      	mov	r1, r9
 8005084:	4640      	mov	r0, r8
 8005086:	47d0      	blx	sl
 8005088:	3001      	adds	r0, #1
 800508a:	d09d      	beq.n	8004fc8 <_printf_i+0x15c>
 800508c:	3501      	adds	r5, #1
 800508e:	68e3      	ldr	r3, [r4, #12]
 8005090:	9903      	ldr	r1, [sp, #12]
 8005092:	1a5b      	subs	r3, r3, r1
 8005094:	42ab      	cmp	r3, r5
 8005096:	dcf2      	bgt.n	800507e <_printf_i+0x212>
 8005098:	e7eb      	b.n	8005072 <_printf_i+0x206>
 800509a:	2500      	movs	r5, #0
 800509c:	f104 0619 	add.w	r6, r4, #25
 80050a0:	e7f5      	b.n	800508e <_printf_i+0x222>
 80050a2:	bf00      	nop
 80050a4:	08005201 	.word	0x08005201
 80050a8:	08005212 	.word	0x08005212

080050ac <memmove>:
 80050ac:	4288      	cmp	r0, r1
 80050ae:	b510      	push	{r4, lr}
 80050b0:	eb01 0402 	add.w	r4, r1, r2
 80050b4:	d902      	bls.n	80050bc <memmove+0x10>
 80050b6:	4284      	cmp	r4, r0
 80050b8:	4623      	mov	r3, r4
 80050ba:	d807      	bhi.n	80050cc <memmove+0x20>
 80050bc:	1e43      	subs	r3, r0, #1
 80050be:	42a1      	cmp	r1, r4
 80050c0:	d008      	beq.n	80050d4 <memmove+0x28>
 80050c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050ca:	e7f8      	b.n	80050be <memmove+0x12>
 80050cc:	4402      	add	r2, r0
 80050ce:	4601      	mov	r1, r0
 80050d0:	428a      	cmp	r2, r1
 80050d2:	d100      	bne.n	80050d6 <memmove+0x2a>
 80050d4:	bd10      	pop	{r4, pc}
 80050d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050de:	e7f7      	b.n	80050d0 <memmove+0x24>

080050e0 <_sbrk_r>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	4d06      	ldr	r5, [pc, #24]	@ (80050fc <_sbrk_r+0x1c>)
 80050e4:	2300      	movs	r3, #0
 80050e6:	4604      	mov	r4, r0
 80050e8:	4608      	mov	r0, r1
 80050ea:	602b      	str	r3, [r5, #0]
 80050ec:	f7fc f91e 	bl	800132c <_sbrk>
 80050f0:	1c43      	adds	r3, r0, #1
 80050f2:	d102      	bne.n	80050fa <_sbrk_r+0x1a>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	b103      	cbz	r3, 80050fa <_sbrk_r+0x1a>
 80050f8:	6023      	str	r3, [r4, #0]
 80050fa:	bd38      	pop	{r3, r4, r5, pc}
 80050fc:	20000408 	.word	0x20000408

08005100 <memcpy>:
 8005100:	440a      	add	r2, r1
 8005102:	4291      	cmp	r1, r2
 8005104:	f100 33ff 	add.w	r3, r0, #4294967295
 8005108:	d100      	bne.n	800510c <memcpy+0xc>
 800510a:	4770      	bx	lr
 800510c:	b510      	push	{r4, lr}
 800510e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005112:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005116:	4291      	cmp	r1, r2
 8005118:	d1f9      	bne.n	800510e <memcpy+0xe>
 800511a:	bd10      	pop	{r4, pc}

0800511c <_realloc_r>:
 800511c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005120:	4680      	mov	r8, r0
 8005122:	4615      	mov	r5, r2
 8005124:	460c      	mov	r4, r1
 8005126:	b921      	cbnz	r1, 8005132 <_realloc_r+0x16>
 8005128:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800512c:	4611      	mov	r1, r2
 800512e:	f7ff bc4b 	b.w	80049c8 <_malloc_r>
 8005132:	b92a      	cbnz	r2, 8005140 <_realloc_r+0x24>
 8005134:	f7ff fbdc 	bl	80048f0 <_free_r>
 8005138:	2400      	movs	r4, #0
 800513a:	4620      	mov	r0, r4
 800513c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005140:	f000 f81a 	bl	8005178 <_malloc_usable_size_r>
 8005144:	4285      	cmp	r5, r0
 8005146:	4606      	mov	r6, r0
 8005148:	d802      	bhi.n	8005150 <_realloc_r+0x34>
 800514a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800514e:	d8f4      	bhi.n	800513a <_realloc_r+0x1e>
 8005150:	4629      	mov	r1, r5
 8005152:	4640      	mov	r0, r8
 8005154:	f7ff fc38 	bl	80049c8 <_malloc_r>
 8005158:	4607      	mov	r7, r0
 800515a:	2800      	cmp	r0, #0
 800515c:	d0ec      	beq.n	8005138 <_realloc_r+0x1c>
 800515e:	42b5      	cmp	r5, r6
 8005160:	462a      	mov	r2, r5
 8005162:	4621      	mov	r1, r4
 8005164:	bf28      	it	cs
 8005166:	4632      	movcs	r2, r6
 8005168:	f7ff ffca 	bl	8005100 <memcpy>
 800516c:	4621      	mov	r1, r4
 800516e:	4640      	mov	r0, r8
 8005170:	f7ff fbbe 	bl	80048f0 <_free_r>
 8005174:	463c      	mov	r4, r7
 8005176:	e7e0      	b.n	800513a <_realloc_r+0x1e>

08005178 <_malloc_usable_size_r>:
 8005178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800517c:	1f18      	subs	r0, r3, #4
 800517e:	2b00      	cmp	r3, #0
 8005180:	bfbc      	itt	lt
 8005182:	580b      	ldrlt	r3, [r1, r0]
 8005184:	18c0      	addlt	r0, r0, r3
 8005186:	4770      	bx	lr

08005188 <_init>:
 8005188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518a:	bf00      	nop
 800518c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518e:	bc08      	pop	{r3}
 8005190:	469e      	mov	lr, r3
 8005192:	4770      	bx	lr

08005194 <_fini>:
 8005194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005196:	bf00      	nop
 8005198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519a:	bc08      	pop	{r3}
 800519c:	469e      	mov	lr, r3
 800519e:	4770      	bx	lr
