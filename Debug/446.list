
446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b20  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002ce4  08002ce4  00003ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cf4  08002cf4  00004018  2**0
                  CONTENTS
  4 .ARM          00000008  08002cf4  08002cf4  00003cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cfc  08002cfc  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cfc  08002cfc  00003cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d00  08002d00  00003d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08002d04  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000018  08002d1c  00004018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002d1c  000040ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b07  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001727  00000000  00000000  0000ab4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000650  00000000  00000000  0000c278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004a6  00000000  00000000  0000c8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002051a  00000000  00000000  0000cd6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008010  00000000  00000000  0002d288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4da6  00000000  00000000  00035298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa03e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001850  00000000  00000000  000fa084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000fb8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002ccc 	.word	0x08002ccc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	08002ccc 	.word	0x08002ccc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <SevenSegment_Update>:
};
/*
 * Configure the Correct Digits For the 7-Segment
 *
 *  */
void SevenSegment_Update(uint8_t number){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, ((number>>0)&0x01)); // a
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	f003 0301 	and.w	r3, r3, #1
 8000504:	b2db      	uxtb	r3, r3
 8000506:	461a      	mov	r2, r3
 8000508:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800050c:	4825      	ldr	r0, [pc, #148]	@ (80005a4 <SevenSegment_Update+0xb0>)
 800050e:	f001 fd93 	bl	8002038 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, ((number>>1)&0x01)); // b
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	085b      	lsrs	r3, r3, #1
 8000516:	b2db      	uxtb	r3, r3
 8000518:	f003 0301 	and.w	r3, r3, #1
 800051c:	b2db      	uxtb	r3, r3
 800051e:	461a      	mov	r2, r3
 8000520:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000524:	481f      	ldr	r0, [pc, #124]	@ (80005a4 <SevenSegment_Update+0xb0>)
 8000526:	f001 fd87 	bl	8002038 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, ((number>>2)&0x01)); // c
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	089b      	lsrs	r3, r3, #2
 800052e:	b2db      	uxtb	r3, r3
 8000530:	f003 0301 	and.w	r3, r3, #1
 8000534:	b2db      	uxtb	r3, r3
 8000536:	461a      	mov	r2, r3
 8000538:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800053c:	481a      	ldr	r0, [pc, #104]	@ (80005a8 <SevenSegment_Update+0xb4>)
 800053e:	f001 fd7b 	bl	8002038 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, ((number>>3)&0x01)); // d
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	08db      	lsrs	r3, r3, #3
 8000546:	b2db      	uxtb	r3, r3
 8000548:	f003 0301 	and.w	r3, r3, #1
 800054c:	b2db      	uxtb	r3, r3
 800054e:	461a      	mov	r2, r3
 8000550:	2101      	movs	r1, #1
 8000552:	4814      	ldr	r0, [pc, #80]	@ (80005a4 <SevenSegment_Update+0xb0>)
 8000554:	f001 fd70 	bl	8002038 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, ((number>>4)&0x01)); // e
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	091b      	lsrs	r3, r3, #4
 800055c:	b2db      	uxtb	r3, r3
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	b2db      	uxtb	r3, r3
 8000564:	461a      	mov	r2, r3
 8000566:	2102      	movs	r1, #2
 8000568:	480e      	ldr	r0, [pc, #56]	@ (80005a4 <SevenSegment_Update+0xb0>)
 800056a:	f001 fd65 	bl	8002038 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, ((number>>5)&0x01)); // f
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	095b      	lsrs	r3, r3, #5
 8000572:	b2db      	uxtb	r3, r3
 8000574:	f003 0301 	and.w	r3, r3, #1
 8000578:	b2db      	uxtb	r3, r3
 800057a:	461a      	mov	r2, r3
 800057c:	2140      	movs	r1, #64	@ 0x40
 800057e:	4809      	ldr	r0, [pc, #36]	@ (80005a4 <SevenSegment_Update+0xb0>)
 8000580:	f001 fd5a 	bl	8002038 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, ((number>>6)&0x01)); // g
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	099b      	lsrs	r3, r3, #6
 8000588:	b2db      	uxtb	r3, r3
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	b2db      	uxtb	r3, r3
 8000590:	461a      	mov	r2, r3
 8000592:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000596:	4803      	ldr	r0, [pc, #12]	@ (80005a4 <SevenSegment_Update+0xb0>)
 8000598:	f001 fd4e 	bl	8002038 <HAL_GPIO_WritePin>

}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40020800 	.word	0x40020800
 80005a8:	40020000 	.word	0x40020000

080005ac <DisplayTxData>:
//    }
//



void DisplayTxData(uint32_t value) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    // Extract individual digits
    uint8_t temp1 = (value / 1000) % 10; // Thousands place
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4a48      	ldr	r2, [pc, #288]	@ (80006d8 <DisplayTxData+0x12c>)
 80005b8:	fba2 2303 	umull	r2, r3, r2, r3
 80005bc:	0999      	lsrs	r1, r3, #6
 80005be:	4b47      	ldr	r3, [pc, #284]	@ (80006dc <DisplayTxData+0x130>)
 80005c0:	fba3 2301 	umull	r2, r3, r3, r1
 80005c4:	08da      	lsrs	r2, r3, #3
 80005c6:	4613      	mov	r3, r2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	4413      	add	r3, r2
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	1aca      	subs	r2, r1, r3
 80005d0:	4613      	mov	r3, r2
 80005d2:	73fb      	strb	r3, [r7, #15]
    uint8_t temp2 = (value / 100) % 10;  // Hundreds place
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a42      	ldr	r2, [pc, #264]	@ (80006e0 <DisplayTxData+0x134>)
 80005d8:	fba2 2303 	umull	r2, r3, r2, r3
 80005dc:	0959      	lsrs	r1, r3, #5
 80005de:	4b3f      	ldr	r3, [pc, #252]	@ (80006dc <DisplayTxData+0x130>)
 80005e0:	fba3 2301 	umull	r2, r3, r3, r1
 80005e4:	08da      	lsrs	r2, r3, #3
 80005e6:	4613      	mov	r3, r2
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	4413      	add	r3, r2
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	1aca      	subs	r2, r1, r3
 80005f0:	4613      	mov	r3, r2
 80005f2:	73bb      	strb	r3, [r7, #14]
    uint8_t temp3 = (value / 10) % 10;   // Tens place
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a39      	ldr	r2, [pc, #228]	@ (80006dc <DisplayTxData+0x130>)
 80005f8:	fba2 2303 	umull	r2, r3, r2, r3
 80005fc:	08d9      	lsrs	r1, r3, #3
 80005fe:	4b37      	ldr	r3, [pc, #220]	@ (80006dc <DisplayTxData+0x130>)
 8000600:	fba3 2301 	umull	r2, r3, r3, r1
 8000604:	08da      	lsrs	r2, r3, #3
 8000606:	4613      	mov	r3, r2
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	4413      	add	r3, r2
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	1aca      	subs	r2, r1, r3
 8000610:	4613      	mov	r3, r2
 8000612:	737b      	strb	r3, [r7, #13]
    uint8_t temp4 = value % 10;          // Units place
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	4b31      	ldr	r3, [pc, #196]	@ (80006dc <DisplayTxData+0x130>)
 8000618:	fba3 2301 	umull	r2, r3, r3, r1
 800061c:	08da      	lsrs	r2, r3, #3
 800061e:	4613      	mov	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	4413      	add	r3, r2
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	1aca      	subs	r2, r1, r3
 8000628:	4613      	mov	r3, r2
 800062a:	733b      	strb	r3, [r7, #12]

    // Cycle through each digit
    //for (int i = 0; i < 100; i++) { // 100 iterations to display for ~500ms (adjust as needed)

        // Display thousands digit
        SevenSegment_Update(segmentNumber[temp1]);
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	4a2d      	ldr	r2, [pc, #180]	@ (80006e4 <DisplayTxData+0x138>)
 8000630:	5cd3      	ldrb	r3, [r2, r3]
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ff5e 	bl	80004f4 <SevenSegment_Update>
        D1_LOW();  // Activate D1
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800063e:	482a      	ldr	r0, [pc, #168]	@ (80006e8 <DisplayTxData+0x13c>)
 8000640:	f001 fcfa 	bl	8002038 <HAL_GPIO_WritePin>
        HAL_Delay(7); // Short delay for this digit
 8000644:	2007      	movs	r0, #7
 8000646:	f000 fbc5 	bl	8000dd4 <HAL_Delay>
        D1_HIGH(); // Deactivate D1
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000650:	4825      	ldr	r0, [pc, #148]	@ (80006e8 <DisplayTxData+0x13c>)
 8000652:	f001 fcf1 	bl	8002038 <HAL_GPIO_WritePin>


        // Display hundreds digit
        SevenSegment_Update(segmentNumber[temp2]);
 8000656:	7bbb      	ldrb	r3, [r7, #14]
 8000658:	4a22      	ldr	r2, [pc, #136]	@ (80006e4 <DisplayTxData+0x138>)
 800065a:	5cd3      	ldrb	r3, [r2, r3]
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff49 	bl	80004f4 <SevenSegment_Update>
        D2_LOW();  // Activate D2
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000668:	481f      	ldr	r0, [pc, #124]	@ (80006e8 <DisplayTxData+0x13c>)
 800066a:	f001 fce5 	bl	8002038 <HAL_GPIO_WritePin>
        HAL_Delay(7); // Short delay for this digit
 800066e:	2007      	movs	r0, #7
 8000670:	f000 fbb0 	bl	8000dd4 <HAL_Delay>
        D2_HIGH(); // Deactivate D2
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800067a:	481b      	ldr	r0, [pc, #108]	@ (80006e8 <DisplayTxData+0x13c>)
 800067c:	f001 fcdc 	bl	8002038 <HAL_GPIO_WritePin>

        // Display tens digit
        SevenSegment_Update(segmentNumber[temp3]);
 8000680:	7b7b      	ldrb	r3, [r7, #13]
 8000682:	4a18      	ldr	r2, [pc, #96]	@ (80006e4 <DisplayTxData+0x138>)
 8000684:	5cd3      	ldrb	r3, [r2, r3]
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ff34 	bl	80004f4 <SevenSegment_Update>
        D3_LOW();  // Activate D3
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000692:	4815      	ldr	r0, [pc, #84]	@ (80006e8 <DisplayTxData+0x13c>)
 8000694:	f001 fcd0 	bl	8002038 <HAL_GPIO_WritePin>
        HAL_Delay(7); // Short delay for this digit
 8000698:	2007      	movs	r0, #7
 800069a:	f000 fb9b 	bl	8000dd4 <HAL_Delay>
        D3_HIGH(); // Deactivate D3
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006a4:	4810      	ldr	r0, [pc, #64]	@ (80006e8 <DisplayTxData+0x13c>)
 80006a6:	f001 fcc7 	bl	8002038 <HAL_GPIO_WritePin>

        // Display units digit
        SevenSegment_Update(segmentNumber[temp4]);
 80006aa:	7b3b      	ldrb	r3, [r7, #12]
 80006ac:	4a0d      	ldr	r2, [pc, #52]	@ (80006e4 <DisplayTxData+0x138>)
 80006ae:	5cd3      	ldrb	r3, [r2, r3]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ff1f 	bl	80004f4 <SevenSegment_Update>
        D4_LOW();  // Activate D4
 80006b6:	2200      	movs	r2, #0
 80006b8:	2120      	movs	r1, #32
 80006ba:	480c      	ldr	r0, [pc, #48]	@ (80006ec <DisplayTxData+0x140>)
 80006bc:	f001 fcbc 	bl	8002038 <HAL_GPIO_WritePin>
        HAL_Delay(7); // Short delay for this digit
 80006c0:	2007      	movs	r0, #7
 80006c2:	f000 fb87 	bl	8000dd4 <HAL_Delay>
        D4_HIGH(); // Deactivate D4
 80006c6:	2201      	movs	r2, #1
 80006c8:	2120      	movs	r1, #32
 80006ca:	4808      	ldr	r0, [pc, #32]	@ (80006ec <DisplayTxData+0x140>)
 80006cc:	f001 fcb4 	bl	8002038 <HAL_GPIO_WritePin>


    //}
}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	10624dd3 	.word	0x10624dd3
 80006dc:	cccccccd 	.word	0xcccccccd
 80006e0:	51eb851f 	.word	0x51eb851f
 80006e4:	20000000 	.word	0x20000000
 80006e8:	40020400 	.word	0x40020400
 80006ec:	40020800 	.word	0x40020800

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f4:	f000 fafc 	bl	8000cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f8:	f000 f842 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f000 f95e 	bl	80009bc <MX_GPIO_Init>
  MX_CAN1_Init();
 8000700:	f000 f8b0 	bl	8000864 <MX_CAN1_Init>

//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // Turn on decimal point



	  TxData[0] = 0x23;
 8000704:	4b18      	ldr	r3, [pc, #96]	@ (8000768 <main+0x78>)
 8000706:	2223      	movs	r2, #35	@ 0x23
 8000708:	701a      	strb	r2, [r3, #0]
      TxData[1] = 0x44;
 800070a:	4b17      	ldr	r3, [pc, #92]	@ (8000768 <main+0x78>)
 800070c:	2244      	movs	r2, #68	@ 0x44
 800070e:	705a      	strb	r2, [r3, #1]
      TxData[2] = 0x69;
 8000710:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <main+0x78>)
 8000712:	2269      	movs	r2, #105	@ 0x69
 8000714:	709a      	strb	r2, [r3, #2]
//
//	  HAL_Delay(1000);



	 if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8000716:	4b15      	ldr	r3, [pc, #84]	@ (800076c <main+0x7c>)
 8000718:	4a13      	ldr	r2, [pc, #76]	@ (8000768 <main+0x78>)
 800071a:	4915      	ldr	r1, [pc, #84]	@ (8000770 <main+0x80>)
 800071c:	4815      	ldr	r0, [pc, #84]	@ (8000774 <main+0x84>)
 800071e:	f000 fd9d 	bl	800125c <HAL_CAN_AddTxMessage>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <main+0x3c>
		 //uint32_t can_error = HAL_CAN_GetError(&hcan1); // Can potentially use for debugging

		 Error_Handler();
 8000728:	f000 f9ee 	bl	8000b08 <Error_Handler>
	 }


	 if (TxData[1] > 10){
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <main+0x78>)
 800072e:	785b      	ldrb	r3, [r3, #1]
 8000730:	2b0a      	cmp	r3, #10
 8000732:	d902      	bls.n	800073a <main+0x4a>
		 warning_active = 1;
 8000734:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <main+0x88>)
 8000736:	2201      	movs	r2, #1
 8000738:	701a      	strb	r2, [r3, #0]
		 warning_active = 0;
	 }


	 // if the oil temperature or whatever variable is above 500C then led is output
	 if (warning_active ) {
 800073a:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <main+0x88>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d006      	beq.n	8000750 <main+0x60>

		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000748:	480c      	ldr	r0, [pc, #48]	@ (800077c <main+0x8c>)
 800074a:	f001 fc75 	bl	8002038 <HAL_GPIO_WritePin>
 800074e:	e005      	b.n	800075c <main+0x6c>
	 }
	 else {
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000756:	4809      	ldr	r0, [pc, #36]	@ (800077c <main+0x8c>)
 8000758:	f001 fc6e 	bl	8002038 <HAL_GPIO_WritePin>
	 }


	 while (TxData[1] >= 0){

		 	 DisplayTxData(TxData[1]); // change to RxData later
 800075c:	4b02      	ldr	r3, [pc, #8]	@ (8000768 <main+0x78>)
 800075e:	785b      	ldrb	r3, [r3, #1]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff23 	bl	80005ac <DisplayTxData>
 8000766:	e7f9      	b.n	800075c <main+0x6c>
 8000768:	2000009c 	.word	0x2000009c
 800076c:	20000090 	.word	0x20000090
 8000770:	2000005c 	.word	0x2000005c
 8000774:	20000034 	.word	0x20000034
 8000778:	200000a4 	.word	0x200000a4
 800077c:	40020000 	.word	0x40020000

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b094      	sub	sp, #80	@ 0x50
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	2234      	movs	r2, #52	@ 0x34
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f002 fa70 	bl	8002c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	4b2c      	ldr	r3, [pc, #176]	@ (800085c <SystemClock_Config+0xdc>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ac:	4a2b      	ldr	r2, [pc, #172]	@ (800085c <SystemClock_Config+0xdc>)
 80007ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b4:	4b29      	ldr	r3, [pc, #164]	@ (800085c <SystemClock_Config+0xdc>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c0:	2300      	movs	r3, #0
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	4b26      	ldr	r3, [pc, #152]	@ (8000860 <SystemClock_Config+0xe0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a25      	ldr	r2, [pc, #148]	@ (8000860 <SystemClock_Config+0xe0>)
 80007ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4b23      	ldr	r3, [pc, #140]	@ (8000860 <SystemClock_Config+0xe0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007dc:	2302      	movs	r3, #2
 80007de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	2301      	movs	r3, #1
 80007e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e4:	2310      	movs	r3, #16
 80007e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e8:	2302      	movs	r3, #2
 80007ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ec:	2300      	movs	r3, #0
 80007ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007f0:	2308      	movs	r3, #8
 80007f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007f4:	23b4      	movs	r3, #180	@ 0xb4
 80007f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000800:	2302      	movs	r3, #2
 8000802:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4618      	mov	r0, r3
 800080a:	f001 ff95 	bl	8002738 <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000814:	f000 f978 	bl	8000b08 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000818:	f001 fc28 	bl	800206c <HAL_PWREx_EnableOverDrive>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000822:	f000 f971 	bl	8000b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000826:	230f      	movs	r3, #15
 8000828:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082a:	2302      	movs	r3, #2
 800082c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000832:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000836:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000838:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800083c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	2105      	movs	r1, #5
 8000844:	4618      	mov	r0, r3
 8000846:	f001 fc61 	bl	800210c <HAL_RCC_ClockConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000850:	f000 f95a 	bl	8000b08 <Error_Handler>
  }
}
 8000854:	bf00      	nop
 8000856:	3750      	adds	r7, #80	@ 0x50
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40023800 	.word	0x40023800
 8000860:	40007000 	.word	0x40007000

08000864 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	@ 0x28
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */


	hcan1.Instance = CAN1;
 800086a:	4b51      	ldr	r3, [pc, #324]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 800086c:	4a51      	ldr	r2, [pc, #324]	@ (80009b4 <MX_CAN1_Init+0x150>)
 800086e:	601a      	str	r2, [r3, #0]
	  hcan1.Init.Prescaler = 9;
 8000870:	4b4f      	ldr	r3, [pc, #316]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 8000872:	2209      	movs	r2, #9
 8000874:	605a      	str	r2, [r3, #4]
	  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000876:	4b4e      	ldr	r3, [pc, #312]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
	  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800087c:	4b4c      	ldr	r3, [pc, #304]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
	  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000882:	4b4b      	ldr	r3, [pc, #300]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 8000884:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8000888:	611a      	str	r2, [r3, #16]
	  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800088a:	4b49      	ldr	r3, [pc, #292]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 800088c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000890:	615a      	str	r2, [r3, #20]
	  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000892:	4b47      	ldr	r3, [pc, #284]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 8000894:	2200      	movs	r2, #0
 8000896:	761a      	strb	r2, [r3, #24]
	  hcan1.Init.AutoBusOff = DISABLE;
 8000898:	4b45      	ldr	r3, [pc, #276]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 800089a:	2200      	movs	r2, #0
 800089c:	765a      	strb	r2, [r3, #25]
	  hcan1.Init.AutoWakeUp = DISABLE;
 800089e:	4b44      	ldr	r3, [pc, #272]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	769a      	strb	r2, [r3, #26]
	  hcan1.Init.AutoRetransmission = DISABLE;
 80008a4:	4b42      	ldr	r3, [pc, #264]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	76da      	strb	r2, [r3, #27]
	  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008aa:	4b41      	ldr	r3, [pc, #260]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	771a      	strb	r2, [r3, #28]
	  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008b0:	4b3f      	ldr	r3, [pc, #252]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	775a      	strb	r2, [r3, #29]
	  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008b6:	483e      	ldr	r0, [pc, #248]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 80008b8:	f000 fab0 	bl	8000e1c <HAL_CAN_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_CAN1_Init+0x62>
	  {
	    Error_Handler();
 80008c2:	f000 f921 	bl	8000b08 <Error_Handler>

  /* USER CODE BEGIN CAN1_Init 1 */
	  CAN_FilterTypeDef  sFilterConfig;


	  sFilterConfig.FilterBank = 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61fb      	str	r3, [r7, #28]
	  sFilterConfig.FilterIdHigh = 0x0000;
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
	  sFilterConfig.FilterIdLow = 0x0000;
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
	  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterMaskIdLow = 0x0000;
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80008e6:	2301      	movs	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
	  sFilterConfig.SlaveStartFilterBank = 14;
 80008ea:	230e      	movs	r3, #14
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24

	  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80008ee:	463b      	mov	r3, r7
 80008f0:	4619      	mov	r1, r3
 80008f2:	482f      	ldr	r0, [pc, #188]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 80008f4:	f000 fb8e 	bl	8001014 <HAL_CAN_ConfigFilter>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_CAN1_Init+0x9e>
	  {
	    /* Filter configuration Error */
	    Error_Handler();
 80008fe:	f000 f903 	bl	8000b08 <Error_Handler>
	  }

	  /*##-3- Start the CAN peripheral ###########################################*/
	  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000902:	482b      	ldr	r0, [pc, #172]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 8000904:	f000 fc66 	bl	80011d4 <HAL_CAN_Start>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_CAN1_Init+0xae>
	  {
	    /* Start Error */
	    Error_Handler();
 800090e:	f000 f8fb 	bl	8000b08 <Error_Handler>
	  }

	  /*##-4- Activate CAN RX notification #######################################*/
	  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000912:	2102      	movs	r1, #2
 8000914:	4826      	ldr	r0, [pc, #152]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 8000916:	f000 fe93 	bl	8001640 <HAL_CAN_ActivateNotification>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_CAN1_Init+0xc0>
	  {
	    /* Notification Error */
	    Error_Handler();
 8000920:	f000 f8f2 	bl	8000b08 <Error_Handler>
	  }

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000924:	4b22      	ldr	r3, [pc, #136]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 8000926:	4a23      	ldr	r2, [pc, #140]	@ (80009b4 <MX_CAN1_Init+0x150>)
 8000928:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 800092a:	4b21      	ldr	r3, [pc, #132]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 800092c:	2209      	movs	r2, #9
 800092e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000930:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000936:	4b1e      	ldr	r3, [pc, #120]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800093c:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 800093e:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8000942:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000944:	4b1a      	ldr	r3, [pc, #104]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 8000946:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800094a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800094c:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 800094e:	2200      	movs	r2, #0
 8000950:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000952:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 8000954:	2200      	movs	r2, #0
 8000956:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000958:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 800095a:	2200      	movs	r2, #0
 800095c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800095e:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 8000960:	2200      	movs	r2, #0
 8000962:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000964:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 8000966:	2200      	movs	r2, #0
 8000968:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800096a:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 800096c:	2200      	movs	r2, #0
 800096e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000970:	480f      	ldr	r0, [pc, #60]	@ (80009b0 <MX_CAN1_Init+0x14c>)
 8000972:	f000 fa53 	bl	8000e1c <HAL_CAN_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_CAN1_Init+0x11c>
  {
    Error_Handler();
 800097c:	f000 f8c4 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	        TxHeader.StdId = 0x0446;  // ID 2 (to match H7's filter)
 8000980:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <MX_CAN1_Init+0x154>)
 8000982:	f240 4246 	movw	r2, #1094	@ 0x446
 8000986:	601a      	str	r2, [r3, #0]
	    	TxHeader.ExtId = 0x01; // may need depending on the size of the bits being sent from ecu
 8000988:	4b0b      	ldr	r3, [pc, #44]	@ (80009b8 <MX_CAN1_Init+0x154>)
 800098a:	2201      	movs	r2, #1
 800098c:	605a      	str	r2, [r3, #4]
	        TxHeader.IDE = CAN_ID_STD;  // Standard ID
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <MX_CAN1_Init+0x154>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
	        TxHeader.RTR = CAN_RTR_DATA;  // Data frame
 8000994:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <MX_CAN1_Init+0x154>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
	        TxHeader.DLC = 3;  // Length of data (3 bytes)
 800099a:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <MX_CAN1_Init+0x154>)
 800099c:	2203      	movs	r2, #3
 800099e:	611a      	str	r2, [r3, #16]
	        TxHeader.TransmitGlobalTime = DISABLE;
 80009a0:	4b05      	ldr	r3, [pc, #20]	@ (80009b8 <MX_CAN1_Init+0x154>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	751a      	strb	r2, [r3, #20]

  /* USER CODE END CAN1_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	@ 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000034 	.word	0x20000034
 80009b4:	40006400 	.word	0x40006400
 80009b8:	2000005c 	.word	0x2000005c

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	@ 0x28
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b3c      	ldr	r3, [pc, #240]	@ (8000ac8 <MX_GPIO_Init+0x10c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a3b      	ldr	r2, [pc, #236]	@ (8000ac8 <MX_GPIO_Init+0x10c>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b39      	ldr	r3, [pc, #228]	@ (8000ac8 <MX_GPIO_Init+0x10c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b35      	ldr	r3, [pc, #212]	@ (8000ac8 <MX_GPIO_Init+0x10c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a34      	ldr	r2, [pc, #208]	@ (8000ac8 <MX_GPIO_Init+0x10c>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b32      	ldr	r3, [pc, #200]	@ (8000ac8 <MX_GPIO_Init+0x10c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ac8 <MX_GPIO_Init+0x10c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a2d      	ldr	r2, [pc, #180]	@ (8000ac8 <MX_GPIO_Init+0x10c>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac8 <MX_GPIO_Init+0x10c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b27      	ldr	r3, [pc, #156]	@ (8000ac8 <MX_GPIO_Init+0x10c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a26      	ldr	r2, [pc, #152]	@ (8000ac8 <MX_GPIO_Init+0x10c>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b24      	ldr	r3, [pc, #144]	@ (8000ac8 <MX_GPIO_Init+0x10c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1
 8000a42:	2200      	movs	r2, #0
 8000a44:	f646 1163 	movw	r1, #26979	@ 0x6963
 8000a48:	4820      	ldr	r0, [pc, #128]	@ (8000acc <MX_GPIO_Init+0x110>)
 8000a4a:	f001 faf5 	bl	8002038 <HAL_GPIO_WritePin>
                          |D4_Pin|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f240 5122 	movw	r1, #1314	@ 0x522
 8000a54:	481e      	ldr	r0, [pc, #120]	@ (8000ad0 <MX_GPIO_Init+0x114>)
 8000a56:	f001 faef 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D1_Pin|D2_Pin|D3_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000a60:	481c      	ldr	r0, [pc, #112]	@ (8000ad4 <MX_GPIO_Init+0x118>)
 8000a62:	f001 fae9 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC0 PC1
                           D4_Pin PC6 PC8 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1
 8000a66:	f646 1363 	movw	r3, #26979	@ 0x6963
 8000a6a:	617b      	str	r3, [r7, #20]
                          |D4_Pin|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4813      	ldr	r0, [pc, #76]	@ (8000acc <MX_GPIO_Init+0x110>)
 8000a80:	f001 f946 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_10;
 8000a84:	f240 5322 	movw	r3, #1314	@ 0x522
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480c      	ldr	r0, [pc, #48]	@ (8000ad0 <MX_GPIO_Init+0x114>)
 8000a9e:	f001 f937 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D1_Pin|D2_Pin|D3_Pin;
 8000aa2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4806      	ldr	r0, [pc, #24]	@ (8000ad4 <MX_GPIO_Init+0x118>)
 8000abc:	f001 f928 	bl	8001d10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	@ 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020800 	.word	0x40020800
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	40020400 	.word	0x40020400

08000ad8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000ae0:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000ae2:	4a08      	ldr	r2, [pc, #32]	@ (8000b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f000 fc88 	bl	80013fc <HAL_CAN_GetRxMessage>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {

    /* Reception Error */
    Error_Handler();
 8000af2:	f000 f809 	bl	8000b08 <Error_Handler>
  }

}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000094 	.word	0x20000094
 8000b04:	20000074 	.word	0x20000074

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <Error_Handler+0x8>

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b22:	4a0f      	ldr	r2, [pc, #60]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3e:	4a08      	ldr	r2, [pc, #32]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_MspInit+0x4c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800

08000b64 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	@ 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf8 <HAL_CAN_MspInit+0x94>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d134      	bne.n	8000bf0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <HAL_CAN_MspInit+0x98>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8e:	4a1b      	ldr	r2, [pc, #108]	@ (8000bfc <HAL_CAN_MspInit+0x98>)
 8000b90:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b96:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <HAL_CAN_MspInit+0x98>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <HAL_CAN_MspInit+0x98>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a14      	ldr	r2, [pc, #80]	@ (8000bfc <HAL_CAN_MspInit+0x98>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <HAL_CAN_MspInit+0x98>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000bbe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bd0:	2309      	movs	r3, #9
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4809      	ldr	r0, [pc, #36]	@ (8000c00 <HAL_CAN_MspInit+0x9c>)
 8000bdc:	f001 f898 	bl	8001d10 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	2014      	movs	r0, #20
 8000be6:	f001 f85c 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000bea:	2014      	movs	r0, #20
 8000bec:	f001 f875 	bl	8001cda <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	@ 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40006400 	.word	0x40006400
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <NMI_Handler+0x4>

08000c0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <BusFault_Handler+0x4>

08000c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <UsageFault_Handler+0x4>

08000c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5a:	f000 f89b 	bl	8000d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c68:	4802      	ldr	r0, [pc, #8]	@ (8000c74 <CAN1_RX0_IRQHandler+0x10>)
 8000c6a:	f000 fd0f 	bl	800168c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000034 	.word	0x20000034

08000c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <SystemInit+0x20>)
 8000c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c82:	4a05      	ldr	r2, [pc, #20]	@ (8000c98 <SystemInit+0x20>)
 8000c84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cd4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ca0:	f7ff ffea 	bl	8000c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca4:	480c      	ldr	r0, [pc, #48]	@ (8000cd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ca6:	490d      	ldr	r1, [pc, #52]	@ (8000cdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cca:	f001 ffdb 	bl	8002c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cce:	f7ff fd0f 	bl	80006f0 <main>
  bx  lr    
 8000cd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cdc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000ce0:	08002d04 	.word	0x08002d04
  ldr r2, =_sbss
 8000ce4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000ce8:	200000ac 	.word	0x200000ac

08000cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC_IRQHandler>
	...

08000cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d30 <HAL_Init+0x40>)
 8000cfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d00:	4b0b      	ldr	r3, [pc, #44]	@ (8000d30 <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0a      	ldr	r2, [pc, #40]	@ (8000d30 <HAL_Init+0x40>)
 8000d06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0c:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a07      	ldr	r2, [pc, #28]	@ (8000d30 <HAL_Init+0x40>)
 8000d12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f000 ffb7 	bl	8001c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1e:	200f      	movs	r0, #15
 8000d20:	f000 f808 	bl	8000d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d24:	f7ff fef6 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023c00 	.word	0x40023c00

08000d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d3c:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <HAL_InitTick+0x54>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <HAL_InitTick+0x58>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4619      	mov	r1, r3
 8000d46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 ffcf 	bl	8001cf6 <HAL_SYSTICK_Config>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00e      	b.n	8000d80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	d80a      	bhi.n	8000d7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f000 ff97 	bl	8001ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d74:	4a06      	ldr	r2, [pc, #24]	@ (8000d90 <HAL_InitTick+0x5c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e000      	b.n	8000d80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	2000000c 	.word	0x2000000c
 8000d8c:	20000014 	.word	0x20000014
 8000d90:	20000010 	.word	0x20000010

08000d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <HAL_IncTick+0x20>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <HAL_IncTick+0x24>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a04      	ldr	r2, [pc, #16]	@ (8000db8 <HAL_IncTick+0x24>)
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000014 	.word	0x20000014
 8000db8:	200000a8 	.word	0x200000a8

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	@ (8000dd0 <HAL_GetTick+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	200000a8 	.word	0x200000a8

08000dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ddc:	f7ff ffee 	bl	8000dbc <HAL_GetTick>
 8000de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dec:	d005      	beq.n	8000dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dee:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <HAL_Delay+0x44>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dfa:	bf00      	nop
 8000dfc:	f7ff ffde 	bl	8000dbc <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d8f7      	bhi.n	8000dfc <HAL_Delay+0x28>
  {
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000014 	.word	0x20000014

08000e1c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e0ed      	b.n	800100a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d102      	bne.n	8000e40 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff fe92 	bl	8000b64 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f042 0201 	orr.w	r2, r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e50:	f7ff ffb4 	bl	8000dbc <HAL_GetTick>
 8000e54:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e56:	e012      	b.n	8000e7e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e58:	f7ff ffb0 	bl	8000dbc <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b0a      	cmp	r3, #10
 8000e64:	d90b      	bls.n	8000e7e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e6a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2205      	movs	r2, #5
 8000e76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e0c5      	b.n	800100a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0e5      	beq.n	8000e58 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 0202 	bic.w	r2, r2, #2
 8000e9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e9c:	f7ff ff8e 	bl	8000dbc <HAL_GetTick>
 8000ea0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ea2:	e012      	b.n	8000eca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ea4:	f7ff ff8a 	bl	8000dbc <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b0a      	cmp	r3, #10
 8000eb0:	d90b      	bls.n	8000eca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2205      	movs	r2, #5
 8000ec2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e09f      	b.n	800100a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1e5      	bne.n	8000ea4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7e1b      	ldrb	r3, [r3, #24]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d108      	bne.n	8000ef2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	e007      	b.n	8000f02 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	7e5b      	ldrb	r3, [r3, #25]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d108      	bne.n	8000f1c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	e007      	b.n	8000f2c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7e9b      	ldrb	r3, [r3, #26]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d108      	bne.n	8000f46 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0220 	orr.w	r2, r2, #32
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	e007      	b.n	8000f56 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 0220 	bic.w	r2, r2, #32
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	7edb      	ldrb	r3, [r3, #27]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d108      	bne.n	8000f70 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 0210 	bic.w	r2, r2, #16
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e007      	b.n	8000f80 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f042 0210 	orr.w	r2, r2, #16
 8000f7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	7f1b      	ldrb	r3, [r3, #28]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d108      	bne.n	8000f9a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f042 0208 	orr.w	r2, r2, #8
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	e007      	b.n	8000faa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 0208 	bic.w	r2, r2, #8
 8000fa8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	7f5b      	ldrb	r3, [r3, #29]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d108      	bne.n	8000fc4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f042 0204 	orr.w	r2, r2, #4
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	e007      	b.n	8000fd4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0204 	bic.w	r2, r2, #4
 8000fd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	691b      	ldr	r3, [r3, #16]
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	ea42 0103 	orr.w	r1, r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	1e5a      	subs	r2, r3, #1
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f893 3020 	ldrb.w	r3, [r3, #32]
 800102a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800102c:	7cfb      	ldrb	r3, [r7, #19]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d003      	beq.n	800103a <HAL_CAN_ConfigFilter+0x26>
 8001032:	7cfb      	ldrb	r3, [r7, #19]
 8001034:	2b02      	cmp	r3, #2
 8001036:	f040 80be 	bne.w	80011b6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800103a:	4b65      	ldr	r3, [pc, #404]	@ (80011d0 <HAL_CAN_ConfigFilter+0x1bc>)
 800103c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001044:	f043 0201 	orr.w	r2, r3, #1
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001054:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	431a      	orrs	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f003 031f 	and.w	r3, r3, #31
 800107a:	2201      	movs	r2, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	43db      	mvns	r3, r3
 800108c:	401a      	ands	r2, r3
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	69db      	ldr	r3, [r3, #28]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d123      	bne.n	80010e4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	3248      	adds	r2, #72	@ 0x48
 80010c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010da:	6979      	ldr	r1, [r7, #20]
 80010dc:	3348      	adds	r3, #72	@ 0x48
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	440b      	add	r3, r1
 80010e2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	69db      	ldr	r3, [r3, #28]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d122      	bne.n	8001132 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	431a      	orrs	r2, r3
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800110c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	3248      	adds	r2, #72	@ 0x48
 8001112:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001126:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001128:	6979      	ldr	r1, [r7, #20]
 800112a:	3348      	adds	r3, #72	@ 0x48
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	440b      	add	r3, r1
 8001130:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d109      	bne.n	800114e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	43db      	mvns	r3, r3
 8001144:	401a      	ands	r2, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800114c:	e007      	b.n	800115e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	431a      	orrs	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d109      	bne.n	800117a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	43db      	mvns	r3, r3
 8001170:	401a      	ands	r2, r3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001178:	e007      	b.n	800118a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	431a      	orrs	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d107      	bne.n	80011a2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	431a      	orrs	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80011a8:	f023 0201 	bic.w	r2, r3, #1
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e006      	b.n	80011c4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
  }
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	371c      	adds	r7, #28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	40006400 	.word	0x40006400

080011d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d12e      	bne.n	8001246 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2202      	movs	r2, #2
 80011ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0201 	bic.w	r2, r2, #1
 80011fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001200:	f7ff fddc 	bl	8000dbc <HAL_GetTick>
 8001204:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001206:	e012      	b.n	800122e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001208:	f7ff fdd8 	bl	8000dbc <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b0a      	cmp	r3, #10
 8001214:	d90b      	bls.n	800122e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2205      	movs	r2, #5
 8001226:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e012      	b.n	8001254 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1e5      	bne.n	8001208 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	e006      	b.n	8001254 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
  }
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	@ 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001270:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800127a:	7ffb      	ldrb	r3, [r7, #31]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d003      	beq.n	8001288 <HAL_CAN_AddTxMessage+0x2c>
 8001280:	7ffb      	ldrb	r3, [r7, #31]
 8001282:	2b02      	cmp	r3, #2
 8001284:	f040 80ad 	bne.w	80013e2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10a      	bne.n	80012a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001298:	2b00      	cmp	r3, #0
 800129a:	d105      	bne.n	80012a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 8095 	beq.w	80013d2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	0e1b      	lsrs	r3, r3, #24
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012b2:	2201      	movs	r2, #1
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10d      	bne.n	80012e0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012ce:	68f9      	ldr	r1, [r7, #12]
 80012d0:	6809      	ldr	r1, [r1, #0]
 80012d2:	431a      	orrs	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3318      	adds	r3, #24
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	440b      	add	r3, r1
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	e00f      	b.n	8001300 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012ea:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012f0:	68f9      	ldr	r1, [r7, #12]
 80012f2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80012f4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	3318      	adds	r3, #24
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	440b      	add	r3, r1
 80012fe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6819      	ldr	r1, [r3, #0]
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	3318      	adds	r3, #24
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	440b      	add	r3, r1
 8001310:	3304      	adds	r3, #4
 8001312:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	7d1b      	ldrb	r3, [r3, #20]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d111      	bne.n	8001340 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3318      	adds	r3, #24
 8001324:	011b      	lsls	r3, r3, #4
 8001326:	4413      	add	r3, r2
 8001328:	3304      	adds	r3, #4
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	6811      	ldr	r1, [r2, #0]
 8001330:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	3318      	adds	r3, #24
 8001338:	011b      	lsls	r3, r3, #4
 800133a:	440b      	add	r3, r1
 800133c:	3304      	adds	r3, #4
 800133e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3307      	adds	r3, #7
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	061a      	lsls	r2, r3, #24
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3306      	adds	r3, #6
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	041b      	lsls	r3, r3, #16
 8001350:	431a      	orrs	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3305      	adds	r3, #5
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	4313      	orrs	r3, r2
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	3204      	adds	r2, #4
 8001360:	7812      	ldrb	r2, [r2, #0]
 8001362:	4610      	mov	r0, r2
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	6811      	ldr	r1, [r2, #0]
 8001368:	ea43 0200 	orr.w	r2, r3, r0
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	440b      	add	r3, r1
 8001372:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001376:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3303      	adds	r3, #3
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	061a      	lsls	r2, r3, #24
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3302      	adds	r3, #2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	041b      	lsls	r3, r3, #16
 8001388:	431a      	orrs	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3301      	adds	r3, #1
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	4313      	orrs	r3, r2
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	7812      	ldrb	r2, [r2, #0]
 8001398:	4610      	mov	r0, r2
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	6811      	ldr	r1, [r2, #0]
 800139e:	ea43 0200 	orr.w	r2, r3, r0
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	440b      	add	r3, r1
 80013a8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80013ac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3318      	adds	r3, #24
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	4413      	add	r3, r2
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	6811      	ldr	r1, [r2, #0]
 80013c0:	f043 0201 	orr.w	r2, r3, #1
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	3318      	adds	r3, #24
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	440b      	add	r3, r1
 80013cc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e00e      	b.n	80013f0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e006      	b.n	80013f0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
  }
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3724      	adds	r7, #36	@ 0x24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013fc:	b480      	push	{r7}
 80013fe:	b087      	sub	sp, #28
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001410:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001412:	7dfb      	ldrb	r3, [r7, #23]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d003      	beq.n	8001420 <HAL_CAN_GetRxMessage+0x24>
 8001418:	7dfb      	ldrb	r3, [r7, #23]
 800141a:	2b02      	cmp	r3, #2
 800141c:	f040 8103 	bne.w	8001626 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10e      	bne.n	8001444 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d116      	bne.n	8001462 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001438:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e0f7      	b.n	8001634 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d107      	bne.n	8001462 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001456:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e0e8      	b.n	8001634 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	331b      	adds	r3, #27
 800146a:	011b      	lsls	r3, r3, #4
 800146c:	4413      	add	r3, r2
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0204 	and.w	r2, r3, #4
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10c      	bne.n	800149a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	331b      	adds	r3, #27
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	4413      	add	r3, r2
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	0d5b      	lsrs	r3, r3, #21
 8001490:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	e00b      	b.n	80014b2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	331b      	adds	r3, #27
 80014a2:	011b      	lsls	r3, r3, #4
 80014a4:	4413      	add	r3, r2
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	08db      	lsrs	r3, r3, #3
 80014aa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	331b      	adds	r3, #27
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	4413      	add	r3, r2
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0202 	and.w	r2, r3, #2
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	331b      	adds	r3, #27
 80014d0:	011b      	lsls	r3, r3, #4
 80014d2:	4413      	add	r3, r2
 80014d4:	3304      	adds	r3, #4
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2208      	movs	r2, #8
 80014e4:	611a      	str	r2, [r3, #16]
 80014e6:	e00b      	b.n	8001500 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	331b      	adds	r3, #27
 80014f0:	011b      	lsls	r3, r3, #4
 80014f2:	4413      	add	r3, r2
 80014f4:	3304      	adds	r3, #4
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 020f 	and.w	r2, r3, #15
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	331b      	adds	r3, #27
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	4413      	add	r3, r2
 800150c:	3304      	adds	r3, #4
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	0a1b      	lsrs	r3, r3, #8
 8001512:	b2da      	uxtb	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	331b      	adds	r3, #27
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	4413      	add	r3, r2
 8001524:	3304      	adds	r3, #4
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	0c1b      	lsrs	r3, r3, #16
 800152a:	b29a      	uxth	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	4413      	add	r3, r2
 800153a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	4413      	add	r3, r2
 8001550:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	0a1a      	lsrs	r2, r3, #8
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	3301      	adds	r3, #1
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	4413      	add	r3, r2
 800156a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	0c1a      	lsrs	r2, r3, #16
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	3302      	adds	r3, #2
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	4413      	add	r3, r2
 8001584:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	0e1a      	lsrs	r2, r3, #24
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	3303      	adds	r3, #3
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	4413      	add	r3, r2
 800159e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	3304      	adds	r3, #4
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	4413      	add	r3, r2
 80015b6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	0a1a      	lsrs	r2, r3, #8
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	3305      	adds	r3, #5
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	4413      	add	r3, r2
 80015d0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	0c1a      	lsrs	r2, r3, #16
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	3306      	adds	r3, #6
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	4413      	add	r3, r2
 80015ea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	0e1a      	lsrs	r2, r3, #24
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	3307      	adds	r3, #7
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d108      	bne.n	8001612 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0220 	orr.w	r2, r2, #32
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	e007      	b.n	8001622 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	691a      	ldr	r2, [r3, #16]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f042 0220 	orr.w	r2, r2, #32
 8001620:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	e006      	b.n	8001634 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
  }
}
 8001634:	4618      	mov	r0, r3
 8001636:	371c      	adds	r7, #28
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001650:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d002      	beq.n	800165e <HAL_CAN_ActivateNotification+0x1e>
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d109      	bne.n	8001672 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6959      	ldr	r1, [r3, #20]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e006      	b.n	8001680 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001676:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
  }
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	@ 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001694:	2300      	movs	r3, #0
 8001696:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d07c      	beq.n	80017cc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d023      	beq.n	8001724 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2201      	movs	r2, #1
 80016e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f983 	bl	80019fa <HAL_CAN_TxMailbox0CompleteCallback>
 80016f4:	e016      	b.n	8001724 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d004      	beq.n	800170a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
 8001708:	e00c      	b.n	8001724 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d004      	beq.n	800171e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001716:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
 800171c:	e002      	b.n	8001724 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f989 	bl	8001a36 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800172a:	2b00      	cmp	r3, #0
 800172c:	d024      	beq.n	8001778 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001736:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f963 	bl	8001a0e <HAL_CAN_TxMailbox1CompleteCallback>
 8001748:	e016      	b.n	8001778 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001750:	2b00      	cmp	r3, #0
 8001752:	d004      	beq.n	800175e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001756:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
 800175c:	e00c      	b.n	8001778 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001764:	2b00      	cmp	r3, #0
 8001766:	d004      	beq.n	8001772 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001770:	e002      	b.n	8001778 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f969 	bl	8001a4a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d024      	beq.n	80017cc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800178a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f943 	bl	8001a22 <HAL_CAN_TxMailbox2CompleteCallback>
 800179c:	e016      	b.n	80017cc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d004      	beq.n	80017b2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80017a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b0:	e00c      	b.n	80017cc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d004      	beq.n	80017c6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80017bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017c4:	e002      	b.n	80017cc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f949 	bl	8001a5e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00c      	beq.n	80017f0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f003 0310 	and.w	r3, r3, #16
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d007      	beq.n	80017f0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2210      	movs	r2, #16
 80017ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017f0:	6a3b      	ldr	r3, [r7, #32]
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00b      	beq.n	8001812 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2208      	movs	r2, #8
 800180a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 f930 	bl	8001a72 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d009      	beq.n	8001830 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff f954 	bl	8000ad8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00c      	beq.n	8001854 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	f003 0310 	and.w	r3, r3, #16
 8001840:	2b00      	cmp	r3, #0
 8001842:	d007      	beq.n	8001854 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001846:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2210      	movs	r2, #16
 8001852:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	f003 0320 	and.w	r3, r3, #32
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00b      	beq.n	8001876 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	2b00      	cmp	r3, #0
 8001866:	d006      	beq.n	8001876 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2208      	movs	r2, #8
 800186e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f912 	bl	8001a9a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	f003 0310 	and.w	r3, r3, #16
 800187c:	2b00      	cmp	r3, #0
 800187e:	d009      	beq.n	8001894 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f8f9 	bl	8001a86 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00b      	beq.n	80018b6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	f003 0310 	and.w	r3, r3, #16
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d006      	beq.n	80018b6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2210      	movs	r2, #16
 80018ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f8fc 	bl	8001aae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00b      	beq.n	80018d8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d006      	beq.n	80018d8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2208      	movs	r2, #8
 80018d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f8f5 	bl	8001ac2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d07b      	beq.n	80019da <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d072      	beq.n	80019d2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d008      	beq.n	8001908 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800190e:	2b00      	cmp	r3, #0
 8001910:	d008      	beq.n	8001924 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800191c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191e:	f043 0302 	orr.w	r3, r3, #2
 8001922:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800192a:	2b00      	cmp	r3, #0
 800192c:	d008      	beq.n	8001940 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001946:	2b00      	cmp	r3, #0
 8001948:	d043      	beq.n	80019d2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001950:	2b00      	cmp	r3, #0
 8001952:	d03e      	beq.n	80019d2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800195a:	2b60      	cmp	r3, #96	@ 0x60
 800195c:	d02b      	beq.n	80019b6 <HAL_CAN_IRQHandler+0x32a>
 800195e:	2b60      	cmp	r3, #96	@ 0x60
 8001960:	d82e      	bhi.n	80019c0 <HAL_CAN_IRQHandler+0x334>
 8001962:	2b50      	cmp	r3, #80	@ 0x50
 8001964:	d022      	beq.n	80019ac <HAL_CAN_IRQHandler+0x320>
 8001966:	2b50      	cmp	r3, #80	@ 0x50
 8001968:	d82a      	bhi.n	80019c0 <HAL_CAN_IRQHandler+0x334>
 800196a:	2b40      	cmp	r3, #64	@ 0x40
 800196c:	d019      	beq.n	80019a2 <HAL_CAN_IRQHandler+0x316>
 800196e:	2b40      	cmp	r3, #64	@ 0x40
 8001970:	d826      	bhi.n	80019c0 <HAL_CAN_IRQHandler+0x334>
 8001972:	2b30      	cmp	r3, #48	@ 0x30
 8001974:	d010      	beq.n	8001998 <HAL_CAN_IRQHandler+0x30c>
 8001976:	2b30      	cmp	r3, #48	@ 0x30
 8001978:	d822      	bhi.n	80019c0 <HAL_CAN_IRQHandler+0x334>
 800197a:	2b10      	cmp	r3, #16
 800197c:	d002      	beq.n	8001984 <HAL_CAN_IRQHandler+0x2f8>
 800197e:	2b20      	cmp	r3, #32
 8001980:	d005      	beq.n	800198e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001982:	e01d      	b.n	80019c0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001986:	f043 0308 	orr.w	r3, r3, #8
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800198c:	e019      	b.n	80019c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001990:	f043 0310 	orr.w	r3, r3, #16
 8001994:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001996:	e014      	b.n	80019c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199a:	f043 0320 	orr.w	r3, r3, #32
 800199e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019a0:	e00f      	b.n	80019c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80019a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019a8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019aa:	e00a      	b.n	80019c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019b2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019b4:	e005      	b.n	80019c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80019b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019be:	e000      	b.n	80019c2 <HAL_CAN_IRQHandler+0x336>
            break;
 80019c0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	699a      	ldr	r2, [r3, #24]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80019d0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2204      	movs	r2, #4
 80019d8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f872 	bl	8001ad6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019f2:	bf00      	nop
 80019f4:	3728      	adds	r7, #40	@ 0x28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001afc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1e:	4a04      	ldr	r2, [pc, #16]	@ (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	60d3      	str	r3, [r2, #12]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b38:	4b04      	ldr	r3, [pc, #16]	@ (8001b4c <__NVIC_GetPriorityGrouping+0x18>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	f003 0307 	and.w	r3, r3, #7
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	db0b      	blt.n	8001b7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f003 021f 	and.w	r2, r3, #31
 8001b68:	4907      	ldr	r1, [pc, #28]	@ (8001b88 <__NVIC_EnableIRQ+0x38>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	2001      	movs	r0, #1
 8001b72:	fa00 f202 	lsl.w	r2, r0, r2
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000e100 	.word	0xe000e100

08001b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	db0a      	blt.n	8001bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	490c      	ldr	r1, [pc, #48]	@ (8001bd8 <__NVIC_SetPriority+0x4c>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	0112      	lsls	r2, r2, #4
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	440b      	add	r3, r1
 8001bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb4:	e00a      	b.n	8001bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4908      	ldr	r1, [pc, #32]	@ (8001bdc <__NVIC_SetPriority+0x50>)
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	3b04      	subs	r3, #4
 8001bc4:	0112      	lsls	r2, r2, #4
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	440b      	add	r3, r1
 8001bca:	761a      	strb	r2, [r3, #24]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000e100 	.word	0xe000e100
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	@ 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f1c3 0307 	rsb	r3, r3, #7
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	bf28      	it	cs
 8001bfe:	2304      	movcs	r3, #4
 8001c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3304      	adds	r3, #4
 8001c06:	2b06      	cmp	r3, #6
 8001c08:	d902      	bls.n	8001c10 <NVIC_EncodePriority+0x30>
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3b03      	subs	r3, #3
 8001c0e:	e000      	b.n	8001c12 <NVIC_EncodePriority+0x32>
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	f04f 32ff 	mov.w	r2, #4294967295
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	401a      	ands	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	43d9      	mvns	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	4313      	orrs	r3, r2
         );
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3724      	adds	r7, #36	@ 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c58:	d301      	bcc.n	8001c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00f      	b.n	8001c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c88 <SysTick_Config+0x40>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c66:	210f      	movs	r1, #15
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f7ff ff8e 	bl	8001b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c70:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <SysTick_Config+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c76:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <SysTick_Config+0x40>)
 8001c78:	2207      	movs	r2, #7
 8001c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	e000e010 	.word	0xe000e010

08001c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff29 	bl	8001aec <__NVIC_SetPriorityGrouping>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb4:	f7ff ff3e 	bl	8001b34 <__NVIC_GetPriorityGrouping>
 8001cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	6978      	ldr	r0, [r7, #20]
 8001cc0:	f7ff ff8e 	bl	8001be0 <NVIC_EncodePriority>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff5d 	bl	8001b8c <__NVIC_SetPriority>
}
 8001cd2:	bf00      	nop
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff31 	bl	8001b50 <__NVIC_EnableIRQ>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ffa2 	bl	8001c48 <SysTick_Config>
 8001d04:	4603      	mov	r3, r0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	@ 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	e165      	b.n	8001ff8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	f040 8154 	bne.w	8001ff2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d005      	beq.n	8001d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d130      	bne.n	8001dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f003 0201 	and.w	r2, r3, #1
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d017      	beq.n	8001e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d123      	bne.n	8001e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	08da      	lsrs	r2, r3, #3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3208      	adds	r2, #8
 8001e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	220f      	movs	r2, #15
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	08da      	lsrs	r2, r3, #3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3208      	adds	r2, #8
 8001e4e:	69b9      	ldr	r1, [r7, #24]
 8001e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	2203      	movs	r2, #3
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0203 	and.w	r2, r3, #3
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80ae 	beq.w	8001ff2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b5d      	ldr	r3, [pc, #372]	@ (8002010 <HAL_GPIO_Init+0x300>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9e:	4a5c      	ldr	r2, [pc, #368]	@ (8002010 <HAL_GPIO_Init+0x300>)
 8001ea0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ea6:	4b5a      	ldr	r3, [pc, #360]	@ (8002010 <HAL_GPIO_Init+0x300>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eb2:	4a58      	ldr	r2, [pc, #352]	@ (8002014 <HAL_GPIO_Init+0x304>)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	3302      	adds	r3, #2
 8001eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	220f      	movs	r2, #15
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4f      	ldr	r2, [pc, #316]	@ (8002018 <HAL_GPIO_Init+0x308>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d025      	beq.n	8001f2a <HAL_GPIO_Init+0x21a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a4e      	ldr	r2, [pc, #312]	@ (800201c <HAL_GPIO_Init+0x30c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d01f      	beq.n	8001f26 <HAL_GPIO_Init+0x216>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a4d      	ldr	r2, [pc, #308]	@ (8002020 <HAL_GPIO_Init+0x310>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d019      	beq.n	8001f22 <HAL_GPIO_Init+0x212>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4c      	ldr	r2, [pc, #304]	@ (8002024 <HAL_GPIO_Init+0x314>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d013      	beq.n	8001f1e <HAL_GPIO_Init+0x20e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4b      	ldr	r2, [pc, #300]	@ (8002028 <HAL_GPIO_Init+0x318>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00d      	beq.n	8001f1a <HAL_GPIO_Init+0x20a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4a      	ldr	r2, [pc, #296]	@ (800202c <HAL_GPIO_Init+0x31c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d007      	beq.n	8001f16 <HAL_GPIO_Init+0x206>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a49      	ldr	r2, [pc, #292]	@ (8002030 <HAL_GPIO_Init+0x320>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d101      	bne.n	8001f12 <HAL_GPIO_Init+0x202>
 8001f0e:	2306      	movs	r3, #6
 8001f10:	e00c      	b.n	8001f2c <HAL_GPIO_Init+0x21c>
 8001f12:	2307      	movs	r3, #7
 8001f14:	e00a      	b.n	8001f2c <HAL_GPIO_Init+0x21c>
 8001f16:	2305      	movs	r3, #5
 8001f18:	e008      	b.n	8001f2c <HAL_GPIO_Init+0x21c>
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	e006      	b.n	8001f2c <HAL_GPIO_Init+0x21c>
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e004      	b.n	8001f2c <HAL_GPIO_Init+0x21c>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e002      	b.n	8001f2c <HAL_GPIO_Init+0x21c>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <HAL_GPIO_Init+0x21c>
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	f002 0203 	and.w	r2, r2, #3
 8001f32:	0092      	lsls	r2, r2, #2
 8001f34:	4093      	lsls	r3, r2
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f3c:	4935      	ldr	r1, [pc, #212]	@ (8002014 <HAL_GPIO_Init+0x304>)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	089b      	lsrs	r3, r3, #2
 8001f42:	3302      	adds	r3, #2
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002034 <HAL_GPIO_Init+0x324>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f6e:	4a31      	ldr	r2, [pc, #196]	@ (8002034 <HAL_GPIO_Init+0x324>)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f74:	4b2f      	ldr	r3, [pc, #188]	@ (8002034 <HAL_GPIO_Init+0x324>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f98:	4a26      	ldr	r2, [pc, #152]	@ (8002034 <HAL_GPIO_Init+0x324>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f9e:	4b25      	ldr	r3, [pc, #148]	@ (8002034 <HAL_GPIO_Init+0x324>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8002034 <HAL_GPIO_Init+0x324>)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <HAL_GPIO_Init+0x324>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fec:	4a11      	ldr	r2, [pc, #68]	@ (8002034 <HAL_GPIO_Init+0x324>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	2b0f      	cmp	r3, #15
 8001ffc:	f67f ae96 	bls.w	8001d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3724      	adds	r7, #36	@ 0x24
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	40013800 	.word	0x40013800
 8002018:	40020000 	.word	0x40020000
 800201c:	40020400 	.word	0x40020400
 8002020:	40020800 	.word	0x40020800
 8002024:	40020c00 	.word	0x40020c00
 8002028:	40021000 	.word	0x40021000
 800202c:	40021400 	.word	0x40021400
 8002030:	40021800 	.word	0x40021800
 8002034:	40013c00 	.word	0x40013c00

08002038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
 8002044:	4613      	mov	r3, r2
 8002046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002048:	787b      	ldrb	r3, [r7, #1]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800204e:	887a      	ldrh	r2, [r7, #2]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002054:	e003      	b.n	800205e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002056:	887b      	ldrh	r3, [r7, #2]
 8002058:	041a      	lsls	r2, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	619a      	str	r2, [r3, #24]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	603b      	str	r3, [r7, #0]
 800207a:	4b20      	ldr	r3, [pc, #128]	@ (80020fc <HAL_PWREx_EnableOverDrive+0x90>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	4a1f      	ldr	r2, [pc, #124]	@ (80020fc <HAL_PWREx_EnableOverDrive+0x90>)
 8002080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002084:	6413      	str	r3, [r2, #64]	@ 0x40
 8002086:	4b1d      	ldr	r3, [pc, #116]	@ (80020fc <HAL_PWREx_EnableOverDrive+0x90>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002092:	4b1b      	ldr	r3, [pc, #108]	@ (8002100 <HAL_PWREx_EnableOverDrive+0x94>)
 8002094:	2201      	movs	r2, #1
 8002096:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002098:	f7fe fe90 	bl	8000dbc <HAL_GetTick>
 800209c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800209e:	e009      	b.n	80020b4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020a0:	f7fe fe8c 	bl	8000dbc <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020ae:	d901      	bls.n	80020b4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e01f      	b.n	80020f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020b4:	4b13      	ldr	r3, [pc, #76]	@ (8002104 <HAL_PWREx_EnableOverDrive+0x98>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020c0:	d1ee      	bne.n	80020a0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020c2:	4b11      	ldr	r3, [pc, #68]	@ (8002108 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020c8:	f7fe fe78 	bl	8000dbc <HAL_GetTick>
 80020cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020ce:	e009      	b.n	80020e4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020d0:	f7fe fe74 	bl	8000dbc <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020de:	d901      	bls.n	80020e4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e007      	b.n	80020f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020e4:	4b07      	ldr	r3, [pc, #28]	@ (8002104 <HAL_PWREx_EnableOverDrive+0x98>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80020f0:	d1ee      	bne.n	80020d0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40023800 	.word	0x40023800
 8002100:	420e0040 	.word	0x420e0040
 8002104:	40007000 	.word	0x40007000
 8002108:	420e0044 	.word	0x420e0044

0800210c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0cc      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002120:	4b68      	ldr	r3, [pc, #416]	@ (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d90c      	bls.n	8002148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b65      	ldr	r3, [pc, #404]	@ (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002136:	4b63      	ldr	r3, [pc, #396]	@ (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d001      	beq.n	8002148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0b8      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d020      	beq.n	8002196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002160:	4b59      	ldr	r3, [pc, #356]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a58      	ldr	r2, [pc, #352]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800216a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002178:	4b53      	ldr	r3, [pc, #332]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4a52      	ldr	r2, [pc, #328]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002184:	4b50      	ldr	r3, [pc, #320]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	494d      	ldr	r1, [pc, #308]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d044      	beq.n	800222c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	4b47      	ldr	r3, [pc, #284]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d119      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e07f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d003      	beq.n	80021ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ca:	4b3f      	ldr	r3, [pc, #252]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e06f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021da:	4b3b      	ldr	r3, [pc, #236]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e067      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ea:	4b37      	ldr	r3, [pc, #220]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f023 0203 	bic.w	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4934      	ldr	r1, [pc, #208]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021fc:	f7fe fdde 	bl	8000dbc <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	e00a      	b.n	800221a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002204:	f7fe fdda 	bl	8000dbc <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e04f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	4b2b      	ldr	r3, [pc, #172]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 020c 	and.w	r2, r3, #12
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	429a      	cmp	r2, r3
 800222a:	d1eb      	bne.n	8002204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800222c:	4b25      	ldr	r3, [pc, #148]	@ (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d20c      	bcs.n	8002254 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b22      	ldr	r3, [pc, #136]	@ (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b20      	ldr	r3, [pc, #128]	@ (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e032      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002260:	4b19      	ldr	r3, [pc, #100]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4916      	ldr	r1, [pc, #88]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	4313      	orrs	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d009      	beq.n	8002292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800227e:	4b12      	ldr	r3, [pc, #72]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	490e      	ldr	r1, [pc, #56]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	4313      	orrs	r3, r2
 8002290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002292:	f000 f821 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8002296:	4602      	mov	r2, r0
 8002298:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	091b      	lsrs	r3, r3, #4
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	490a      	ldr	r1, [pc, #40]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	5ccb      	ldrb	r3, [r1, r3]
 80022a6:	fa22 f303 	lsr.w	r3, r2, r3
 80022aa:	4a09      	ldr	r2, [pc, #36]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80022ae:	4b09      	ldr	r3, [pc, #36]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fd3e 	bl	8000d34 <HAL_InitTick>

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40023c00 	.word	0x40023c00
 80022c8:	40023800 	.word	0x40023800
 80022cc:	08002ce4 	.word	0x08002ce4
 80022d0:	2000000c 	.word	0x2000000c
 80022d4:	20000010 	.word	0x20000010

080022d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022dc:	b0ae      	sub	sp, #184	@ 0xb8
 80022de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022fe:	4bcb      	ldr	r3, [pc, #812]	@ (800262c <HAL_RCC_GetSysClockFreq+0x354>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b0c      	cmp	r3, #12
 8002308:	f200 8206 	bhi.w	8002718 <HAL_RCC_GetSysClockFreq+0x440>
 800230c:	a201      	add	r2, pc, #4	@ (adr r2, 8002314 <HAL_RCC_GetSysClockFreq+0x3c>)
 800230e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002312:	bf00      	nop
 8002314:	08002349 	.word	0x08002349
 8002318:	08002719 	.word	0x08002719
 800231c:	08002719 	.word	0x08002719
 8002320:	08002719 	.word	0x08002719
 8002324:	08002351 	.word	0x08002351
 8002328:	08002719 	.word	0x08002719
 800232c:	08002719 	.word	0x08002719
 8002330:	08002719 	.word	0x08002719
 8002334:	08002359 	.word	0x08002359
 8002338:	08002719 	.word	0x08002719
 800233c:	08002719 	.word	0x08002719
 8002340:	08002719 	.word	0x08002719
 8002344:	08002549 	.word	0x08002549
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002348:	4bb9      	ldr	r3, [pc, #740]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x358>)
 800234a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800234e:	e1e7      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002350:	4bb8      	ldr	r3, [pc, #736]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002352:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002356:	e1e3      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002358:	4bb4      	ldr	r3, [pc, #720]	@ (800262c <HAL_RCC_GetSysClockFreq+0x354>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002360:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002364:	4bb1      	ldr	r3, [pc, #708]	@ (800262c <HAL_RCC_GetSysClockFreq+0x354>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d071      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002370:	4bae      	ldr	r3, [pc, #696]	@ (800262c <HAL_RCC_GetSysClockFreq+0x354>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	099b      	lsrs	r3, r3, #6
 8002376:	2200      	movs	r2, #0
 8002378:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800237c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002380:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002388:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800238c:	2300      	movs	r3, #0
 800238e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002392:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002396:	4622      	mov	r2, r4
 8002398:	462b      	mov	r3, r5
 800239a:	f04f 0000 	mov.w	r0, #0
 800239e:	f04f 0100 	mov.w	r1, #0
 80023a2:	0159      	lsls	r1, r3, #5
 80023a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023a8:	0150      	lsls	r0, r2, #5
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4621      	mov	r1, r4
 80023b0:	1a51      	subs	r1, r2, r1
 80023b2:	6439      	str	r1, [r7, #64]	@ 0x40
 80023b4:	4629      	mov	r1, r5
 80023b6:	eb63 0301 	sbc.w	r3, r3, r1
 80023ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80023c8:	4649      	mov	r1, r9
 80023ca:	018b      	lsls	r3, r1, #6
 80023cc:	4641      	mov	r1, r8
 80023ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023d2:	4641      	mov	r1, r8
 80023d4:	018a      	lsls	r2, r1, #6
 80023d6:	4641      	mov	r1, r8
 80023d8:	1a51      	subs	r1, r2, r1
 80023da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80023dc:	4649      	mov	r1, r9
 80023de:	eb63 0301 	sbc.w	r3, r3, r1
 80023e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80023f0:	4649      	mov	r1, r9
 80023f2:	00cb      	lsls	r3, r1, #3
 80023f4:	4641      	mov	r1, r8
 80023f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023fa:	4641      	mov	r1, r8
 80023fc:	00ca      	lsls	r2, r1, #3
 80023fe:	4610      	mov	r0, r2
 8002400:	4619      	mov	r1, r3
 8002402:	4603      	mov	r3, r0
 8002404:	4622      	mov	r2, r4
 8002406:	189b      	adds	r3, r3, r2
 8002408:	633b      	str	r3, [r7, #48]	@ 0x30
 800240a:	462b      	mov	r3, r5
 800240c:	460a      	mov	r2, r1
 800240e:	eb42 0303 	adc.w	r3, r2, r3
 8002412:	637b      	str	r3, [r7, #52]	@ 0x34
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	f04f 0300 	mov.w	r3, #0
 800241c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002420:	4629      	mov	r1, r5
 8002422:	024b      	lsls	r3, r1, #9
 8002424:	4621      	mov	r1, r4
 8002426:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800242a:	4621      	mov	r1, r4
 800242c:	024a      	lsls	r2, r1, #9
 800242e:	4610      	mov	r0, r2
 8002430:	4619      	mov	r1, r3
 8002432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002436:	2200      	movs	r2, #0
 8002438:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800243c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002440:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002444:	f7fd fede 	bl	8000204 <__aeabi_uldivmod>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4613      	mov	r3, r2
 800244e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002452:	e067      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002454:	4b75      	ldr	r3, [pc, #468]	@ (800262c <HAL_RCC_GetSysClockFreq+0x354>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	099b      	lsrs	r3, r3, #6
 800245a:	2200      	movs	r2, #0
 800245c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002460:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002464:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800246c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800246e:	2300      	movs	r3, #0
 8002470:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002472:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002476:	4622      	mov	r2, r4
 8002478:	462b      	mov	r3, r5
 800247a:	f04f 0000 	mov.w	r0, #0
 800247e:	f04f 0100 	mov.w	r1, #0
 8002482:	0159      	lsls	r1, r3, #5
 8002484:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002488:	0150      	lsls	r0, r2, #5
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4621      	mov	r1, r4
 8002490:	1a51      	subs	r1, r2, r1
 8002492:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002494:	4629      	mov	r1, r5
 8002496:	eb63 0301 	sbc.w	r3, r3, r1
 800249a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80024a8:	4649      	mov	r1, r9
 80024aa:	018b      	lsls	r3, r1, #6
 80024ac:	4641      	mov	r1, r8
 80024ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024b2:	4641      	mov	r1, r8
 80024b4:	018a      	lsls	r2, r1, #6
 80024b6:	4641      	mov	r1, r8
 80024b8:	ebb2 0a01 	subs.w	sl, r2, r1
 80024bc:	4649      	mov	r1, r9
 80024be:	eb63 0b01 	sbc.w	fp, r3, r1
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024ce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024d6:	4692      	mov	sl, r2
 80024d8:	469b      	mov	fp, r3
 80024da:	4623      	mov	r3, r4
 80024dc:	eb1a 0303 	adds.w	r3, sl, r3
 80024e0:	623b      	str	r3, [r7, #32]
 80024e2:	462b      	mov	r3, r5
 80024e4:	eb4b 0303 	adc.w	r3, fp, r3
 80024e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80024f6:	4629      	mov	r1, r5
 80024f8:	028b      	lsls	r3, r1, #10
 80024fa:	4621      	mov	r1, r4
 80024fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002500:	4621      	mov	r1, r4
 8002502:	028a      	lsls	r2, r1, #10
 8002504:	4610      	mov	r0, r2
 8002506:	4619      	mov	r1, r3
 8002508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800250c:	2200      	movs	r2, #0
 800250e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002510:	677a      	str	r2, [r7, #116]	@ 0x74
 8002512:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002516:	f7fd fe75 	bl	8000204 <__aeabi_uldivmod>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4613      	mov	r3, r2
 8002520:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002524:	4b41      	ldr	r3, [pc, #260]	@ (800262c <HAL_RCC_GetSysClockFreq+0x354>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	0c1b      	lsrs	r3, r3, #16
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	3301      	adds	r3, #1
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002536:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800253a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800253e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002542:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002546:	e0eb      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002548:	4b38      	ldr	r3, [pc, #224]	@ (800262c <HAL_RCC_GetSysClockFreq+0x354>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002550:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002554:	4b35      	ldr	r3, [pc, #212]	@ (800262c <HAL_RCC_GetSysClockFreq+0x354>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d06b      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002560:	4b32      	ldr	r3, [pc, #200]	@ (800262c <HAL_RCC_GetSysClockFreq+0x354>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	099b      	lsrs	r3, r3, #6
 8002566:	2200      	movs	r2, #0
 8002568:	66bb      	str	r3, [r7, #104]	@ 0x68
 800256a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800256c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800256e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002572:	663b      	str	r3, [r7, #96]	@ 0x60
 8002574:	2300      	movs	r3, #0
 8002576:	667b      	str	r3, [r7, #100]	@ 0x64
 8002578:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800257c:	4622      	mov	r2, r4
 800257e:	462b      	mov	r3, r5
 8002580:	f04f 0000 	mov.w	r0, #0
 8002584:	f04f 0100 	mov.w	r1, #0
 8002588:	0159      	lsls	r1, r3, #5
 800258a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800258e:	0150      	lsls	r0, r2, #5
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4621      	mov	r1, r4
 8002596:	1a51      	subs	r1, r2, r1
 8002598:	61b9      	str	r1, [r7, #24]
 800259a:	4629      	mov	r1, r5
 800259c:	eb63 0301 	sbc.w	r3, r3, r1
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80025ae:	4659      	mov	r1, fp
 80025b0:	018b      	lsls	r3, r1, #6
 80025b2:	4651      	mov	r1, sl
 80025b4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025b8:	4651      	mov	r1, sl
 80025ba:	018a      	lsls	r2, r1, #6
 80025bc:	4651      	mov	r1, sl
 80025be:	ebb2 0801 	subs.w	r8, r2, r1
 80025c2:	4659      	mov	r1, fp
 80025c4:	eb63 0901 	sbc.w	r9, r3, r1
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025dc:	4690      	mov	r8, r2
 80025de:	4699      	mov	r9, r3
 80025e0:	4623      	mov	r3, r4
 80025e2:	eb18 0303 	adds.w	r3, r8, r3
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	462b      	mov	r3, r5
 80025ea:	eb49 0303 	adc.w	r3, r9, r3
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80025fc:	4629      	mov	r1, r5
 80025fe:	024b      	lsls	r3, r1, #9
 8002600:	4621      	mov	r1, r4
 8002602:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002606:	4621      	mov	r1, r4
 8002608:	024a      	lsls	r2, r1, #9
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002612:	2200      	movs	r2, #0
 8002614:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002616:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002618:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800261c:	f7fd fdf2 	bl	8000204 <__aeabi_uldivmod>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4613      	mov	r3, r2
 8002626:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800262a:	e065      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x420>
 800262c:	40023800 	.word	0x40023800
 8002630:	00f42400 	.word	0x00f42400
 8002634:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002638:	4b3d      	ldr	r3, [pc, #244]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x458>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	099b      	lsrs	r3, r3, #6
 800263e:	2200      	movs	r2, #0
 8002640:	4618      	mov	r0, r3
 8002642:	4611      	mov	r1, r2
 8002644:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002648:	653b      	str	r3, [r7, #80]	@ 0x50
 800264a:	2300      	movs	r3, #0
 800264c:	657b      	str	r3, [r7, #84]	@ 0x54
 800264e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002652:	4642      	mov	r2, r8
 8002654:	464b      	mov	r3, r9
 8002656:	f04f 0000 	mov.w	r0, #0
 800265a:	f04f 0100 	mov.w	r1, #0
 800265e:	0159      	lsls	r1, r3, #5
 8002660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002664:	0150      	lsls	r0, r2, #5
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4641      	mov	r1, r8
 800266c:	1a51      	subs	r1, r2, r1
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	4649      	mov	r1, r9
 8002672:	eb63 0301 	sbc.w	r3, r3, r1
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002684:	4659      	mov	r1, fp
 8002686:	018b      	lsls	r3, r1, #6
 8002688:	4651      	mov	r1, sl
 800268a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800268e:	4651      	mov	r1, sl
 8002690:	018a      	lsls	r2, r1, #6
 8002692:	4651      	mov	r1, sl
 8002694:	1a54      	subs	r4, r2, r1
 8002696:	4659      	mov	r1, fp
 8002698:	eb63 0501 	sbc.w	r5, r3, r1
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	00eb      	lsls	r3, r5, #3
 80026a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026aa:	00e2      	lsls	r2, r4, #3
 80026ac:	4614      	mov	r4, r2
 80026ae:	461d      	mov	r5, r3
 80026b0:	4643      	mov	r3, r8
 80026b2:	18e3      	adds	r3, r4, r3
 80026b4:	603b      	str	r3, [r7, #0]
 80026b6:	464b      	mov	r3, r9
 80026b8:	eb45 0303 	adc.w	r3, r5, r3
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026ca:	4629      	mov	r1, r5
 80026cc:	028b      	lsls	r3, r1, #10
 80026ce:	4621      	mov	r1, r4
 80026d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026d4:	4621      	mov	r1, r4
 80026d6:	028a      	lsls	r2, r1, #10
 80026d8:	4610      	mov	r0, r2
 80026da:	4619      	mov	r1, r3
 80026dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026e0:	2200      	movs	r2, #0
 80026e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026e4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80026e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80026ea:	f7fd fd8b 	bl	8000204 <__aeabi_uldivmod>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4613      	mov	r3, r2
 80026f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x458>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	0f1b      	lsrs	r3, r3, #28
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002706:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800270a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800270e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002712:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002716:	e003      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002718:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x45c>)
 800271a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800271e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002720:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002724:	4618      	mov	r0, r3
 8002726:	37b8      	adds	r7, #184	@ 0xb8
 8002728:	46bd      	mov	sp, r7
 800272a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
 8002734:	00f42400 	.word	0x00f42400

08002738 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e28d      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 8083 	beq.w	800285e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002758:	4b94      	ldr	r3, [pc, #592]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 030c 	and.w	r3, r3, #12
 8002760:	2b04      	cmp	r3, #4
 8002762:	d019      	beq.n	8002798 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002764:	4b91      	ldr	r3, [pc, #580]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 030c 	and.w	r3, r3, #12
        || \
 800276c:	2b08      	cmp	r3, #8
 800276e:	d106      	bne.n	800277e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002770:	4b8e      	ldr	r3, [pc, #568]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002778:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800277c:	d00c      	beq.n	8002798 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800277e:	4b8b      	ldr	r3, [pc, #556]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002786:	2b0c      	cmp	r3, #12
 8002788:	d112      	bne.n	80027b0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800278a:	4b88      	ldr	r3, [pc, #544]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002792:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002796:	d10b      	bne.n	80027b0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002798:	4b84      	ldr	r3, [pc, #528]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d05b      	beq.n	800285c <HAL_RCC_OscConfig+0x124>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d157      	bne.n	800285c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e25a      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027b8:	d106      	bne.n	80027c8 <HAL_RCC_OscConfig+0x90>
 80027ba:	4b7c      	ldr	r3, [pc, #496]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a7b      	ldr	r2, [pc, #492]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80027c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	e01d      	b.n	8002804 <HAL_RCC_OscConfig+0xcc>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027d0:	d10c      	bne.n	80027ec <HAL_RCC_OscConfig+0xb4>
 80027d2:	4b76      	ldr	r3, [pc, #472]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a75      	ldr	r2, [pc, #468]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80027d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	4b73      	ldr	r3, [pc, #460]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a72      	ldr	r2, [pc, #456]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80027e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	e00b      	b.n	8002804 <HAL_RCC_OscConfig+0xcc>
 80027ec:	4b6f      	ldr	r3, [pc, #444]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a6e      	ldr	r2, [pc, #440]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80027f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	4b6c      	ldr	r3, [pc, #432]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a6b      	ldr	r2, [pc, #428]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80027fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d013      	beq.n	8002834 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280c:	f7fe fad6 	bl	8000dbc <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002814:	f7fe fad2 	bl	8000dbc <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b64      	cmp	r3, #100	@ 0x64
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e21f      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	4b61      	ldr	r3, [pc, #388]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f0      	beq.n	8002814 <HAL_RCC_OscConfig+0xdc>
 8002832:	e014      	b.n	800285e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7fe fac2 	bl	8000dbc <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800283c:	f7fe fabe 	bl	8000dbc <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b64      	cmp	r3, #100	@ 0x64
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e20b      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284e:	4b57      	ldr	r3, [pc, #348]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x104>
 800285a:	e000      	b.n	800285e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d06f      	beq.n	800294a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800286a:	4b50      	ldr	r3, [pc, #320]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	2b00      	cmp	r3, #0
 8002874:	d017      	beq.n	80028a6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002876:	4b4d      	ldr	r3, [pc, #308]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 030c 	and.w	r3, r3, #12
        || \
 800287e:	2b08      	cmp	r3, #8
 8002880:	d105      	bne.n	800288e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002882:	4b4a      	ldr	r3, [pc, #296]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288e:	4b47      	ldr	r3, [pc, #284]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002896:	2b0c      	cmp	r3, #12
 8002898:	d11c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800289a:	4b44      	ldr	r3, [pc, #272]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d116      	bne.n	80028d4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	4b41      	ldr	r3, [pc, #260]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <HAL_RCC_OscConfig+0x186>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e1d3      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028be:	4b3b      	ldr	r3, [pc, #236]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4937      	ldr	r1, [pc, #220]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d2:	e03a      	b.n	800294a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d020      	beq.n	800291e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028dc:	4b34      	ldr	r3, [pc, #208]	@ (80029b0 <HAL_RCC_OscConfig+0x278>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7fe fa6b 	bl	8000dbc <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ea:	f7fe fa67 	bl	8000dbc <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e1b4      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fc:	4b2b      	ldr	r3, [pc, #172]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002908:	4b28      	ldr	r3, [pc, #160]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4925      	ldr	r1, [pc, #148]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 8002918:	4313      	orrs	r3, r2
 800291a:	600b      	str	r3, [r1, #0]
 800291c:	e015      	b.n	800294a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291e:	4b24      	ldr	r3, [pc, #144]	@ (80029b0 <HAL_RCC_OscConfig+0x278>)
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe fa4a 	bl	8000dbc <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800292c:	f7fe fa46 	bl	8000dbc <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e193      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293e:	4b1b      	ldr	r3, [pc, #108]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d036      	beq.n	80029c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d016      	beq.n	800298c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295e:	4b15      	ldr	r3, [pc, #84]	@ (80029b4 <HAL_RCC_OscConfig+0x27c>)
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7fe fa2a 	bl	8000dbc <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296c:	f7fe fa26 	bl	8000dbc <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e173      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297e:	4b0b      	ldr	r3, [pc, #44]	@ (80029ac <HAL_RCC_OscConfig+0x274>)
 8002980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x234>
 800298a:	e01b      	b.n	80029c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298c:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <HAL_RCC_OscConfig+0x27c>)
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002992:	f7fe fa13 	bl	8000dbc <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002998:	e00e      	b.n	80029b8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299a:	f7fe fa0f 	bl	8000dbc <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d907      	bls.n	80029b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e15c      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
 80029ac:	40023800 	.word	0x40023800
 80029b0:	42470000 	.word	0x42470000
 80029b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b8:	4b8a      	ldr	r3, [pc, #552]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 80029ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1ea      	bne.n	800299a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8097 	beq.w	8002b00 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d6:	4b83      	ldr	r3, [pc, #524]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10f      	bne.n	8002a02 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	4b7f      	ldr	r3, [pc, #508]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	4a7e      	ldr	r2, [pc, #504]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 80029ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f2:	4b7c      	ldr	r3, [pc, #496]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fe:	2301      	movs	r3, #1
 8002a00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a02:	4b79      	ldr	r3, [pc, #484]	@ (8002be8 <HAL_RCC_OscConfig+0x4b0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d118      	bne.n	8002a40 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a0e:	4b76      	ldr	r3, [pc, #472]	@ (8002be8 <HAL_RCC_OscConfig+0x4b0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a75      	ldr	r2, [pc, #468]	@ (8002be8 <HAL_RCC_OscConfig+0x4b0>)
 8002a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1a:	f7fe f9cf 	bl	8000dbc <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a22:	f7fe f9cb 	bl	8000dbc <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e118      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a34:	4b6c      	ldr	r3, [pc, #432]	@ (8002be8 <HAL_RCC_OscConfig+0x4b0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d106      	bne.n	8002a56 <HAL_RCC_OscConfig+0x31e>
 8002a48:	4b66      	ldr	r3, [pc, #408]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4c:	4a65      	ldr	r2, [pc, #404]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a54:	e01c      	b.n	8002a90 <HAL_RCC_OscConfig+0x358>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b05      	cmp	r3, #5
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x340>
 8002a5e:	4b61      	ldr	r3, [pc, #388]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a62:	4a60      	ldr	r2, [pc, #384]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002a64:	f043 0304 	orr.w	r3, r3, #4
 8002a68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a6a:	4b5e      	ldr	r3, [pc, #376]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6e:	4a5d      	ldr	r2, [pc, #372]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a76:	e00b      	b.n	8002a90 <HAL_RCC_OscConfig+0x358>
 8002a78:	4b5a      	ldr	r3, [pc, #360]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7c:	4a59      	ldr	r2, [pc, #356]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a84:	4b57      	ldr	r3, [pc, #348]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a88:	4a56      	ldr	r2, [pc, #344]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002a8a:	f023 0304 	bic.w	r3, r3, #4
 8002a8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d015      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7fe f990 	bl	8000dbc <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa0:	f7fe f98c 	bl	8000dbc <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e0d7      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab6:	4b4b      	ldr	r3, [pc, #300]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0ee      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x368>
 8002ac2:	e014      	b.n	8002aee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac4:	f7fe f97a 	bl	8000dbc <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002acc:	f7fe f976 	bl	8000dbc <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e0c1      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae2:	4b40      	ldr	r3, [pc, #256]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1ee      	bne.n	8002acc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002aee:	7dfb      	ldrb	r3, [r7, #23]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d105      	bne.n	8002b00 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af4:	4b3b      	ldr	r3, [pc, #236]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af8:	4a3a      	ldr	r2, [pc, #232]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002afa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002afe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 80ad 	beq.w	8002c64 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b0a:	4b36      	ldr	r3, [pc, #216]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d060      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d145      	bne.n	8002baa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1e:	4b33      	ldr	r3, [pc, #204]	@ (8002bec <HAL_RCC_OscConfig+0x4b4>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe f94a 	bl	8000dbc <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fe f946 	bl	8000dbc <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e093      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3e:	4b29      	ldr	r3, [pc, #164]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	019b      	lsls	r3, r3, #6
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b60:	085b      	lsrs	r3, r3, #1
 8002b62:	3b01      	subs	r3, #1
 8002b64:	041b      	lsls	r3, r3, #16
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6c:	061b      	lsls	r3, r3, #24
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b74:	071b      	lsls	r3, r3, #28
 8002b76:	491b      	ldr	r1, [pc, #108]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bec <HAL_RCC_OscConfig+0x4b4>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b82:	f7fe f91b 	bl	8000dbc <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8a:	f7fe f917 	bl	8000dbc <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e064      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9c:	4b11      	ldr	r3, [pc, #68]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x452>
 8002ba8:	e05c      	b.n	8002c64 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002baa:	4b10      	ldr	r3, [pc, #64]	@ (8002bec <HAL_RCC_OscConfig+0x4b4>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb0:	f7fe f904 	bl	8000dbc <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fe f900 	bl	8000dbc <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e04d      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bca:	4b06      	ldr	r3, [pc, #24]	@ (8002be4 <HAL_RCC_OscConfig+0x4ac>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x480>
 8002bd6:	e045      	b.n	8002c64 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d107      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e040      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40007000 	.word	0x40007000
 8002bec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c70 <HAL_RCC_OscConfig+0x538>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d030      	beq.n	8002c60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d129      	bne.n	8002c60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d122      	bne.n	8002c60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c20:	4013      	ands	r3, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d119      	bne.n	8002c60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c36:	085b      	lsrs	r3, r3, #1
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d10f      	bne.n	8002c60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d107      	bne.n	8002c60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800

08002c74 <memset>:
 8002c74:	4402      	add	r2, r0
 8002c76:	4603      	mov	r3, r0
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d100      	bne.n	8002c7e <memset+0xa>
 8002c7c:	4770      	bx	lr
 8002c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c82:	e7f9      	b.n	8002c78 <memset+0x4>

08002c84 <__libc_init_array>:
 8002c84:	b570      	push	{r4, r5, r6, lr}
 8002c86:	4d0d      	ldr	r5, [pc, #52]	@ (8002cbc <__libc_init_array+0x38>)
 8002c88:	4c0d      	ldr	r4, [pc, #52]	@ (8002cc0 <__libc_init_array+0x3c>)
 8002c8a:	1b64      	subs	r4, r4, r5
 8002c8c:	10a4      	asrs	r4, r4, #2
 8002c8e:	2600      	movs	r6, #0
 8002c90:	42a6      	cmp	r6, r4
 8002c92:	d109      	bne.n	8002ca8 <__libc_init_array+0x24>
 8002c94:	4d0b      	ldr	r5, [pc, #44]	@ (8002cc4 <__libc_init_array+0x40>)
 8002c96:	4c0c      	ldr	r4, [pc, #48]	@ (8002cc8 <__libc_init_array+0x44>)
 8002c98:	f000 f818 	bl	8002ccc <_init>
 8002c9c:	1b64      	subs	r4, r4, r5
 8002c9e:	10a4      	asrs	r4, r4, #2
 8002ca0:	2600      	movs	r6, #0
 8002ca2:	42a6      	cmp	r6, r4
 8002ca4:	d105      	bne.n	8002cb2 <__libc_init_array+0x2e>
 8002ca6:	bd70      	pop	{r4, r5, r6, pc}
 8002ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cac:	4798      	blx	r3
 8002cae:	3601      	adds	r6, #1
 8002cb0:	e7ee      	b.n	8002c90 <__libc_init_array+0xc>
 8002cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cb6:	4798      	blx	r3
 8002cb8:	3601      	adds	r6, #1
 8002cba:	e7f2      	b.n	8002ca2 <__libc_init_array+0x1e>
 8002cbc:	08002cfc 	.word	0x08002cfc
 8002cc0:	08002cfc 	.word	0x08002cfc
 8002cc4:	08002cfc 	.word	0x08002cfc
 8002cc8:	08002d00 	.word	0x08002d00

08002ccc <_init>:
 8002ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cce:	bf00      	nop
 8002cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cd2:	bc08      	pop	{r3}
 8002cd4:	469e      	mov	lr, r3
 8002cd6:	4770      	bx	lr

08002cd8 <_fini>:
 8002cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cda:	bf00      	nop
 8002cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cde:	bc08      	pop	{r3}
 8002ce0:	469e      	mov	lr, r3
 8002ce2:	4770      	bx	lr
